-- MySQL dump 10.13  Distrib 5.5.47, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: blogj
-- ------------------------------------------------------
-- Server version	5.5.47-0ubuntu0.14.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `article`
--

DROP TABLE IF EXISTS `article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `article` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `alias` varchar(255) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `weight` int(11) DEFAULT NULL,
  `ut` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `enable` tinyint(1) DEFAULT NULL,
  `category_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_article_id` (`user_id`),
  KEY `article_category_id_idx` (`category_id`),
  CONSTRAINT `fk_article_user_id` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article`
--

LOCK TABLES `article` WRITE;
/*!40000 ALTER TABLE `article` DISABLE KEYS */;
INSERT INTO `article` VALUES (15,'java-memory',1,1,'2016-02-28 19:29:05',1,42),(16,'annotations-in-java',1,2,'2016-02-28 19:30:43',1,42),(17,'java-exceptions',1,100,'2016-02-28 19:48:39',1,42),(18,'access-modifiers',1,100,'2016-02-28 19:51:07',1,42),(19,'Create-an-application-in-Android-style',1,100,'2016-02-28 20:32:35',1,44),(20,'orientation',1,100,'2016-02-28 20:34:57',1,44),(21,'good-programming-style',1,100,'2016-02-28 20:37:09',1,43),(22,'php-error',1,100,'2016-02-28 20:39:07',1,43),(23,'first-application',1,100,'2016-02-28 20:45:05',1,41);
/*!40000 ALTER TABLE `article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `article_tag_link`
--

DROP TABLE IF EXISTS `article_tag_link`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `article_tag_link` (
  `article_id` int(11) NOT NULL,
  `tag_id` int(11) NOT NULL DEFAULT '0',
  `id` int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`id`),
  KEY `article_tag_id` (`tag_id`),
  KEY `article_id` (`article_id`)
) ENGINE=InnoDB AUTO_INCREMENT=68 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article_tag_link`
--

LOCK TABLES `article_tag_link` WRITE;
/*!40000 ALTER TABLE `article_tag_link` DISABLE KEYS */;
INSERT INTO `article_tag_link` VALUES (15,33,36),(15,34,37),(15,35,38),(16,33,39),(16,36,40),(17,33,41),(17,37,42),(18,38,46),(18,39,47),(18,33,48),(19,40,49),(19,33,50),(19,41,51),(20,40,52),(20,33,53),(20,42,54),(21,43,55),(21,44,56),(22,43,57),(22,45,58),(23,33,65),(23,46,66),(23,47,67);
/*!40000 ALTER TABLE `article_tag_link` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `category`
--

DROP TABLE IF EXISTS `category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `category` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `enable` tinyint(1) DEFAULT NULL,
  `alias` varchar(255) DEFAULT NULL,
  `weight` int(11) DEFAULT '1',
  `user_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_category_id` (`user_id`),
  CONSTRAINT `fk_category_user_id` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=45 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `category`
--

LOCK TABLES `category` WRITE;
/*!40000 ALTER TABLE `category` DISABLE KEYS */;
INSERT INTO `category` VALUES (41,1,'practice',1,1),(42,1,'java',2,1),(43,1,'php',3,1),(44,1,'android',4,1);
/*!40000 ALTER TABLE `category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comment`
--

DROP TABLE IF EXISTS `comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `ut` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `article_id` int(11) DEFAULT NULL,
  `enable` tinyint(1) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_comment_id` (`user_id`),
  CONSTRAINT `fk_comment_user_id` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=36 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comment`
--

LOCK TABLES `comment` WRITE;
/*!40000 ALTER TABLE `comment` DISABLE KEYS */;
INSERT INTO `comment` VALUES (35,1,'2016-02-28 20:29:04',18,1,NULL);
/*!40000 ALTER TABLE `comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `content`
--

DROP TABLE IF EXISTS `content`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `content` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `text` mediumtext,
  `lang` varchar(3) DEFAULT NULL,
  `object_id` int(11) NOT NULL,
  `type` varchar(10) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `ut` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `content_object_id_idx` (`object_id`),
  KEY `content_type_idx` (`type`)
) ENGINE=InnoDB AUTO_INCREMENT=372 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `content`
--

LOCK TABLES `content` WRITE;
/*!40000 ALTER TABLE `content` DISABLE KEYS */;
INSERT INTO `content` VALUES (327,'Practice','en',41,'category',1,'2016-02-28 19:22:06'),(328,'Практика','ru',41,'category',1,'2016-02-28 19:22:06'),(329,'Java','en',42,'category',1,'2016-02-28 19:22:48'),(330,'Джава','ru',42,'category',1,'2016-02-28 19:22:48'),(331,'Php','en',43,'category',1,'2016-02-28 19:23:52'),(332,'Пиэйчпи','ru',43,'category',1,'2016-02-28 19:23:52'),(333,'Android','en',44,'category',1,'2016-02-28 19:24:18'),(334,'Андроид','ru',44,'category',1,'2016-02-28 19:24:18'),(335,'Understanding memory management','en',15,'article_t',1,'2016-02-28 19:27:38'),(336,'Общие сведения о управление памятью','ru',15,'article_t',1,'2016-02-28 19:27:38'),(337,'<p><span class=\"notranslate\">Memory management - the process of placing new objects and removing unused objects, to make way for these new allocations of objects.</span> <span class=\"notranslate\"> The traditional language for the memory management method is a manual programming.</span> <span class=\"notranslate\"> Its essence is as follows:</span></p>\r\n<ul>\r\n<li><span class=\"notranslate\"> To create an object on the heap programmer explicitly calls memory allocation command.</span> <span class=\"notranslate\"> This command returns a pointer to the allocated memory area, which is stored and used to access it.</span></li>\r\n<li><span class=\"notranslate\"> As long as the created object is needed to run the program, the program refers to it through the previously saved pointer.</span></li>\r\n<li><span class=\"notranslate\"> When no object passes, the programmer explicitly calls deallocation command, passing it a pointer to a deleted object.</span></li>\r\n<li><span class=\"notranslate\"> Manual memory management allows potentially possible two problems: Hanging references and memory leaks.</span></li>\r\n</ul>\r\n<p><span class=\"notranslate\"> <strong>Hanging link</strong> - it remains to use the reference to the object that has been removed.</span> <span class=\"notranslate\"> After removal of all the remaining object in the program links to it are \"hanging\".</span> <span class=\"notranslate\"> Memory, previously occupied by the object may be transmitted, and the operating system become available, or to be used for a new object in the same program.</span></p>\r\n<p><span class=\"notranslate\"> <strong>A memory leak</strong> - the process of uncontrolled reduction of the amount of free RAM or virtual memory associated with errors in the operating programs, time does not relieve the unnecessary portions of the memory already.</span></p>\r\n<p><span class=\"notranslate\"> All the problems of manual memory management method in Java solves the automatic garbage collector.</span> <span class=\"notranslate\"> But before becoming familiar with the garbage collector, it is necessary to clarify the concept of the heap (heap).</span></p>\r\n<h2><span class=\"notranslate\"> heap</span></h2>\r\n<p><span class=\"notranslate\"> In Java, all objects are in the area of memory called a heap.</span> <span class=\"notranslate\"> Pile is created when the JVM is started and may increase or decrease in size at runtime.</span> <span class=\"notranslate\"> When a heap becomes full, there is a garbage collection mechanism.</span> <span class=\"notranslate\"> All that will never again ispolzovat are cleared.</span> <span class=\"notranslate\"> thus freeing up space for new objects.</span></p>\r\n<p><span class=\"notranslate\"> You should also note that the JVM uses more memory than a bunch of takes.</span> <span class=\"notranslate\"> For example, for the Java methods and thread stacks, memory is allocated separately from the pile.</span></p>\r\n<p><span class=\"notranslate\"> heap size depends on the platform, but as a rule, it is somewhere between 2 and 128 KB.</span></p>\r\n<h2><span class=\"notranslate\"> Garbage Collection</span></h2>\r\n<p><span class=\"notranslate\"> The mechanism of the garbage collection - it is the process of liberating space in the heap, to be able to add new objects.</span></p>\r\n<p><span class=\"notranslate\"> Objects created by the new operator, thus assigning an object reference.</span> <span class=\"notranslate\"> When you are finished with the object, you simply cease to refer to it - just set the variable reference to another object, or null, or exit the method to its local variables have finished their existence in a natural way.</span> <span class=\"notranslate\"> Objects, links to which are absent, are called debris (garbage), which will be removed.</span></p>\r\n<p><span class=\"notranslate\"> The Java virtual machine, using the garbage collection mechanism that ensures that any object with a link remains in the memory - all objects that are unattainable from executing code due to the lack of references to them are removed to release the memory allocated for them.</span> <span class=\"notranslate\"> More precisely, the object does not fall within the scope of the process of garbage collection, if it is reachable through links chain, starting from the root (root) reference, ie,</span> <span class=\"notranslate\"> links directly in the executable code existing.</span></p>\r\n<p><span class=\"notranslate\"> The memory is freed by the garbage collector on its own \"discretion\" and usually only in those cases where further work program requires free space fragment is larger than that which is available in a virtual machine available at this time, or if the garbage collector, \"anticipates\" potential lack of memory in the near future.</span> <span class=\"notranslate\"> The program can (and often it happens) to complete the work without exhausting available memory resources, or even close to this line, and so she did not need the \"services\" of the garbage collector.</span> <span class=\"notranslate\"> The object is considered to be more \"elusive\", if none of the variables in the code running at the moment, does not contain any references to it, or a chain of links that could link the object with a variable program terminates.</span></p>\r\n<p><span class=\"notranslate\"> Rubbish collected system without your intervention, but that does not mean that the process does not require any attention at all.</span> <span class=\"notranslate\"> The need to create and delete large numbers of objects significantly affect application performance, and if the speed of the program is an important factor, you should think carefully about the decisions related to the creation of objects - this, in turn, will reduce the amount of waste and subject to disposal.</span></p>\r\n<div id=\"votePost\" class=\"vote\">\r\n<p><span class=\"notranslate\"> If you liked the article, vote for it</span></p>\r\n</div>','en',15,'article_b',1,'2016-02-28 19:27:38'),(338,'<p>Управление памятью - это процесс размещения новых объектов и удаление неиспользуемых объектов, чтобы освободить место для этих новых ассигнований объектов. Традиционным для языков программирование способом управления памятью является ручной. Его сущность является в следующем:</p>\r\n<ul>\r\n<li>Для создания объекта в динамической памяти программист явно вызывает команду выделения памяти. Эта команда возвращает указатель на выделенную область памяти, который сохраняется и используется для доступа к ней.</li>\r\n<li>До тех пор, пока созданный объект нужен для работы программы, программа обращается к нему через ранее сохранённый указатель.</li>\r\n<li>Когда надобность в объекте проходит, программист явно вызывает команду освобождения памяти, передавая ей указатель на удаляемый объект.</li>\r\n<li>Ручное управление памятью допускает потенциально возможные две проблемы: висячие ссылки и утечки памяти.</li>\r\n</ul>\r\n<p><strong>Висячая ссылка</strong> &mdash; это оставшаяся в использовании ссылка на объект, который уже удалён. После удаления объекта все сохранившиеся в программе ссылки на него становятся &laquo;висячими&raquo;. Память, занимаемая ранее объектом, может быть передана операционной системе и стать недоступной, или быть использована для размещения нового объекта в той же программе.</p>\r\n<p><strong>Утечка памяти</strong> - процесс неконтролируемого уменьшения объёма свободной оперативной или виртуальной памяти компьютера, связанный с ошибками в работающих программах, вовремя не освобождающих ненужные уже участки памяти.</p>\r\n<p>Все проблемы ручного способа управления памяти в Java решает автоматический сборщик мусора. Но пред ознакомлением со сборщиком мусора, нужно разъяснить понятие кучи(heap).</p>\r\n<h2>Куча</h2>\r\n<p>В Java все объекты находятся в области памяти под названием куча. Куча создается, когда JVM запускается и может увеличиваться или уменьшаться в размерах во время выполнения приложения. Когда куча становится полной, происходит механизм сборки мусора. Все объекты, которые никогда больше не будут использоватся, очищаются. тем самым освобождая место для новых объектов.</p>\r\n<p>Также нужно обратить внимание, что JVM использует больше памяти, чем занимает куча. Например, для методов Java и стеков потоков выделяется память отдельно от кучи.</p>\r\n<p>Размер кучи зависит от используемой платформы, но, как правило, это где-то между 2 и 128 Кб.</p>\r\n<h2>Garbage Collection</h2>\r\n<p>Механизм сборки мусора - это процесс освобождения места в куче, для возможности добавления новых объектов.</p>\r\n<p>Объекты создаются посредством оператора new, тем самым присваивая объекту ссылку. Закончив работу с объектом, вы просто перестаете на него ссылаться &mdash; достаточно присвоить переменной ссылку на другой объект или значение null либо прекратить выполнение метода, чтобы его локальные переменные завершили свое существование естественным образом. Объекты, ссылки на которые отсутствуют, принято называть мусором (garbage), который будет удален.</p>\r\n<p>Виртуальная машина Java, применяя механизм сборки мусора, гарантирует, что любой объект, обладающий ссылками, остается в памяти &mdash; все объекты, которые недостижимы из выполняемого кода ввиду отсутствия ссылок на них, удаляются с высвобождением отведенной для них памяти. Точнее говоря, объект не попадает в сферу действия процесса сборки мусора, если он достижим посредством цепочки ссылок, начиная с корневой (root) ссылки, т.е. ссылки, непосредственно существующей в выполняемом коде.</p>\r\n<p>Память освобождается сборщиком мусора по его собственному \"усмотрению\" и обычно только в тех случаях, когда для дальнейшей работы программы необходим фрагмент свободной памяти большего размера, нежели тот, который имеется в распоряжении виртуальной машины в данный момент, либо если сборщик мусора \"предвидит\" потенциальную нехватку памяти в ближайшем будущем. Программа может (часто именно так и происходит) завершить работу, не исчерпав ресурсов свободной памяти или даже не приблизившись к этой черте, и поэтому ей так и не потребуются \"услуги\" сборщика мусора. Объект считается \"более недостижимым\", если ни одна из переменных в коде, выполняемом в данный момент, не содержит ссылок на него либо цепочка ссылок, которая могла бы связать объект с некоторой переменной программы, обрывается.</p>\r\n<p>Мусор собирается системой без вашего вмешательства, но это не значит, что процесс не требует внимания вовсе. Необходимость создания и удаления большого количества объектов существенным образом сказывается на производительности приложений, и если быстродействие программы является важным фактором, следует тщательно обдумывать решения, связанные с созданием объектов, &mdash; это, в свою очередь, уменьшит и объем мусора, подлежащего утилизации.</p>','ru',15,'article_b',1,'2016-02-28 19:27:38'),(339,'Annotations in Java','en',16,'article_t',1,'2016-02-28 19:30:43'),(340,'Встроенные аннотации','ru',16,'article_t',1,'2016-02-28 19:30:43'),(341,'<h2><span class=\"notranslate\">Built-in annotation</span></h2>\r\n<p><span class=\"notranslate\"> In Java defines many useful built-in annotations, most of them are specialized.</span> <span class=\"notranslate\"> Annotations that have a common purpose:</span></p>\r\n<ul>\r\n<li><span class=\"notranslate\"> <strong>@Retention -</strong> This summary is intended for use only as an annotation to another annotation.</span> <span class=\"notranslate\"> Specifies the retention policy.</span></li>\r\n<li><span class=\"notranslate\"> <strong>@Documented -</strong> A marker interface that informs the instrument that the abstract should be documented.</span></li>\r\n<li><span class=\"notranslate\"> <strong>@Target -</strong> This annotation specifies the type of ads which can be applied abstract.</span> <span class=\"notranslate\"> It takes one argument, which must be constant from the enumeration ElementType.</span> <span class=\"notranslate\"> For example, to indicate that the annotation only applies to fields and local variables: @Targer ({ElementType.FIELD, ElementTyle.LOCAL_VARIABLE})</span></li>\r\n<li><span class=\"notranslate\"> <strong>@Inherited -</strong> This annotation marker that can be used in another ad annotations, it only applies to annotations that will be used in the class declaration.</span> <span class=\"notranslate\"> This annotation allows super class summaries to be inherited in a subclass.</span></li>\r\n<li><span class=\"notranslate\"> <strong>@Override -</strong> Abstract marker, which can only be applied to methods.</span> <span class=\"notranslate\"> Annotate a method @Override, must override the super class method.</span></li>\r\n<li><span class=\"notranslate\"> <strong>@Deprecated -</strong> It indicates that an ad is out of date and should be replaced by a new form.</span></li>\r\n<li><span class=\"notranslate\"> <strong>@SafeVarargs -</strong> Abstract marker is applied to the methods and constructors.</span> <span class=\"notranslate\"> She points out that any unsafe actions associated with a parameter variable number of arguments are not valid.</span> <span class=\"notranslate\"> It applies only to methods and constructors with a variable number of arguments that are declared as static or final.</span></li>\r\n<li><span class=\"notranslate\"> <strong>@SuppressWarnings -</strong> This annotation indicates that one or more warnings that may be issued by the compiler should suppress.</span></li>\r\n</ul>\r\n<h2><span class=\"notranslate\"> Create your own annotations:</span></h2>\r\n<p><span class=\"notranslate\"> Annotations are created with the use of the mechanism, based on the interface.</span> <span class=\"notranslate\"> Below is an example of an ad annotations:</span></p>\r\n<pre class=\"chili\"><code class=\"java\">@<span class=\"java__keyword\">interface</span>&nbsp;My{&nbsp;String&nbsp;str();&nbsp;<span class=\"java__keyword\">int</span>&nbsp;val();&nbsp;}</code> </pre>\r\n<p><span class=\"notranslate\"> The @ symbol - indicates the compiler that is declared abstract.</span> <span class=\"notranslate\"> Methods declared in the summary behave more like a field.</span></p>\r\n<pre class=\"chili\"> <code class=\"java\"><span class=\"java__com\">//Аннотирование&nbsp;метода.&nbsp;@My(str&nbsp;=&nbsp;\"Пример&nbsp;аннотации\",&nbsp;val&nbsp;=&nbsp;100)&nbsp;public&nbsp;static&nbsp;void&nbsp;myMeth()&nbsp;{&nbsp;//&nbsp;...</span></code> </pre>\r\n<p><span class=\"notranslate\"> As you can see it is necessary to annotate a method for the annotation name, written in brackets list initialized members.</span></p>\r\n<p><span class=\"notranslate\"> There are 3 annotations retention policy.</span> <span class=\"notranslate\"> retention policy determines where in the abstract is reset.</span></p>\r\n<p><span class=\"notranslate\"> Such policies are encapsulated in transfer java.lang.annotation.RetentionPolicy.</span> <span class=\"notranslate\"> It SOURSE, CLASS, RUNTIME.</span></p>\r\n<p><span class=\"notranslate\"> Annotations SOURCE with the policies contained only in the source file and are discarded at compile time.</span></p>\r\n<p><span class=\"notranslate\"> Annotations to the Class Policy is stored in a file, but they are not available in the JVM runtime.</span></p>\r\n<p><span class=\"notranslate\"> Annotations with RUNTIME retention policies are stored in a file at compile time and remain available JVM runtime.</span></p>\r\n<h2><span class=\"notranslate\"> Getting annotations</span></h2>\r\n<p><span class=\"notranslate\"> Reflection - This tool allows you to obtain information about a class at runtime programmy.Pervy step in the use of reflection - a reception object Class:</span></p>\r\n<pre class=\"chili\"> <code class=\"java\">Class&lt;?&gt;&nbsp;&nbsp;c&nbsp;=&nbsp;ob.getClass();</code> </pre>\r\n<p><span class=\"notranslate\"> Next, using an object of type Class, you can get information about the various elements declared in the class including annotation.</span></p>\r\n<p><span class=\"notranslate\"> For example methods: <code>getMethod()</code> , <code>getField()</code> , <code>getConstructor()</code> , all methods defined in the java.lang.Class</span></p>\r\n<p><br /> <span class=\"notranslate\"> <em>Example:</em></span></p>\r\n<pre class=\"chili\"> <code class=\"java\">Class&lt;?&gt;&nbsp;c&nbsp;=&nbsp;ob.getClass();&nbsp;Method&nbsp;m&nbsp;=&nbsp;c.getMethod(<span class=\"java__string\">\"myMeth\"</span>);&nbsp;My&nbsp;anno&nbsp;=&nbsp;m.getAnnotation(My.<span class=\"java__keyword\">class</span>);</code> <span class=\"notranslate\">);</span> <code class=\"java\">Class&lt;?&gt;&nbsp;c&nbsp;=&nbsp;ob.getClass();&nbsp;Method&nbsp;m&nbsp;=&nbsp;c.getMethod(<span class=\"java__string\">\"myMeth\"</span>);&nbsp;My&nbsp;anno&nbsp;=&nbsp;m.getAnnotation(My.<span class=\"java__keyword\">class</span>);</code> <span class=\"notranslate\">);</span> <code class=\"java\">Class&lt;?&gt;&nbsp;c&nbsp;=&nbsp;ob.getClass();&nbsp;Method&nbsp;m&nbsp;=&nbsp;c.getMethod(<span class=\"java__string\">\"myMeth\"</span>);&nbsp;My&nbsp;anno&nbsp;=&nbsp;m.getAnnotation(My.<span class=\"java__keyword\">class</span>);</code> </pre>\r\n<p><span class=\"notranslate\"> This example uses reflection to get a summary MyAnno, associated with myMeth () method.</span> <span class=\"notranslate\"> The parameters <code>getMethod()</code> is passed the name of the method that we want to get.</span></p>\r\n<div id=\"votePost\" class=\"vote\">\r\n<p><span class=\"notranslate\"> If you liked the article, vote for it</span></p>\r\n</div>','en',16,'article_b',1,'2016-02-28 19:30:43'),(342,'<p>В Java определено много полезных встроенных аннотаций, большинство из их являются специализированными. Аннотации, что имеют общее назначение:</p>\r\n<ul>\r\n<li><strong>@Retention</strong> - эта аннотация предназначена для применения только в качестве аннотации к другим аннотациям. Определяет политику удержания.</li>\r\n<li><strong>@Documented</strong> - это маркер-интерфейс, который сообщает инструменту, что аннотация должна быть документирована.</li>\r\n<li><strong>@Target</strong> - эта аннотация задает тип объявления, к которым может быть применима аннотация. Принимает один аргумент, который должен быть константой из перечисления ElementType. Например, чтобы указать, что аннотация применима только к полям и локальным переменным: @Targer({ ElementType.FIELD, ElementTyle.LOCAL_VARIABLE } )</li>\r\n<li><strong>@Inherited</strong> - это аннотация-маркер, которая может применяться в другом объявление аннотации, она касается только тех аннотаций, что будут использованы в объявлениях классов. Эта аннотация позволяет аннотации супер класса быть унаследованной в подклассе.</li>\r\n<li><strong>@Override</strong> - аннотация-маркер, которая может применяться только к методам. Метод, аннотированный как @Override, должен переопределять метод супер класса.</li>\r\n<li><strong>@Deprecated</strong> - указывает, что объявление устарело и должно быть заменено более новой формой.</li>\r\n<li><strong>@SafeVarargs</strong> - аннотация-маркер, применяется к методам и конструкторам. Она указывает, что никакие небезопасные действия, связанные с параметром переменного количества аргументов, недопустимы. Применяется только к методам и конструкторам с переменным количеством аргументов, которые объявлены как static или final.</li>\r\n<li><strong>@SuppressWarnings</strong> - эта аннотация указывает, что одно или более предупреждений, которые могут быть выданы компилятором следует подавить.</li>\r\n</ul>\r\n<h2>Создание собственных аннотаций:</h2>\r\n<p>Аннотации создаются с использование механизма, основанного на интерфейсе. Ниже пример объявление аннотации:</p>\r\n<pre class=\"chili\"><code class=\"java\">@<span class=\"java__keyword\">interface</span>&nbsp;My{&nbsp;<br />String&nbsp;str();&nbsp;<br /><span class=\"java__keyword\">int</span>&nbsp;val();&nbsp;<br />}&nbsp;<br /></code></pre>\r\n<p>Символ @ - указывает компилятору, что объявлена аннотация. Методы, объявленные в аннотации ведут себя скорее как поля.</p>\r\n<pre class=\"chili\"><code class=\"java\"><span class=\"java__com\">//Аннотирование&nbsp;метода.</span>&nbsp;<br /><span class=\"java__meta\">@My</span>(str&nbsp;=&nbsp;<span class=\"java__string\">\"Пример&nbsp;аннотации\"</span>,&nbsp;val&nbsp;=&nbsp;<span class=\"java__number\">100</span>)&nbsp;<br /><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;myMeth()&nbsp;{&nbsp;<span class=\"java__com\">//&nbsp;...</span>&nbsp;<br /></code></pre>\r\n<p>Как видите для аннотирования метода надо за именем аннотации, записать в скобках список инициализируемых членов.</p>\r\n<p>Существует 3 политики удержания аннотации. Политика удержания определяет, в какой точке аннотация сбрасывается.</p>\r\n<p>Такие политики инкапсулированы в перечисление java.lang.annotation.RetentionPolicy. Это SOURSE,CLASS,RUNTIME.</p>\r\n<p>Аннотации с политикой SOURCE содержаться только в исходном файле и отбрасываются при компиляции.</p>\r\n<p>Аннотации с политикой Class сохраняются в файле, однако они недоступны JVM во время выполнения.</p>\r\n<p>Аннотации с политикой удержания RUNTIME сохраняются в файле во время компиляции и остаются доступными JVM во время выполнения.</p>\r\n<h2>Получение аннотации</h2>\r\n<p>Рефлексия - это средство позволяющее получить информацию о классе во время выполнения программы.Первый шаг в использование рефлексии - это получение объекта Class:</p>\r\n<pre class=\"chili\"><code class=\"java\">Class&lt;?&gt;&nbsp;&nbsp;c&nbsp;=&nbsp;ob.getClass();&nbsp;<br /></code></pre>\r\n<p>Далее используя объект типа Class вы можете получить информацию о различных элементах, объявленных в классе включая аннотацию.</p>\r\n<p>Например методы: <code>getMethod()</code>, <code>getField()</code>, <code>getConstructor()</code>, все методы определены в java.lang.Class</p>\r\n<p><br /> <em>Пример:</em></p>\r\n<pre class=\"chili\"><code class=\"java\">Class&lt;?&gt;&nbsp;c&nbsp;=&nbsp;ob.getClass();&nbsp;<br />Method&nbsp;m&nbsp;=&nbsp;c.getMethod(<span class=\"java__string\">\"myMeth\"</span>);&nbsp;<br />My&nbsp;anno&nbsp;=&nbsp;m.getAnnotation(My.<span class=\"java__keyword\">class</span>);&nbsp;<br /></code></pre>\r\n<p>Этот пример использует рефлексию, что бы получить аннотацию MyAnno, ассоциированную с методом myMeth(). В параметры <code>getMethod()</code> передается название метода, который мы желаем получить.</p>','ru',16,'article_b',1,'2016-02-28 19:30:43'),(343,' Exceptions in Java','en',17,'article_t',1,'2016-02-28 19:48:39'),(344,'Исключения в Java','ru',17,'article_t',1,'2016-02-28 19:48:39'),(345,'<p><span class=\"notranslate\"><strong>Exclusion</strong> - this is a problem (error) occurring during the program.</span> <span class=\"notranslate\"> Exceptions may occur in many cases, for example:</span></p>\r\n<ol>\r\n<li><span class=\"notranslate\"> The user has entered incorrect data.</span></li>\r\n<li><span class=\"notranslate\"> The file is accessed by the program is not found.</span></li>\r\n<li><span class=\"notranslate\"> The network connection to the server was lost during the data transfer.</span></li>\r\n</ol>\r\n<p><span class=\"notranslate\"> Etc.</span> <br /><br /> <span class=\"notranslate\"> <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://ru.wikipedia.org/wiki/%25D0%259E%25D0%25B1%25D1%2580%25D0%25B0%25D0%25B1%25D0%25BE%25D1%2582%25D0%25BA%25D0%25B0_%25D0%25B8%25D1%2581%25D0%25BA%25D0%25BB%25D1%258E%25D1%2587%25D0%25B5%25D0%25BD%25D0%25B8%25D0%25B9&amp;usg=ALkJrhgCgy9pTGZAURi8QQ3gr6_fjbBUIg\" target=\"blank\">Exception handling</a> (exception handling) - mechanism of programming languages for describing the program reaction to run-time errors, and other potential problems (exceptions) that can occur when you run the program and make it impossible (meaninglessness) further working out of its basic program algorithm.</span></p>\r\n<h2><span class=\"notranslate\"> Syntax</span></h2>\r\n<div><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">In Java, there are five key words for working with exceptions:</span></span></div>\r\n<div>\r\n<ol>\r\n<li><span class=\"notranslate\"> <strong style=\"line-height: 1.428571429;\"><span style=\"line-height: 1.428571429;\">try</span> -</strong> <span style=\"line-height: 1.428571429;\">this keyword is used to mark the beginning of a block of code that can potentially lead to an error.</span></span></li>\r\n<li><span class=\"notranslate\"> <strong style=\"line-height: 1.428571429;\"><span style=\"line-height: 1.428571429;\">catch</span> -</strong> <span style=\"line-height: 1.428571429;\">a keyword to mark the beginning of a block of code designed to intercept and handle exceptions.</span></span></li>\r\n<li><span class=\"notranslate\"> <strong style=\"line-height: 1.428571429;\"><span style=\"line-height: 1.428571429;\">finally</span> -</strong> <span style=\"line-height: 1.428571429;\">a keyword to mark the beginning of a block of code, which is optional.</span></span> <span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">This block is placed after the last block \'catch\'.</span></span> <span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Management is usually passed to block \'finally\' in any case.</span></span></li>\r\n<li><span class=\"notranslate\"> <strong style=\"line-height: 1.428571429;\"><span style=\"line-height: 1.428571429;\">throw</span> -</strong> <span style=\"line-height: 1.428571429;\">serves to generate exceptions.</span></span></li>\r\n<li><span class=\"notranslate\"> <strong style=\"line-height: 1.428571429;\"><span style=\"line-height: 1.428571429;\">throws</span> -</strong> <span style=\"line-height: 1.428571429;\">a keyword that is prescribed in the method signature, and indicating that the method could potentially throw an exception with the specified type.</span></span></li>\r\n</ol>\r\n</div>\r\n<p><span class=\"notranslate\"> Let\'s begin with a simple.</span> <span class=\"notranslate\"> Suppose we are writing a method to calculate the area of a rectangle:</span></p>\r\n<pre class=\"chili\"><code class=\"java\"><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;System.out.println(getAreaValue(-<span class=\"java__number\">1</span>,&nbsp;<span class=\"java__number\">100</span>));&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">int</span>&nbsp;getAreaValue(<span class=\"java__keyword\">int</span>&nbsp;x,&nbsp;<span class=\"java__keyword\">int</span>&nbsp;y){&nbsp;<span class=\"java__keyword\">if</span>(x&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>&nbsp;||&nbsp;y&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>)&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IllegalArgumentException(<span class=\"java__string\">\"value&nbsp;of&nbsp;\'x\'&nbsp;or&nbsp;\'y\'&nbsp;is&nbsp;negative:&nbsp;x=\"</span>+x+<span class=\"java__string\">\",&nbsp;y=\"</span>+y);&nbsp;<span class=\"java__keyword\">return</span>&nbsp;x*y;&nbsp;}</code> </pre>\r\n<p><span class=\"notranslate\"> Here, in the method getAreaValue we throw IllegalArgumentException exception with the keyword throw.</span> <span class=\"notranslate\"> In this case, in the method signature missing throws clause IllegalArgumentException, it is not done because IllegalArgumentException exception is not checked, of which we\'ll talk.</span></p>\r\n<p><span class=\"notranslate\"> General view of the construction to \"catch\" the exception is as follows:</span></p>\r\n<pre class=\"chili\"> <code class=\"java\"><span class=\"java__keyword\">try</span>{&nbsp;<span class=\"java__com\">//здесь&nbsp;код,&nbsp;который&nbsp;потенциально&nbsp;может&nbsp;привести&nbsp;к&nbsp;ошибке&nbsp;}&nbsp;catch(SomeException&nbsp;e&nbsp;){&nbsp;//в&nbsp;скобках&nbsp;указывается&nbsp;класс&nbsp;конкретной&nbsp;ожидаемой&nbsp;ошибки&nbsp;//здесь&nbsp;описываются&nbsp;действия,&nbsp;направленные&nbsp;на&nbsp;обработку&nbsp;исключений&nbsp;}&nbsp;finally{&nbsp;//выполняется&nbsp;в&nbsp;любом&nbsp;случае&nbsp;(&nbsp;блок&nbsp;finnaly&nbsp;не&nbsp;обязателен)&nbsp;}</span></code> </pre>\r\n<p><span class=\"notranslate\"> In our case, for the area of a rectangle:</span></p>\r\n<pre class=\"chili\"> <code class=\"java\"><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;<span class=\"java__keyword\">int</span>&nbsp;result&nbsp;=&nbsp;<span class=\"java__number\">0</span>;&nbsp;<span class=\"java__keyword\">try</span>{&nbsp;result&nbsp;=&nbsp;getAreaValue(-<span class=\"java__number\">1</span>,&nbsp;<span class=\"java__number\">100</span>);&nbsp;}<span class=\"java__keyword\">catch</span>(IllegalArgumentException&nbsp;e){&nbsp;Logger.getLogger(NewClass.<span class=\"java__keyword\">class</span>.getName()).log(<span class=\"java__keyword\">new</span>&nbsp;LogRecord(Level.WARNING,&nbsp;<span class=\"java__string\">\"В&nbsp;метод&nbsp;вычисления&nbsp;площади&nbsp;был&nbsp;передан&nbsp;аргумент&nbsp;с&nbsp;негативным&nbsp;значением!\"</span>));&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;e;&nbsp;}&nbsp;System.out.println(<span class=\"java__string\">\"Result&nbsp;is&nbsp;:&nbsp;\"</span>+result);&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">int</span>&nbsp;getAreaValue(<span class=\"java__keyword\">int</span>&nbsp;x,&nbsp;<span class=\"java__keyword\">int</span>&nbsp;y){&nbsp;<span class=\"java__keyword\">if</span>(x&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>&nbsp;||&nbsp;y&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>)&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IllegalArgumentException(<span class=\"java__string\">\"value&nbsp;of&nbsp;\'x\'&nbsp;or&nbsp;\'y\'&nbsp;is&nbsp;negative:&nbsp;x=\"</span>+x+<span class=\"java__string\">\",&nbsp;y=\"</span>+y);&nbsp;<span class=\"java__keyword\">return</span>&nbsp;x*y;&nbsp;}</code> <span class=\"notranslate\">args) {</span> <code class=\"java\"><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;<span class=\"java__keyword\">int</span>&nbsp;result&nbsp;=&nbsp;<span class=\"java__number\">0</span>;&nbsp;<span class=\"java__keyword\">try</span>{&nbsp;result&nbsp;=&nbsp;getAreaValue(-<span class=\"java__number\">1</span>,&nbsp;<span class=\"java__number\">100</span>);&nbsp;}<span class=\"java__keyword\">catch</span>(IllegalArgumentException&nbsp;e){&nbsp;Logger.getLogger(NewClass.<span class=\"java__keyword\">class</span>.getName()).log(<span class=\"java__keyword\">new</span>&nbsp;LogRecord(Level.WARNING,&nbsp;<span class=\"java__string\">\"В&nbsp;метод&nbsp;вычисления&nbsp;площади&nbsp;был&nbsp;передан&nbsp;аргумент&nbsp;с&nbsp;негативным&nbsp;значением!\"</span>));&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;e;&nbsp;}&nbsp;System.out.println(<span class=\"java__string\">\"Result&nbsp;is&nbsp;:&nbsp;\"</span>+result);&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">int</span>&nbsp;getAreaValue(<span class=\"java__keyword\">int</span>&nbsp;x,&nbsp;<span class=\"java__keyword\">int</span>&nbsp;y){&nbsp;<span class=\"java__keyword\">if</span>(x&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>&nbsp;||&nbsp;y&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>)&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IllegalArgumentException(<span class=\"java__string\">\"value&nbsp;of&nbsp;\'x\'&nbsp;or&nbsp;\'y\'&nbsp;is&nbsp;negative:&nbsp;x=\"</span>+x+<span class=\"java__string\">\",&nbsp;y=\"</span>+y);&nbsp;<span class=\"java__keyword\">return</span>&nbsp;x*y;&nbsp;}</code> <span class=\"notranslate\">(new LogRecord (Level.WARNING, \"</span> <code class=\"java\"><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;<span class=\"java__keyword\">int</span>&nbsp;result&nbsp;=&nbsp;<span class=\"java__number\">0</span>;&nbsp;<span class=\"java__keyword\">try</span>{&nbsp;result&nbsp;=&nbsp;getAreaValue(-<span class=\"java__number\">1</span>,&nbsp;<span class=\"java__number\">100</span>);&nbsp;}<span class=\"java__keyword\">catch</span>(IllegalArgumentException&nbsp;e){&nbsp;Logger.getLogger(NewClass.<span class=\"java__keyword\">class</span>.getName()).log(<span class=\"java__keyword\">new</span>&nbsp;LogRecord(Level.WARNING,&nbsp;<span class=\"java__string\">\"В&nbsp;метод&nbsp;вычисления&nbsp;площади&nbsp;был&nbsp;передан&nbsp;аргумент&nbsp;с&nbsp;негативным&nbsp;значением!\"</span>));&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;e;&nbsp;}&nbsp;System.out.println(<span class=\"java__string\">\"Result&nbsp;is&nbsp;:&nbsp;\"</span>+result);&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">int</span>&nbsp;getAreaValue(<span class=\"java__keyword\">int</span>&nbsp;x,&nbsp;<span class=\"java__keyword\">int</span>&nbsp;y){&nbsp;<span class=\"java__keyword\">if</span>(x&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>&nbsp;||&nbsp;y&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>)&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IllegalArgumentException(<span class=\"java__string\">\"value&nbsp;of&nbsp;\'x\'&nbsp;or&nbsp;\'y\'&nbsp;is&nbsp;negative:&nbsp;x=\"</span>+x+<span class=\"java__string\">\",&nbsp;y=\"</span>+y);&nbsp;<span class=\"java__keyword\">return</span>&nbsp;x*y;&nbsp;}</code> <span class=\"notranslate\">result);</span> <code class=\"java\"><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;<span class=\"java__keyword\">int</span>&nbsp;result&nbsp;=&nbsp;<span class=\"java__number\">0</span>;&nbsp;<span class=\"java__keyword\">try</span>{&nbsp;result&nbsp;=&nbsp;getAreaValue(-<span class=\"java__number\">1</span>,&nbsp;<span class=\"java__number\">100</span>);&nbsp;}<span class=\"java__keyword\">catch</span>(IllegalArgumentException&nbsp;e){&nbsp;Logger.getLogger(NewClass.<span class=\"java__keyword\">class</span>.getName()).log(<span class=\"java__keyword\">new</span>&nbsp;LogRecord(Level.WARNING,&nbsp;<span class=\"java__string\">\"В&nbsp;метод&nbsp;вычисления&nbsp;площади&nbsp;был&nbsp;передан&nbsp;аргумент&nbsp;с&nbsp;негативным&nbsp;значением!\"</span>));&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;e;&nbsp;}&nbsp;System.out.println(<span class=\"java__string\">\"Result&nbsp;is&nbsp;:&nbsp;\"</span>+result);&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">int</span>&nbsp;getAreaValue(<span class=\"java__keyword\">int</span>&nbsp;x,&nbsp;<span class=\"java__keyword\">int</span>&nbsp;y){&nbsp;<span class=\"java__keyword\">if</span>(x&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>&nbsp;||&nbsp;y&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>)&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IllegalArgumentException(<span class=\"java__string\">\"value&nbsp;of&nbsp;\'x\'&nbsp;or&nbsp;\'y\'&nbsp;is&nbsp;negative:&nbsp;x=\"</span>+x+<span class=\"java__string\">\",&nbsp;y=\"</span>+y);&nbsp;<span class=\"java__keyword\">return</span>&nbsp;x*y;&nbsp;}</code> <span class=\"notranslate\">int y) {</span> <code class=\"java\"><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;<span class=\"java__keyword\">int</span>&nbsp;result&nbsp;=&nbsp;<span class=\"java__number\">0</span>;&nbsp;<span class=\"java__keyword\">try</span>{&nbsp;result&nbsp;=&nbsp;getAreaValue(-<span class=\"java__number\">1</span>,&nbsp;<span class=\"java__number\">100</span>);&nbsp;}<span class=\"java__keyword\">catch</span>(IllegalArgumentException&nbsp;e){&nbsp;Logger.getLogger(NewClass.<span class=\"java__keyword\">class</span>.getName()).log(<span class=\"java__keyword\">new</span>&nbsp;LogRecord(Level.WARNING,&nbsp;<span class=\"java__string\">\"В&nbsp;метод&nbsp;вычисления&nbsp;площади&nbsp;был&nbsp;передан&nbsp;аргумент&nbsp;с&nbsp;негативным&nbsp;значением!\"</span>));&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;e;&nbsp;}&nbsp;System.out.println(<span class=\"java__string\">\"Result&nbsp;is&nbsp;:&nbsp;\"</span>+result);&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">int</span>&nbsp;getAreaValue(<span class=\"java__keyword\">int</span>&nbsp;x,&nbsp;<span class=\"java__keyword\">int</span>&nbsp;y){&nbsp;<span class=\"java__keyword\">if</span>(x&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>&nbsp;||&nbsp;y&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>)&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IllegalArgumentException(<span class=\"java__string\">\"value&nbsp;of&nbsp;\'x\'&nbsp;or&nbsp;\'y\'&nbsp;is&nbsp;negative:&nbsp;x=\"</span>+x+<span class=\"java__string\">\",&nbsp;y=\"</span>+y);&nbsp;<span class=\"java__keyword\">return</span>&nbsp;x*y;&nbsp;}</code> <span class=\"notranslate\">\'x\' or \'y\' is negative: x =\" + x + \", y =\" + y);</span> <code class=\"java\"><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;<span class=\"java__keyword\">int</span>&nbsp;result&nbsp;=&nbsp;<span class=\"java__number\">0</span>;&nbsp;<span class=\"java__keyword\">try</span>{&nbsp;result&nbsp;=&nbsp;getAreaValue(-<span class=\"java__number\">1</span>,&nbsp;<span class=\"java__number\">100</span>);&nbsp;}<span class=\"java__keyword\">catch</span>(IllegalArgumentException&nbsp;e){&nbsp;Logger.getLogger(NewClass.<span class=\"java__keyword\">class</span>.getName()).log(<span class=\"java__keyword\">new</span>&nbsp;LogRecord(Level.WARNING,&nbsp;<span class=\"java__string\">\"В&nbsp;метод&nbsp;вычисления&nbsp;площади&nbsp;был&nbsp;передан&nbsp;аргумент&nbsp;с&nbsp;негативным&nbsp;значением!\"</span>));&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;e;&nbsp;}&nbsp;System.out.println(<span class=\"java__string\">\"Result&nbsp;is&nbsp;:&nbsp;\"</span>+result);&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">int</span>&nbsp;getAreaValue(<span class=\"java__keyword\">int</span>&nbsp;x,&nbsp;<span class=\"java__keyword\">int</span>&nbsp;y){&nbsp;<span class=\"java__keyword\">if</span>(x&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>&nbsp;||&nbsp;y&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>)&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IllegalArgumentException(<span class=\"java__string\">\"value&nbsp;of&nbsp;\'x\'&nbsp;or&nbsp;\'y\'&nbsp;is&nbsp;negative:&nbsp;x=\"</span>+x+<span class=\"java__string\">\",&nbsp;y=\"</span>+y);&nbsp;<span class=\"java__keyword\">return</span>&nbsp;x*y;&nbsp;}</code> </pre>\r\n<p><span class=\"notranslate\"> Here we caught <em>IllegalArgumentException</em> and zalogirovali this event.</span> <span class=\"notranslate\"> The fact that the \"repair\" this damage we can not, will not, we would guess that the user :).</span> <span class=\"notranslate\"> That\'s why we are forwarding this exception further by \"throw e;\".</span> <span class=\"notranslate\"> This can often be found on the application servers (web servers).</span></p>\r\n<h2><span class=\"notranslate\"> <a href=\"http://www.quizful.net/post/%28http://www.softzenware.com/java/10.htm%29\" target=\"blank\">finally</a></span></h2>\r\n<p><span class=\"notranslate\"> Sometimes it is necessary to ensure that a certain piece of code will be executed no matter which exceptions were excited and intercepted.</span> <span class=\"notranslate\"> To create such a piece of code using the keyword finally.</span> <span class=\"notranslate\"> Even in those cases where there is no appropriate method instituted exclusion catch section, the finally block is executed before control passes to the statement following the partition try.</span> <span class=\"notranslate\"> In each section, try to be at least one partition or a catch or finally block.</span> <span class=\"notranslate\"> The finally block is very useful for closing files and releasing all other resources captured for temporary use at the beginning of the method.</span> <span class=\"notranslate\"> Below is an example of a class with two methods, the completion of which there is for different reasons, but both before leaving finally, the code section.</span></p>\r\n<pre class=\"chili\"> <code class=\"java\"><span class=\"java__keyword\">class</span>&nbsp;FinallyDemo&nbsp;{&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;procA()&nbsp;{&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"inside&nbsp;procA\"</span>);&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;RuntimeException(<span class=\"java__string\">\"demo\"</span>);&nbsp;}&nbsp;<span class=\"java__keyword\">finally</span>&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"procA\'s&nbsp;finally\"</span>);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;procB()&nbsp;{&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"inside&nbsp;procB\"</span>);&nbsp;<span class=\"java__keyword\">return</span>;&nbsp;}&nbsp;<span class=\"java__keyword\">finally</span>&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"procB\'s&nbsp;finally\"</span>);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String&nbsp;args[])&nbsp;{&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;procA();&nbsp;}&nbsp;<span class=\"java__keyword\">catch</span>&nbsp;(Exception&nbsp;e)&nbsp;{&nbsp;}&nbsp;procB();&nbsp;}&nbsp;}</code> <span class=\"notranslate\">;</span> <code class=\"java\"><span class=\"java__keyword\">class</span>&nbsp;FinallyDemo&nbsp;{&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;procA()&nbsp;{&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"inside&nbsp;procA\"</span>);&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;RuntimeException(<span class=\"java__string\">\"demo\"</span>);&nbsp;}&nbsp;<span class=\"java__keyword\">finally</span>&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"procA\'s&nbsp;finally\"</span>);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;procB()&nbsp;{&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"inside&nbsp;procB\"</span>);&nbsp;<span class=\"java__keyword\">return</span>;&nbsp;}&nbsp;<span class=\"java__keyword\">finally</span>&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"procB\'s&nbsp;finally\"</span>);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String&nbsp;args[])&nbsp;{&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;procA();&nbsp;}&nbsp;<span class=\"java__keyword\">catch</span>&nbsp;(Exception&nbsp;e)&nbsp;{&nbsp;}&nbsp;procB();&nbsp;}&nbsp;}</code> <span class=\"notranslate\">;</span> <code class=\"java\"><span class=\"java__keyword\">class</span>&nbsp;FinallyDemo&nbsp;{&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;procA()&nbsp;{&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"inside&nbsp;procA\"</span>);&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;RuntimeException(<span class=\"java__string\">\"demo\"</span>);&nbsp;}&nbsp;<span class=\"java__keyword\">finally</span>&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"procA\'s&nbsp;finally\"</span>);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;procB()&nbsp;{&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"inside&nbsp;procB\"</span>);&nbsp;<span class=\"java__keyword\">return</span>;&nbsp;}&nbsp;<span class=\"java__keyword\">finally</span>&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"procB\'s&nbsp;finally\"</span>);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String&nbsp;args[])&nbsp;{&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;procA();&nbsp;}&nbsp;<span class=\"java__keyword\">catch</span>&nbsp;(Exception&nbsp;e)&nbsp;{&nbsp;}&nbsp;procB();&nbsp;}&nbsp;}</code> <span class=\"notranslate\">;</span> <code class=\"java\"><span class=\"java__keyword\">class</span>&nbsp;FinallyDemo&nbsp;{&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;procA()&nbsp;{&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"inside&nbsp;procA\"</span>);&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;RuntimeException(<span class=\"java__string\">\"demo\"</span>);&nbsp;}&nbsp;<span class=\"java__keyword\">finally</span>&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"procA\'s&nbsp;finally\"</span>);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;procB()&nbsp;{&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"inside&nbsp;procB\"</span>);&nbsp;<span class=\"java__keyword\">return</span>;&nbsp;}&nbsp;<span class=\"java__keyword\">finally</span>&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"procB\'s&nbsp;finally\"</span>);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String&nbsp;args[])&nbsp;{&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;procA();&nbsp;}&nbsp;<span class=\"java__keyword\">catch</span>&nbsp;(Exception&nbsp;e)&nbsp;{&nbsp;}&nbsp;procB();&nbsp;}&nbsp;}</code> <span class=\"notranslate\">]) {</span> <code class=\"java\"><span class=\"java__keyword\">class</span>&nbsp;FinallyDemo&nbsp;{&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;procA()&nbsp;{&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"inside&nbsp;procA\"</span>);&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;RuntimeException(<span class=\"java__string\">\"demo\"</span>);&nbsp;}&nbsp;<span class=\"java__keyword\">finally</span>&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"procA\'s&nbsp;finally\"</span>);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;procB()&nbsp;{&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"inside&nbsp;procB\"</span>);&nbsp;<span class=\"java__keyword\">return</span>;&nbsp;}&nbsp;<span class=\"java__keyword\">finally</span>&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"procB\'s&nbsp;finally\"</span>);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String&nbsp;args[])&nbsp;{&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;procA();&nbsp;}&nbsp;<span class=\"java__keyword\">catch</span>&nbsp;(Exception&nbsp;e)&nbsp;{&nbsp;}&nbsp;procB();&nbsp;}&nbsp;}</code> </pre>\r\n<p><span class=\"notranslate\"> In this example, procA method of raising an exception occurs premature exit from the try block, but on the way \"out\" the finally section.</span> <span class=\"notranslate\"> Another method procB quits performing standing in the operator \'return\' try-block, but at the same time before leaving the method is executed the code finally block.</span> <span class=\"notranslate\"> Below are the results gained in the implementation of this program.</span></p>\r\n<div><span class=\"notranslate\"> <em>inside procA</em></span></div>\r\n<div><span class=\"notranslate\"> <em>procA\'s finally</em></span></div>\r\n<div><span class=\"notranslate\"> <em>inside procB</em></span></div>\r\n<div><span class=\"notranslate\"> <em>procB\'s finally</em></span></div>\r\n<h2><span class=\"notranslate\"> exception Hierarchy</span></h2>\r\n<p><span class=\"notranslate\"> All classes of processing errors are the heirs of the class java.lang.Throwable.</span> <span class=\"notranslate\"> Only objects of that class or his heirs can be \"thrown\" the JVM in the event of any exceptional situation, and only these objects can be \"thrown\" at runtime using the keyword throw.</span></p>\r\n<p><span class=\"notranslate\"> Direct class Throwable heirs are Error and Exception.</span></p>\r\n<p><span class=\"notranslate\"> <strong>Error</strong> - this subclass, which indicates serious problems arise during the execution of the application.</span> <span class=\"notranslate\"> The majority of these abnormal error signal during program execution, i.e.</span> <span class=\"notranslate\"> about some critical issues.</span> <span class=\"notranslate\"> These errors are not recommended to celebrate in the methods throws-through ads, so they are also very often referred to not checked (unchecked).</span> <br /> <span class=\"notranslate\"> <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://java-prompt.blogspot.com/2011/02/exception-error.html&amp;usg=ALkJrhiXaY3KDUgaF0WxemNdYT7CoN7Www\" target=\"blank\">A source</a></span></p>\r\n<p><span class=\"notranslate\"> When programming in Java should focus <strong>Exception</strong> hierarchy.</span> <span class=\"notranslate\"> This hierarchy is also divided into two branches: exceptions derived from RuntimeException class and others.</span> <span class=\"notranslate\"> RuntimeException type Exceptions are due to programming errors.</span> <span class=\"notranslate\"> All other exceptions are the result of an unforeseen combination of circumstances, such as IO errors that occur when the program is quite correct.</span></p>\r\n<p><span class=\"notranslate\"> <em>Consider the basic classes of exceptions.</em></span> <em><a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://piccy.info/view3/6322681/5051bae52a552fc365dca23b7672ee85/1200/&amp;usg=ALkJrhgafgDX1u8-iP3vANsAAAFU4PutCA\" target=\"_blank\"><img src=\"http://i.piccy.info/i9/1519959f7aa47bacc443a8ea62ff5747/1398970263/41499/740281/exceptions_800.jpg\" alt=\"the main classes of exceptions\" border=\"0\" /></a> <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://i.piccy.info/a3c/2014-05-01-18-51/i9-6322681/800x346-r&amp;usg=ALkJrhj0CbRaCgXuuG3pVpLlgfFA-O6YEg\" target=\"_blank\"><img src=\"http://i.piccy.info/a3/2014-05-01-18-51/i9-6322681/800x346-r/i.gif\" alt=\"\" border=\"0\" /></a></em></p>\r\n<div><span class=\"notranslate\"> <a href=\"http://i.piccy.info/i9/2579c05514d2f6424a63e4d246ffb0ad/1398970263/143501/740281/exceptions.png\" target=\"blank\">Original</a> painted himself :)</span></div>\r\n<p>&nbsp;</p>\r\n<div><span class=\"notranslate\"> Here are the major classes of Throwable, Error, Exception, and RuntimeException.</span> <span class=\"notranslate\"> It is connected all the \"magic\" with them.</span></div>\r\n<div><span class=\"notranslate\"> The fact that there are two types of exceptions in java: checked and unchecked.</span></div>\r\n<div><span class=\"notranslate\"> <strong>1.</strong> Checked exceptions are those that must be processed catch block or described in the method signature.</span> <span class=\"notranslate\"> Unchecked can not be processed or to be described.</span></div>\r\n<div><span class=\"notranslate\"> <strong>2.</strong> Unchecked exceptions in Java - inherited from RuntimeException, checked - by Exception (excluding unchecked).</span></div>\r\n<div><span class=\"notranslate\"> Example unchecked exception - NullPointerException, checked exception - IOException</span></div>\r\n<div><span class=\"notranslate\"> <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.quizful.net/interview/java/exception-types&amp;usg=ALkJrhh3y3fsPs5UP8qCuAq7ZeV732TIeg\" target=\"blank\">(The question of the interview</a> )</span></div>\r\n<div><span class=\"notranslate\"> That is, if there is a site that can throw a checked exception you must either enclose it in a try / catch structure or to declare in the method signature \"throws SomeException\" <span style=\"line-height: 1.428571429;\">but in this case, an exception handling is delegated to a higher level</span> in your <span style=\"line-height: 1.428571429;\">code.</span></span> <span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">In any case, it should be intercepted.</span></span> <span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Otherwise the program just does not compile.</span></span></div>\r\n<div><span class=\"notranslate\"> Why am I singled <strong>Throwable, Error, Exception, and RuntimeException.</strong></span></div>\r\n<div><span class=\"notranslate\"> Throwable - <em>checked</em> exception</span></div>\r\n<div><span class=\"notranslate\"> Error - <em>Do not check</em></span></div>\r\n<div><span class=\"notranslate\"> Exception - <em>verifiable</em></span></div>\r\n<div><span class=\"notranslate\"> RuntimeException - <em>not testable</em></span></div>\r\n<div><em>&nbsp;</em></div>\r\n<div><span class=\"notranslate\"> All other exceptions inherit this property from those classes.</span> <span class=\"notranslate\"> For example SQLException is the successor of Exception and it checks <em>NullPointerException -.</em> Heir RuntimeException and it is not checked.</span></div>\r\n<div>&nbsp;</div>\r\n<div><span class=\"notranslate\"> So why do not all exceptions are verifiable?</span> <span class=\"notranslate\"> The fact is that, if checked every place where the error may be in theory, your code will grow strong, become difficult to read.</span> <span class=\"notranslate\"> For example, in any place where there is a division numbers, it would have to be checked for <em>ArithmeticException,</em> because it is possible division by zero.</span> <span class=\"notranslate\"> This option (re not catch checked exceptions), the creators of the language the programmer left to his discretion.</span></div>\r\n<div>&nbsp;</div>\r\n<div><span class=\"notranslate\"> Let\'s go back to classes of exceptions:</span></div>\r\n<div>&nbsp;</div>\r\n<div><span class=\"notranslate\"> <strong>1.</strong> RuntimeException</span></div>\r\n<h3 class=\"r\" style=\"margin-top: 0px; margin-bottom: 0px; overflow: hidden; text-overflow: ellipsis;\"><span class=\"notranslate\"> <span style=\"color: #333333;\"><span style=\"font-size: 14px; line-height: 20px; white-space: nowrap;\"><em>IndexOutOfBoundsException -</em></span></span> <span style=\"color: #333333; font-family: \'Helvetica Neue\', Helvetica, Arial, sans-serif; font-size: 14px; white-space: nowrap; line-height: 1.428571429;\">emitted when the index of an element in the data structure (array / collection) does not fall within the range of existing indices.</span></span></h3>\r\n<div><span class=\"notranslate\"> <em>NullPointerException -</em> a reference to the object to which you are applying stores null /</span></div>\r\n<div><span class=\"notranslate\"> <em>ClassCastException -</em> typecasting error.</span> <span class=\"notranslate\"> Whenever you type conversion, a check on the possibility of bringing (check by using instanceof.</span></div>\r\n<div><span class=\"notranslate\"> <em>ArithmeticException -</em> catches when executed invalid arithmetic operations, such as division by zero.</span></div>\r\n<div>&nbsp;</div>\r\n<div><span class=\"notranslate\"> <strong>2.</strong> Error</span></div>\r\n<div><span class=\"notranslate\"> <em>ThreadDeath -</em> called when a sudden stop flow through Thread.stop () method.</span></div>\r\n<div><span class=\"notranslate\"> <em>StackOverflowError -</em> stack overflow error.</span> <span class=\"notranslate\"> Often it occurs in recursive functions due to incorrect entry conditions.</span></div>\r\n<div><span class=\"notranslate\"> <em><a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://habrahabr.ru/post/117274/&amp;usg=ALkJrhi-czycOD62ozN6W-7aBU3Dt1Dm1A\" target=\"blank\">An OutOfMemoryError</a></em> - memory overflow error.</span></div>\r\n<h2><span class=\"notranslate\"> Creating your own exception classes</span></h2>\r\n<p><span class=\"notranslate\"> Although Java built-in exceptions are treated most common mistakes, you probably need to create your own exception types for handling situations that are specific to your application.</span> <span class=\"notranslate\"> It\'s easy enough to do: simply define a subclass of Exception (which, of course, is a subclass of Throwable).</span> <span class=\"notranslate\"> Your subclasses are not obliged to sell anything - it is important to their presence in the type system that allows to use them as exceptions.</span></p>\r\n<pre class=\"chili\"> <code class=\"java\"><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;MyException&nbsp;<span class=\"java__keyword\">extends</span>&nbsp;Exception{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;MyException(Throwable&nbsp;e)&nbsp;{&nbsp;initCause(e);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;NewClass&nbsp;{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;MyException&nbsp;{&nbsp;<span class=\"java__keyword\">int</span>&nbsp;result&nbsp;=&nbsp;<span class=\"java__number\">0</span>;&nbsp;<span class=\"java__keyword\">try</span>{&nbsp;result&nbsp;=&nbsp;getAreaValue(-<span class=\"java__number\">1</span>,&nbsp;<span class=\"java__number\">100</span>);&nbsp;}<span class=\"java__keyword\">catch</span>(IllegalArgumentException&nbsp;e){&nbsp;Logger.getLogger(NewClass.<span class=\"java__keyword\">class</span>.getName()).log(<span class=\"java__keyword\">new</span>&nbsp;LogRecord(Level.WARNING,&nbsp;<span class=\"java__string\">\"В&nbsp;метод&nbsp;вычисления&nbsp;площади&nbsp;был&nbsp;передан&nbsp;аргумент&nbsp;с&nbsp;негативным&nbsp;значением!\"</span>));&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;MyException(e);&nbsp;}&nbsp;System.out.println(<span class=\"java__string\">\"Result&nbsp;is&nbsp;:&nbsp;\"</span>+result);&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">int</span>&nbsp;getAreaValue(<span class=\"java__keyword\">int</span>&nbsp;x,&nbsp;<span class=\"java__keyword\">int</span>&nbsp;y){&nbsp;<span class=\"java__keyword\">if</span>(x&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>&nbsp;||&nbsp;y&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>)&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IllegalArgumentException(<span class=\"java__string\">\"value&nbsp;of&nbsp;\'x\'&nbsp;or&nbsp;\'y\'&nbsp;is&nbsp;negative:&nbsp;x=\"</span>+x+<span class=\"java__string\">\",&nbsp;y=\"</span>+y);&nbsp;<span class=\"java__keyword\">return</span>&nbsp;x*y;&nbsp;}&nbsp;}</code> <span class=\"notranslate\">args) throws MyException {</span> <code class=\"java\"><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;MyException&nbsp;<span class=\"java__keyword\">extends</span>&nbsp;Exception{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;MyException(Throwable&nbsp;e)&nbsp;{&nbsp;initCause(e);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;NewClass&nbsp;{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;MyException&nbsp;{&nbsp;<span class=\"java__keyword\">int</span>&nbsp;result&nbsp;=&nbsp;<span class=\"java__number\">0</span>;&nbsp;<span class=\"java__keyword\">try</span>{&nbsp;result&nbsp;=&nbsp;getAreaValue(-<span class=\"java__number\">1</span>,&nbsp;<span class=\"java__number\">100</span>);&nbsp;}<span class=\"java__keyword\">catch</span>(IllegalArgumentException&nbsp;e){&nbsp;Logger.getLogger(NewClass.<span class=\"java__keyword\">class</span>.getName()).log(<span class=\"java__keyword\">new</span>&nbsp;LogRecord(Level.WARNING,&nbsp;<span class=\"java__string\">\"В&nbsp;метод&nbsp;вычисления&nbsp;площади&nbsp;был&nbsp;передан&nbsp;аргумент&nbsp;с&nbsp;негативным&nbsp;значением!\"</span>));&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;MyException(e);&nbsp;}&nbsp;System.out.println(<span class=\"java__string\">\"Result&nbsp;is&nbsp;:&nbsp;\"</span>+result);&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">int</span>&nbsp;getAreaValue(<span class=\"java__keyword\">int</span>&nbsp;x,&nbsp;<span class=\"java__keyword\">int</span>&nbsp;y){&nbsp;<span class=\"java__keyword\">if</span>(x&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>&nbsp;||&nbsp;y&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>)&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IllegalArgumentException(<span class=\"java__string\">\"value&nbsp;of&nbsp;\'x\'&nbsp;or&nbsp;\'y\'&nbsp;is&nbsp;negative:&nbsp;x=\"</span>+x+<span class=\"java__string\">\",&nbsp;y=\"</span>+y);&nbsp;<span class=\"java__keyword\">return</span>&nbsp;x*y;&nbsp;}&nbsp;}</code> <span class=\"notranslate\">(new LogRecord (Level.WARNING, \"</span> <code class=\"java\"><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;MyException&nbsp;<span class=\"java__keyword\">extends</span>&nbsp;Exception{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;MyException(Throwable&nbsp;e)&nbsp;{&nbsp;initCause(e);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;NewClass&nbsp;{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;MyException&nbsp;{&nbsp;<span class=\"java__keyword\">int</span>&nbsp;result&nbsp;=&nbsp;<span class=\"java__number\">0</span>;&nbsp;<span class=\"java__keyword\">try</span>{&nbsp;result&nbsp;=&nbsp;getAreaValue(-<span class=\"java__number\">1</span>,&nbsp;<span class=\"java__number\">100</span>);&nbsp;}<span class=\"java__keyword\">catch</span>(IllegalArgumentException&nbsp;e){&nbsp;Logger.getLogger(NewClass.<span class=\"java__keyword\">class</span>.getName()).log(<span class=\"java__keyword\">new</span>&nbsp;LogRecord(Level.WARNING,&nbsp;<span class=\"java__string\">\"В&nbsp;метод&nbsp;вычисления&nbsp;площади&nbsp;был&nbsp;передан&nbsp;аргумент&nbsp;с&nbsp;негативным&nbsp;значением!\"</span>));&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;MyException(e);&nbsp;}&nbsp;System.out.println(<span class=\"java__string\">\"Result&nbsp;is&nbsp;:&nbsp;\"</span>+result);&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">int</span>&nbsp;getAreaValue(<span class=\"java__keyword\">int</span>&nbsp;x,&nbsp;<span class=\"java__keyword\">int</span>&nbsp;y){&nbsp;<span class=\"java__keyword\">if</span>(x&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>&nbsp;||&nbsp;y&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>)&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IllegalArgumentException(<span class=\"java__string\">\"value&nbsp;of&nbsp;\'x\'&nbsp;or&nbsp;\'y\'&nbsp;is&nbsp;negative:&nbsp;x=\"</span>+x+<span class=\"java__string\">\",&nbsp;y=\"</span>+y);&nbsp;<span class=\"java__keyword\">return</span>&nbsp;x*y;&nbsp;}&nbsp;}</code> <span class=\"notranslate\">result);</span> <code class=\"java\"><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;MyException&nbsp;<span class=\"java__keyword\">extends</span>&nbsp;Exception{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;MyException(Throwable&nbsp;e)&nbsp;{&nbsp;initCause(e);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;NewClass&nbsp;{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;MyException&nbsp;{&nbsp;<span class=\"java__keyword\">int</span>&nbsp;result&nbsp;=&nbsp;<span class=\"java__number\">0</span>;&nbsp;<span class=\"java__keyword\">try</span>{&nbsp;result&nbsp;=&nbsp;getAreaValue(-<span class=\"java__number\">1</span>,&nbsp;<span class=\"java__number\">100</span>);&nbsp;}<span class=\"java__keyword\">catch</span>(IllegalArgumentException&nbsp;e){&nbsp;Logger.getLogger(NewClass.<span class=\"java__keyword\">class</span>.getName()).log(<span class=\"java__keyword\">new</span>&nbsp;LogRecord(Level.WARNING,&nbsp;<span class=\"java__string\">\"В&nbsp;метод&nbsp;вычисления&nbsp;площади&nbsp;был&nbsp;передан&nbsp;аргумент&nbsp;с&nbsp;негативным&nbsp;значением!\"</span>));&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;MyException(e);&nbsp;}&nbsp;System.out.println(<span class=\"java__string\">\"Result&nbsp;is&nbsp;:&nbsp;\"</span>+result);&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">int</span>&nbsp;getAreaValue(<span class=\"java__keyword\">int</span>&nbsp;x,&nbsp;<span class=\"java__keyword\">int</span>&nbsp;y){&nbsp;<span class=\"java__keyword\">if</span>(x&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>&nbsp;||&nbsp;y&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>)&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IllegalArgumentException(<span class=\"java__string\">\"value&nbsp;of&nbsp;\'x\'&nbsp;or&nbsp;\'y\'&nbsp;is&nbsp;negative:&nbsp;x=\"</span>+x+<span class=\"java__string\">\",&nbsp;y=\"</span>+y);&nbsp;<span class=\"java__keyword\">return</span>&nbsp;x*y;&nbsp;}&nbsp;}</code> <span class=\"notranslate\">int y) {</span> <code class=\"java\"><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;MyException&nbsp;<span class=\"java__keyword\">extends</span>&nbsp;Exception{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;MyException(Throwable&nbsp;e)&nbsp;{&nbsp;initCause(e);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;NewClass&nbsp;{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;MyException&nbsp;{&nbsp;<span class=\"java__keyword\">int</span>&nbsp;result&nbsp;=&nbsp;<span class=\"java__number\">0</span>;&nbsp;<span class=\"java__keyword\">try</span>{&nbsp;result&nbsp;=&nbsp;getAreaValue(-<span class=\"java__number\">1</span>,&nbsp;<span class=\"java__number\">100</span>);&nbsp;}<span class=\"java__keyword\">catch</span>(IllegalArgumentException&nbsp;e){&nbsp;Logger.getLogger(NewClass.<span class=\"java__keyword\">class</span>.getName()).log(<span class=\"java__keyword\">new</span>&nbsp;LogRecord(Level.WARNING,&nbsp;<span class=\"java__string\">\"В&nbsp;метод&nbsp;вычисления&nbsp;площади&nbsp;был&nbsp;передан&nbsp;аргумент&nbsp;с&nbsp;негативным&nbsp;значением!\"</span>));&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;MyException(e);&nbsp;}&nbsp;System.out.println(<span class=\"java__string\">\"Result&nbsp;is&nbsp;:&nbsp;\"</span>+result);&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">int</span>&nbsp;getAreaValue(<span class=\"java__keyword\">int</span>&nbsp;x,&nbsp;<span class=\"java__keyword\">int</span>&nbsp;y){&nbsp;<span class=\"java__keyword\">if</span>(x&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>&nbsp;||&nbsp;y&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>)&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IllegalArgumentException(<span class=\"java__string\">\"value&nbsp;of&nbsp;\'x\'&nbsp;or&nbsp;\'y\'&nbsp;is&nbsp;negative:&nbsp;x=\"</span>+x+<span class=\"java__string\">\",&nbsp;y=\"</span>+y);&nbsp;<span class=\"java__keyword\">return</span>&nbsp;x*y;&nbsp;}&nbsp;}</code> <span class=\"notranslate\">\'x\' or \'y\' is negative: x =\" + x + \", y =\" + y);</span> <code class=\"java\"><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;MyException&nbsp;<span class=\"java__keyword\">extends</span>&nbsp;Exception{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;MyException(Throwable&nbsp;e)&nbsp;{&nbsp;initCause(e);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;NewClass&nbsp;{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;MyException&nbsp;{&nbsp;<span class=\"java__keyword\">int</span>&nbsp;result&nbsp;=&nbsp;<span class=\"java__number\">0</span>;&nbsp;<span class=\"java__keyword\">try</span>{&nbsp;result&nbsp;=&nbsp;getAreaValue(-<span class=\"java__number\">1</span>,&nbsp;<span class=\"java__number\">100</span>);&nbsp;}<span class=\"java__keyword\">catch</span>(IllegalArgumentException&nbsp;e){&nbsp;Logger.getLogger(NewClass.<span class=\"java__keyword\">class</span>.getName()).log(<span class=\"java__keyword\">new</span>&nbsp;LogRecord(Level.WARNING,&nbsp;<span class=\"java__string\">\"В&nbsp;метод&nbsp;вычисления&nbsp;площади&nbsp;был&nbsp;передан&nbsp;аргумент&nbsp;с&nbsp;негативным&nbsp;значением!\"</span>));&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;MyException(e);&nbsp;}&nbsp;System.out.println(<span class=\"java__string\">\"Result&nbsp;is&nbsp;:&nbsp;\"</span>+result);&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">int</span>&nbsp;getAreaValue(<span class=\"java__keyword\">int</span>&nbsp;x,&nbsp;<span class=\"java__keyword\">int</span>&nbsp;y){&nbsp;<span class=\"java__keyword\">if</span>(x&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>&nbsp;||&nbsp;y&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>)&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IllegalArgumentException(<span class=\"java__string\">\"value&nbsp;of&nbsp;\'x\'&nbsp;or&nbsp;\'y\'&nbsp;is&nbsp;negative:&nbsp;x=\"</span>+x+<span class=\"java__string\">\",&nbsp;y=\"</span>+y);&nbsp;<span class=\"java__keyword\">return</span>&nbsp;x*y;&nbsp;}&nbsp;}</code> </pre>\r\n<div><span class=\"notranslate\"> But the resulting stektreys:</span></div>\r\n<div>&nbsp;</div>\r\n<div><span class=\"notranslate\"> <em>Exception in thread \"main\" javatest.MyException</em></span></div>\r\n<div><span class=\"notranslate\"> <em>at javatest.NewClass.main (NewClass.java:29)</em></span></div>\r\n<div><span class=\"notranslate\"> <em>Caused by: java.lang.IllegalArgumentException: value of \'</em> x\' or \'y\' is negative: x = -1, y = <em>100</em></span></div>\r\n<div><span class=\"notranslate\"> <em>at javatest.NewClass.getAreaValue (NewClass.java:37)</em></span></div>\r\n<div><span class=\"notranslate\"> <em>at javatest.NewClass.main (NewClass.java:26)</em></span></div>\r\n<div><span class=\"notranslate\"> <em>Java Result: 1</em></span></div>\r\n<div><em>&nbsp;</em></div>\r\n<div><span class=\"notranslate\"> So we created our own exception class and constructor wrapped primary exception using initCause (e), and we turned out such stektreys <em>MyException -&gt; IllegalArgumentException.</em></span></div>\r\n<div><span class=\"notranslate\"> The idea initCause (e) that would turn the exception into a new source of exclusion.</span> <span class=\"notranslate\"> Thus it is possible it will be easier to trace the location and cause of the error.</span> <span class=\"notranslate\"> Each exception is a reference to the previous exception, and it resembles a linked list.</span></div>\r\n<h2><span class=\"notranslate\"> Processing a few exceptions</span></h2>\r\n<p><span class=\"notranslate\"> One try block may correspond to <strong>multiple catch blocks</strong> with different classes of exceptions.</span></p>\r\n<pre class=\"chili\"> <code class=\"java\"><span class=\"java__keyword\">class</span>&nbsp;Main&nbsp;{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;FileInputStream&nbsp;fis&nbsp;=&nbsp;<span class=\"java__keyword\">null</span>;&nbsp;<span class=\"java__keyword\">try</span>{&nbsp;fis&nbsp;=&nbsp;<span class=\"java__keyword\">new</span>&nbsp;FileInputStream(fileName);&nbsp;}<span class=\"java__keyword\">catch</span>&nbsp;(FileNotFoundException&nbsp;ex){&nbsp;System.out.println(<span class=\"java__string\">\"Oops,&nbsp;FileNotFoundException&nbsp;caught\"</span>);&nbsp;}<span class=\"java__keyword\">catch</span>&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"IOEXCEOTION\"</span>);&nbsp;}&nbsp;}&nbsp;}&nbsp;}</code> <span class=\"notranslate\">args) {</span> <code class=\"java\"><span class=\"java__keyword\">class</span>&nbsp;Main&nbsp;{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;FileInputStream&nbsp;fis&nbsp;=&nbsp;<span class=\"java__keyword\">null</span>;&nbsp;<span class=\"java__keyword\">try</span>{&nbsp;fis&nbsp;=&nbsp;<span class=\"java__keyword\">new</span>&nbsp;FileInputStream(fileName);&nbsp;}<span class=\"java__keyword\">catch</span>&nbsp;(FileNotFoundException&nbsp;ex){&nbsp;System.out.println(<span class=\"java__string\">\"Oops,&nbsp;FileNotFoundException&nbsp;caught\"</span>);&nbsp;}<span class=\"java__keyword\">catch</span>&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"IOEXCEOTION\"</span>);&nbsp;}&nbsp;}&nbsp;}&nbsp;}</code> <span class=\"notranslate\">);</span> <code class=\"java\"><span class=\"java__keyword\">class</span>&nbsp;Main&nbsp;{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;FileInputStream&nbsp;fis&nbsp;=&nbsp;<span class=\"java__keyword\">null</span>;&nbsp;<span class=\"java__keyword\">try</span>{&nbsp;fis&nbsp;=&nbsp;<span class=\"java__keyword\">new</span>&nbsp;FileInputStream(fileName);&nbsp;}<span class=\"java__keyword\">catch</span>&nbsp;(FileNotFoundException&nbsp;ex){&nbsp;System.out.println(<span class=\"java__string\">\"Oops,&nbsp;FileNotFoundException&nbsp;caught\"</span>);&nbsp;}<span class=\"java__keyword\">catch</span>&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;System.out.println(<span class=\"java__string\">\"IOEXCEOTION\"</span>);&nbsp;}&nbsp;}&nbsp;}&nbsp;}</code> </pre>\r\n<div><span class=\"notranslate\"> Here, if the file is not found, it will be displayed \"Oops, FileNotFoundException caught\" and the program will continue to operate (in this case, complete), if the file is found, but, for example, it is not available to record the on-screen \"IOEXCEOTION\" will be displayed .</span></div>\r\n<div><span class=\"notranslate\"> <strong>An important feature of</strong> the sequence of catch blocks should go from the particular to the more general.</span> <span class=\"notranslate\"> Otherwise it will be a compilation error.</span></div>\r\n<pre class=\"chili\"> <code class=\"java\"><span class=\"java__keyword\">try</span>{&nbsp;fis&nbsp;=&nbsp;<span class=\"java__keyword\">new</span>&nbsp;FileInputStream(fileName);&nbsp;}<span class=\"java__keyword\">catch</span>&nbsp;(Exception&nbsp;ex){&nbsp;<span class=\"java__com\">//...&nbsp;}catch&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;//&nbsp;&lt;---&nbsp;Ошибка&nbsp;//...&nbsp;}</span></code> <span class=\"notranslate\">&lt;---</span> <code class=\"java\"><span class=\"java__keyword\">try</span>{&nbsp;fis&nbsp;=&nbsp;<span class=\"java__keyword\">new</span>&nbsp;FileInputStream(fileName);&nbsp;}<span class=\"java__keyword\">catch</span>&nbsp;(Exception&nbsp;ex){&nbsp;<span class=\"java__com\">//...&nbsp;}catch&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;//&nbsp;&lt;---&nbsp;Ошибка&nbsp;//...&nbsp;}</span></code> </pre>\r\n<div><span class=\"notranslate\"> The new design is now available in <strong>Java 7,</strong> through which you can catch a few exceptions re one block catch:</span></div>\r\n<pre class=\"chili\"> <code class=\"java\"><span class=\"java__keyword\">try</span>&nbsp;{&nbsp;...&nbsp;}&nbsp;<span class=\"java__keyword\">catch</span>(&nbsp;IOException&nbsp;|&nbsp;SQLException&nbsp;ex&nbsp;)&nbsp;{&nbsp;logger.log(ex);&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;ex;&nbsp;}</code> <span class=\"notranslate\">{</span> <code class=\"java\"><span class=\"java__keyword\">try</span>&nbsp;{&nbsp;...&nbsp;}&nbsp;<span class=\"java__keyword\">catch</span>(&nbsp;IOException&nbsp;|&nbsp;SQLException&nbsp;ex&nbsp;)&nbsp;{&nbsp;logger.log(ex);&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;ex;&nbsp;}</code> </pre>\r\n<p><span class=\"notranslate\"> This is useful when error handling is no different.</span></p>\r\n<h2><span class=\"notranslate\"> Construction try-with-resources</span></h2>\r\n<div><span class=\"notranslate\"> In <strong>Java 7</strong> introduced another structure, designed to make life easier for the programmer.</span></div>\r\n<div><span class=\"notranslate\"> If you <strong>previously</strong> had <strong>to</strong> write so:</span></div>\r\n<pre class=\"chili\"> <code class=\"java\"><span class=\"java__keyword\">static</span>&nbsp;String&nbsp;readFirstLineFromFileWithFinallyBlock(String&nbsp;path)&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;IOException&nbsp;{&nbsp;BufferedReader&nbsp;br&nbsp;=&nbsp;<span class=\"java__keyword\">new</span>&nbsp;BufferedReader(<span class=\"java__keyword\">new</span>&nbsp;FileReader(path));&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;<span class=\"java__keyword\">return</span>&nbsp;br.readLine();&nbsp;}&nbsp;<span class=\"java__keyword\">finally</span>&nbsp;{&nbsp;<span class=\"java__keyword\">if</span>&nbsp;(br&nbsp;!=&nbsp;<span class=\"java__keyword\">null</span>)&nbsp;br.close();&nbsp;}&nbsp;}</code> <span class=\"notranslate\">(path));</span> <code class=\"java\"><span class=\"java__keyword\">static</span>&nbsp;String&nbsp;readFirstLineFromFileWithFinallyBlock(String&nbsp;path)&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;IOException&nbsp;{&nbsp;BufferedReader&nbsp;br&nbsp;=&nbsp;<span class=\"java__keyword\">new</span>&nbsp;BufferedReader(<span class=\"java__keyword\">new</span>&nbsp;FileReader(path));&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;<span class=\"java__keyword\">return</span>&nbsp;br.readLine();&nbsp;}&nbsp;<span class=\"java__keyword\">finally</span>&nbsp;{&nbsp;<span class=\"java__keyword\">if</span>&nbsp;(br&nbsp;!=&nbsp;<span class=\"java__keyword\">null</span>)&nbsp;br.close();&nbsp;}&nbsp;}</code> <span class=\"notranslate\">();</span> <code class=\"java\"><span class=\"java__keyword\">static</span>&nbsp;String&nbsp;readFirstLineFromFileWithFinallyBlock(String&nbsp;path)&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;IOException&nbsp;{&nbsp;BufferedReader&nbsp;br&nbsp;=&nbsp;<span class=\"java__keyword\">new</span>&nbsp;BufferedReader(<span class=\"java__keyword\">new</span>&nbsp;FileReader(path));&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;<span class=\"java__keyword\">return</span>&nbsp;br.readLine();&nbsp;}&nbsp;<span class=\"java__keyword\">finally</span>&nbsp;{&nbsp;<span class=\"java__keyword\">if</span>&nbsp;(br&nbsp;!=&nbsp;<span class=\"java__keyword\">null</span>)&nbsp;br.close();&nbsp;}&nbsp;}</code> </pre>\r\n<div><span class=\"notranslate\"> So <strong>now</strong> it is possible to do so:</span></div>\r\n<pre class=\"chili\"> <code class=\"java\"><span class=\"java__keyword\">static</span>&nbsp;String&nbsp;readFirstLineFromFile(String&nbsp;path)&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;IOException&nbsp;{&nbsp;<span class=\"java__keyword\">try</span>&nbsp;(BufferedReader&nbsp;br&nbsp;=&nbsp;<span class=\"java__keyword\">new</span>&nbsp;BufferedReader(<span class=\"java__keyword\">new</span>&nbsp;FileReader(path)))&nbsp;{&nbsp;<span class=\"java__keyword\">return</span>&nbsp;br.readLine();&nbsp;}&nbsp;}</code> <span class=\"notranslate\">IOException {</span> <code class=\"java\"><span class=\"java__keyword\">static</span>&nbsp;String&nbsp;readFirstLineFromFile(String&nbsp;path)&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;IOException&nbsp;{&nbsp;<span class=\"java__keyword\">try</span>&nbsp;(BufferedReader&nbsp;br&nbsp;=&nbsp;<span class=\"java__keyword\">new</span>&nbsp;BufferedReader(<span class=\"java__keyword\">new</span>&nbsp;FileReader(path)))&nbsp;{&nbsp;<span class=\"java__keyword\">return</span>&nbsp;br.readLine();&nbsp;}&nbsp;}</code> <span class=\"notranslate\">)) {</span> <code class=\"java\"><span class=\"java__keyword\">static</span>&nbsp;String&nbsp;readFirstLineFromFile(String&nbsp;path)&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;IOException&nbsp;{&nbsp;<span class=\"java__keyword\">try</span>&nbsp;(BufferedReader&nbsp;br&nbsp;=&nbsp;<span class=\"java__keyword\">new</span>&nbsp;BufferedReader(<span class=\"java__keyword\">new</span>&nbsp;FileReader(path)))&nbsp;{&nbsp;<span class=\"java__keyword\">return</span>&nbsp;br.readLine();&nbsp;}&nbsp;}</code> </pre>\r\n<div><span class=\"notranslate\"> But where is br flux closure?</span> <span class=\"notranslate\"> The fact is that in <strong>Java SE 7</strong> BufferedReader stream <strong>java.lang.AutoCloseable</strong> implements interface design and now try-with-resources not necessary to close it.</span> <span class=\"notranslate\"> Conveniently compact and looks :)</span></div>\r\n<div><span class=\"notranslate\"> I recommend to familiarize with the interface <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html&amp;usg=ALkJrhiWdO8RLnfYV9Ze4hr33O31G-emJw\" target=\"blank\">AutoCloseable</a></span></div>\r\n<h2><span class=\"notranslate\"> Inheritance methods throwing exceptions</span></h2>\r\n<p><span class=\"notranslate\"> Consider the following code:</span></p>\r\n<pre class=\"chili\"> <code class=\"java\"><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;SuperClass&nbsp;{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;start()&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;IOException{&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IOException(<span class=\"java__string\">\"Not&nbsp;able&nbsp;to&nbsp;open&nbsp;file\"</span>);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;SubClass&nbsp;<span class=\"java__keyword\">extends</span>&nbsp;SuperClass{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;start()&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;Exception{&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;Exception(<span class=\"java__string\">\"Not&nbsp;able&nbsp;to&nbsp;start\"</span>);&nbsp;}&nbsp;}</code> <span class=\"notranslate\">open file\");</span> <code class=\"java\"><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;SuperClass&nbsp;{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;start()&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;IOException{&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IOException(<span class=\"java__string\">\"Not&nbsp;able&nbsp;to&nbsp;open&nbsp;file\"</span>);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;SubClass&nbsp;<span class=\"java__keyword\">extends</span>&nbsp;SuperClass{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;start()&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;Exception{&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;Exception(<span class=\"java__string\">\"Not&nbsp;able&nbsp;to&nbsp;start\"</span>);&nbsp;}&nbsp;}</code> <span class=\"notranslate\">start\");</span> <code class=\"java\"><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;SuperClass&nbsp;{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;start()&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;IOException{&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IOException(<span class=\"java__string\">\"Not&nbsp;able&nbsp;to&nbsp;open&nbsp;file\"</span>);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;SubClass&nbsp;<span class=\"java__keyword\">extends</span>&nbsp;SuperClass{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;start()&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;Exception{&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;Exception(<span class=\"java__string\">\"Not&nbsp;able&nbsp;to&nbsp;start\"</span>);&nbsp;}&nbsp;}</code> </pre>\r\n<div><span class=\"notranslate\"> It will not compile.</span></div>\r\n<div><span class=\"notranslate\"> The fact that the start () method has been overridden in a subclass of the signature and has been specified more general class of exceptions.</span> <span class=\"notranslate\"> According to <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://java67.blogspot.com/2012/08/what-is-method-overriding-in-java-example-tutorial.html&amp;usg=ALkJrhhu1SaCDKM_7L2wNAhbvYx3Lpd4Og\" target=\"blank\">the rules of overriding methods</a> , this action is not permissible.</span></div>\r\n<p><span class=\"notranslate\"> One can only narrow the exception class:</span></p>\r\n<pre class=\"chili\"> <code class=\"java\"><span class=\"java__keyword\">import</span>&nbsp;java.io.FileNotFoundException;&nbsp;<span class=\"java__keyword\">import</span>&nbsp;java.io.IOException;&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;SuperClass&nbsp;{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;start()&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;IOException{&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IOException(<span class=\"java__string\">\"Not&nbsp;able&nbsp;to&nbsp;open&nbsp;file\"</span>);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">class</span>&nbsp;SubClass&nbsp;<span class=\"java__keyword\">extends</span>&nbsp;SuperClass{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;start()&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;FileNotFoundException{&nbsp;<span class=\"java__com\">//&nbsp;FileNotFoundException&nbsp;-&nbsp;наследник&nbsp;IOException&nbsp;throw&nbsp;new&nbsp;FileNotFoundException(\"Not&nbsp;able&nbsp;to&nbsp;start\");&nbsp;}&nbsp;}</span></code> <span class=\"notranslate\">open file\");</span> <code class=\"java\"><span class=\"java__keyword\">import</span>&nbsp;java.io.FileNotFoundException;&nbsp;<span class=\"java__keyword\">import</span>&nbsp;java.io.IOException;&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;SuperClass&nbsp;{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;start()&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;IOException{&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IOException(<span class=\"java__string\">\"Not&nbsp;able&nbsp;to&nbsp;open&nbsp;file\"</span>);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">class</span>&nbsp;SubClass&nbsp;<span class=\"java__keyword\">extends</span>&nbsp;SuperClass{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;start()&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;FileNotFoundException{&nbsp;<span class=\"java__com\">//&nbsp;FileNotFoundException&nbsp;-&nbsp;наследник&nbsp;IOException&nbsp;throw&nbsp;new&nbsp;FileNotFoundException(\"Not&nbsp;able&nbsp;to&nbsp;start\");&nbsp;}&nbsp;}</span></code> <span class=\"notranslate\">start\");</span> <code class=\"java\"><span class=\"java__keyword\">import</span>&nbsp;java.io.FileNotFoundException;&nbsp;<span class=\"java__keyword\">import</span>&nbsp;java.io.IOException;&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;SuperClass&nbsp;{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;start()&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;IOException{&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IOException(<span class=\"java__string\">\"Not&nbsp;able&nbsp;to&nbsp;open&nbsp;file\"</span>);&nbsp;}&nbsp;}&nbsp;<span class=\"java__keyword\">class</span>&nbsp;SubClass&nbsp;<span class=\"java__keyword\">extends</span>&nbsp;SuperClass{&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;start()&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;FileNotFoundException{&nbsp;<span class=\"java__com\">//&nbsp;FileNotFoundException&nbsp;-&nbsp;наследник&nbsp;IOException&nbsp;throw&nbsp;new&nbsp;FileNotFoundException(\"Not&nbsp;able&nbsp;to&nbsp;start\");&nbsp;}&nbsp;}</span></code> </pre>\r\n<h2><span class=\"notranslate\"> How to throw a checked exception without processing it (hack)</span></h2>\r\n<p><span class=\"notranslate\"> Nothing is impossible.</span> <span class=\"notranslate\"> With the help of reflection and internal API java language can do magic :).</span></p>\r\n<p><span class=\"notranslate\"> <span style=\"color: #cc3333;\">Naturally you can not write well,</span> but to know how to do it is still interesting.</span></p>\r\n<pre style=\"color: #000000; font-size: medium; line-height: normal;\"> <span class=\"notranslate\"> <span style=\"color: #800000; font-weight: bold;\"><span style=\"color: #800000; font-weight: bold;\"><span style=\"color: #800080;\">public</span></span> class UglyDirtyHack {</span></span>\r\n\r\n    <span class=\"notranslate\"> <span style=\"color: #800000; font-weight: bold;\"><span style=\"color: #800000; font-weight: bold;\"><span style=\"color: #bb7977;\"><span style=\"color: #808030;\"><span style=\"color: #bb7977; font-weight: bold;\"><span style=\"color: #808030;\"><span style=\"color: #808030;\">public static void main (String []</span></span></span></span></span></span></span> args) {</span>\r\n\r\n        <span class=\"notranslate\"> <span style=\"color: #808030;\"><span style=\"color: #808030;\"><span style=\"color: #808030;\"><span style=\"color: #808030;\"><span style=\"color: #800000; font-weight: bold;\"><span style=\"color: #bb7977; font-weight: bold;\">. getUnsafe () throwException (new IOException</span></span></span></span></span></span> ( \"This is checked exception\"));</span>\r\n\r\n    <span class=\"notranslate\"> <span style=\"color: #800080;\">}</span></span>\r\n\r\n    <span class=\"notranslate\"> <span style=\"color: #800000; font-weight: bold;\"><span style=\"color: #800000; font-weight: bold;\"><span style=\"color: #808030;\"><span style=\"color: #808030;\"><span style=\"color: #800080;\">public</span></span></span></span> static Unsafe getUnsafe () {</span></span>\r\n\r\n        <span class=\"notranslate\"> <span style=\"color: #808030;\"><span style=\"color: #800000; font-weight: bold;\"><span style=\"color: #800080;\">Unsafe</span></span></span> unsafe = null;</span>\r\n\r\n        <span class=\"notranslate\"> <span style=\"color: #800000; font-weight: bold;\">try</span> <span style=\"color: #800080;\">{</span></span>\r\n\r\n            <span class=\"notranslate\"> <span style=\"color: #bb7977; font-weight: bold;\"><span style=\"color: #808030;\"><span style=\"color: #808030;\"><span style=\"color: #0000e6;\">Field f = Unsafe class getDeclaredField ( \"</span></span></span></span> theUnsafe\")..;</span>\r\n\r\n            <span class=\"notranslate\"> <span style=\"color: #808030;\"><span style=\"color: #808030;\"><span style=\"color: #800000; font-weight: bold;\"><span style=\"color: #808030;\"><span style=\"color: #800080;\">f</span></span></span></span></span> setAccessible (true).;</span>\r\n\r\n            <span class=\"notranslate\"> <span style=\"color: #808030;\"><span style=\"color: #808030;\"><span style=\"color: #808030;\"><span style=\"color: #808030;\">unsafe = (Unsafe) f get (</span></span></span></span> null).;</span>\r\n\r\n        <span class=\"notranslate\"> <span style=\"color: #800080;\"><span style=\"color: #800000; font-weight: bold;\"><span style=\"color: #808030;\"><span style=\"color: #808030;\"><span style=\"color: #800080;\">}</span></span></span></span> Catch (ReflectiveOperationException e) {</span></span>\r\n\r\n            <span class=\"notranslate\"> <span style=\"color: #bb7977; font-weight: bold;\"><span style=\"color: #808030;\"><span style=\"color: #0000e6;\">System out println ( \"Who cares\"</span></span></span> )..;</span>\r\n\r\n        <span class=\"notranslate\"> <span style=\"color: #800080;\">}</span></span>\r\n\r\n        <span class=\"notranslate\"> <span style=\"color: #800000; font-weight: bold;\"><span style=\"color: #800080;\">return</span> unsafe;</span></span>\r\n\r\n    <span class=\"notranslate\"> <span style=\"color: #800080;\">}</span></span>\r\n\r\n<span class=\"notranslate\"> <span style=\"color: #800080;\">}</span></span> </pre>\r\n<p><span class=\"notranslate\"> <span style=\"font-size: 14px; line-height: 1.428571429;\">sun.misc.Unsafe -. API enables you to do with classes, methods and fields of action, unacceptable standard language means</span> The idea is to obtain a system object <span style=\"font-size: 14px; line-height: 1.428571429;\">Unsafe.</span></span></p>\r\n<p><span class=\"notranslate\"> The example uses reflection to obtain <span style=\"font-size: 14px; line-height: 1.428571429;\">Unsafe</span> object <span style=\"font-size: 14px; line-height: 1.428571429;\">because other means to do so is problematic.</span> <span style=\"font-size: 14px; line-height: 1.428571429;\">In class</span> <span style=\"font-size: 14px; line-height: 1.428571429;\">Unsafe private constructor.</span></span> <span class=\"notranslate\"> <span style=\"font-size: 14px; line-height: 1.428571429;\">And if you try to call static method getUnsafe () will be thrown exception</span> SecurityException.</span></p>\r\n<h2><span class=\"notranslate\"> conclusion</span></h2>\r\n<p><span class=\"notranslate\"> Originally, I wanted to make a cheat sheet for exception hierarchy of classes and did not plan to write an article.</span> <span class=\"notranslate\"> But it turned out that the crib has grown in the article :)</span></p>\r\n<p><span class=\"notranslate\"> I hope it will help someone to interview, or simply recall / deepen knowledge :) Thank you!</span></p>','en',17,'article_b',1,'2016-02-28 19:48:39'),(346,'<p><strong>Исключение </strong>- это проблема(ошибка) возникающая во время выполнения программы. Исключения могут возникать во многих случаях, например:</p>\r\n<ol>\r\n<li>Пользователь ввел некорректные данные.</li>\r\n<li>Файл, к которому обращается программа, не найден.</li>\r\n<li>Сетевое соединение с сервером было утеряно во время передачи данных.</li>\r\n</ol>\r\n<p>И т.п.<br /><br /> <a href=\"http://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0_%D0%B8%D1%81%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B9\" target=\"blank\">Обработка исключительных ситуаций </a>(exception handling) &mdash; механизм языков программирования, предназначенный для описания реакции программы на ошибки времени выполнения и другие возможные проблемы (исключения), которые могут возникнуть при выполнении программы и приводят к невозможности (бессмысленности) дальнейшей отработки программой её базового алгоритма.</p>\r\n<h2>Синтаксис&nbsp;</h2>\r\n<div><span style=\"line-height: 1.428571429;\">В Java есть пять ключевых слов для работы с исключениями:</span></div>\r\n<div>\r\n<ol>\r\n<li><strong style=\"line-height: 1.428571429;\">try </strong><span style=\"line-height: 1.428571429;\">- данное ключевое слово используется для отметки начала блока кода, который потенциально может привести к ошибке.&nbsp;</span></li>\r\n<li><strong style=\"line-height: 1.428571429;\">catch </strong><span style=\"line-height: 1.428571429;\">- ключевое слово для отметки начала блока кода, предназначенного для перехвата и обработки исключений.</span></li>\r\n<li><strong style=\"line-height: 1.428571429;\">finally </strong><span style=\"line-height: 1.428571429;\">- ключевое слово для отметки начала блока кода, которое является дополнительным. Этот блок помещается после последнего блока \'catch\'. Управление обычно передаётся в блок \'finally\' в любом случае.&nbsp;</span></li>\r\n<li><strong style=\"line-height: 1.428571429;\">throw </strong><span style=\"line-height: 1.428571429;\">- служит для генерации исключений.</span></li>\r\n<li><strong style=\"line-height: 1.428571429;\">throws </strong><span style=\"line-height: 1.428571429;\">- ключевое слово, которое прописывается в сигнатуре метода, и обозначающее что метод потенциально может выбросить исключение с указанным типом.</span></li>\r\n</ol>\r\n</div>\r\n<p>Начнем с простого. Допустим мы пишем метод для вычисления площади прямоугольника:</p>\r\n<pre class=\"chili\"><code class=\"java\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(getAreaValue(-<span class=\"java__number\">1</span>,&nbsp;<span class=\"java__number\">100</span>));&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">int</span>&nbsp;getAreaValue(<span class=\"java__keyword\">int</span>&nbsp;x,&nbsp;<span class=\"java__keyword\">int</span>&nbsp;y){&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">if</span>(x&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>&nbsp;||&nbsp;y&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>)&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IllegalArgumentException(<span class=\"java__string\">\"value&nbsp;of&nbsp;\'x\'&nbsp;or&nbsp;\'y\'&nbsp;is&nbsp;negative:&nbsp;x=\"</span>+x+<span class=\"java__string\">\",&nbsp;y=\"</span>+y);&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">return</span>&nbsp;x*y;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br /></code></pre>\r\n<p>Здесь в методе getAreaValue мы бросаем исключение IllegalArgumentException с помощью ключевого слова throw. В данном случае в сигнатуре метода отсутствует throws IllegalArgumentException, это не сделано потому что исключение IllegalArgumentException является не проверяемым, о них мы ещё поговорим.</p>\r\n<p>Общий вид конструкции для \"поимки\" исключительной ситуации выглядит следующим образом:</p>\r\n<pre class=\"chili\"><code class=\"java\"><span class=\"java__keyword\">try</span>{&nbsp;<br /><span class=\"java__com\">//здесь&nbsp;код,&nbsp;который&nbsp;потенциально&nbsp;может&nbsp;привести&nbsp;к&nbsp;ошибке</span>&nbsp;<br />}&nbsp;<br /><span class=\"java__keyword\">catch</span>(SomeException&nbsp;e&nbsp;){&nbsp;<span class=\"java__com\">//в&nbsp;скобках&nbsp;указывается&nbsp;класс&nbsp;конкретной&nbsp;ожидаемой&nbsp;ошибки&nbsp;</span>&nbsp;<br /><span class=\"java__com\">//здесь&nbsp;описываются&nbsp;действия,&nbsp;направленные&nbsp;на&nbsp;обработку&nbsp;исключений</span>&nbsp;<br />}&nbsp;<br /><span class=\"java__keyword\">finally</span>{&nbsp;<br /><span class=\"java__com\">//выполняется&nbsp;в&nbsp;любом&nbsp;случае&nbsp;(&nbsp;блок&nbsp;finnaly&nbsp;не&nbsp;обязателен)</span>&nbsp;<br />}&nbsp;<br /></code></pre>\r\n<p>В нашем случае для площади прямоугольника:</p>\r\n<pre class=\"chili\"><code class=\"java\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">int</span>&nbsp;result&nbsp;=&nbsp;<span class=\"java__number\">0</span>;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">try</span>{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;getAreaValue(-<span class=\"java__number\">1</span>,&nbsp;<span class=\"java__number\">100</span>);&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<span class=\"java__keyword\">catch</span>(IllegalArgumentException&nbsp;e){&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logger.getLogger(NewClass.<span class=\"java__keyword\">class</span>.getName()).log(<span class=\"java__keyword\">new</span>&nbsp;LogRecord(Level.WARNING,&nbsp;<span class=\"java__string\">\"В&nbsp;метод&nbsp;вычисления&nbsp;площади&nbsp;был&nbsp;передан&nbsp;аргумент&nbsp;с&nbsp;негативным&nbsp;значением!\"</span>));&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;e;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"java__string\">\"Result&nbsp;is&nbsp;:&nbsp;\"</span>+result);&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">int</span>&nbsp;getAreaValue(<span class=\"java__keyword\">int</span>&nbsp;x,&nbsp;<span class=\"java__keyword\">int</span>&nbsp;y){&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">if</span>(x&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>&nbsp;||&nbsp;y&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>)&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IllegalArgumentException(<span class=\"java__string\">\"value&nbsp;of&nbsp;\'x\'&nbsp;or&nbsp;\'y\'&nbsp;is&nbsp;negative:&nbsp;x=\"</span>+x+<span class=\"java__string\">\",&nbsp;y=\"</span>+y);&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">return</span>&nbsp;x*y;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br /></code></pre>\r\n<p>Здесь мы поймали <em>IllegalArgumentException </em>и залогировали данное событие. Дело в том что \"починить\" такую поломку мы не можем, не будем же мы угадывать что хотел пользователь :). По этому мы пробрасываем данное исключение дальше с помощью \"throw e;\". Такое часто можно встретить на серверах приложений(веб-серверах).&nbsp;</p>\r\n<h2><a href=\"http://www.quizful.net/post/%28http://www.softzenware.com/java/10.htm%29\" target=\"blank\">finally</a></h2>\r\n<p>Иногда требуется гарантировать, что определенный участок кода будет выполняться независимо от того, какие исключения были возбуждены и перехвачены. Для создания такого участка кода используется ключевое слово finally. Даже в тех случаях, когда в методе нет соответствующего возбужденному исключению раздела catch, блок finally будет выполнен до того, как управление перейдет к операторам, следующим за разделом try. У каждого раздела try должен быть по крайней мере или один раздел catch или блок finally. Блок finally очень удобен для закрытия файлов и освобождения любых других ресурсов, захваченных для временного использования в начале выполнения метода. Ниже приведен пример класса с двумя методами, завершение которых происходит по разным причинам, но в обоих перед выходом выполняется код раздела finally.</p>\r\n<pre class=\"chili\"><code class=\"java\"><span class=\"java__keyword\">class</span>&nbsp;FinallyDemo&nbsp;{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;procA()&nbsp;{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"java__string\">\"inside&nbsp;procA\"</span>);&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;RuntimeException(<span class=\"java__string\">\"demo\"</span>);&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"java__keyword\">finally</span>&nbsp;{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"java__string\">\"procA\'s&nbsp;finally\"</span>);&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;procB()&nbsp;{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"java__string\">\"inside&nbsp;procB\"</span>);&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">return</span>;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"java__keyword\">finally</span>&nbsp;{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"java__string\">\"procB\'s&nbsp;finally\"</span>);&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String&nbsp;args[])&nbsp;{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;procA();&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"java__keyword\">catch</span>&nbsp;(Exception&nbsp;e)&nbsp;{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;procB();&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />}&nbsp;<br /></code></pre>\r\n<p>В этом примере в методе procA из-за возбуждения исключения происходит преждевременный выход из блока try, но по пути &laquo;наружу&raquo; выполняется раздел finally. Другой метод procB завершает работу выполнением стоящего в try-блоке оператора return, но и при этом перед выходом из метода выполняется программный код блока finally. Ниже приведен результат, полученный при выполнении этой программы.</p>\r\n<div><em>inside procA</em></div>\r\n<div><em>procA\'s finally</em></div>\r\n<div><em>inside procB</em></div>\r\n<div><em>procB\'s finally</em></div>\r\n<h2>Иерархия исключений</h2>\r\n<p>Все классы обрабатывающие ошибки являются наследниками класса java.lang.Throwable. Только объекты этого класса или его наследников могут быть \"брошены\" JVM при возникновении какой-нибудь исключительной ситуации, а также только эти объекты могут быть \"брошены\" во время выполнения программы с помощью ключевого слова throw.</p>\r\n<p>Прямыми наследниками класса Throwable являются Error и Exception.</p>\r\n<p><strong>Error </strong>- это подкласс, который показывает серьезные проблемы возникающие во время выполнения приложения. Большинство из этих ошибок сигнализируют о ненормальном ходе выполнения программы, т.е. о каких-то критических проблемах. Эти ошибки не рекомендуется отмечать в методах посредством throws-объявления, поэтому они также очень часто называются не проверяемые (unchecked).<br /><a href=\"http://java-prompt.blogspot.com/2011/02/exception-error.html\" target=\"blank\">Источник</a></p>\r\n<p>При программировании на Java основное внимание следует уделять иерархии <strong>Exception</strong>. Эта иерархия также разделяется на две ветви: исключения, производные от класса RuntimeException, и остальные. Исключения типа RuntimeException возникают вследствие ошибок программирования. Все другие исключения являются следствием непредвиденного стечения обстоятельств, например, ошибок ввода-вывода, возникающих при выполнении вполне корректных программ.</p>\r\n<p><em>Рассмотрим основные классы исключений. <a href=\"http://piccy.info/view3/6322681/5051bae52a552fc365dca23b7672ee85/1200/\" target=\"_blank\"><img src=\"http://i.piccy.info/i9/1519959f7aa47bacc443a8ea62ff5747/1398970263/41499/740281/exceptions_800.jpg\" alt=\"основные классы исключений\" border=\"0\" /></a> <a href=\"http://i.piccy.info/a3c/2014-05-01-18-51/i9-6322681/800x346-r\" target=\"_blank\"><img src=\"http://i.piccy.info/a3/2014-05-01-18-51/i9-6322681/800x346-r/i.gif\" alt=\"\" border=\"0\" /></a> </em></p>\r\n<div><a href=\"http://i.piccy.info/i9/2579c05514d2f6424a63e4d246ffb0ad/1398970263/143501/740281/exceptions.png\" target=\"blank\">Оригинал</a>&nbsp;сам рисовал :)</div>\r\n<p>&nbsp;</p>\r\n<div>Здесь основными классами являются Throwable, Error, Exception и RuntimeException. Именно с ними связанна вся \"магия\".</div>\r\n<div>Дело в том, что в java есть два типа исключений: checked и unchecked.</div>\r\n<div>1. <strong>Checked </strong>исключения, это те, которые должны обрабатываться блоком catch или описываться в сигнатуре метода. Unchecked могут не обрабатываться и не быть описанными.</div>\r\n<div>2. <strong>Unchecked </strong>исключения в Java - наследованные от RuntimeException, checked - от Exception (не включая unchecked).</div>\r\n<div>Пример unchecked исключения - NullPointerException, checked исключения - IOException</div>\r\n<div><a href=\"http://www.quizful.net/interview/java/exception-types\" target=\"blank\">(Вопрос собеседования</a>)</div>\r\n<div>То есть если в вашем коде есть участок который может бросить checked исключение то вы обязаны либо заключить его в конструкцию try/catch либо объявить в сигнатуре метода \"throws SomeException\"&nbsp;<span style=\"line-height: 1.428571429;\">но в данном случае обработка исключения делегируется на уровень выше. В любом случае его нужно будет перехватить. В противном случае программа просто не скомпилируется.</span></div>\r\n<div>Почему я выделил <strong>Throwable, Error, Exception и RuntimeException.</strong></div>\r\n<div>Throwable - <em>проверяемое </em>исключение</div>\r\n<div>Error -<em> не проверяемое</em></div>\r\n<div>Exception -<em> проверяемое</em></div>\r\n<div>RuntimeException - <em>не проверяемое</em></div>\r\n<div><em>&nbsp;</em></div>\r\n<div>Все остальные исключения наследуют это свойство от данных классов. Например SQLException является наследником Exception и оно проверяемое. <em>NullPointerException </em>- наследник RuntimeException и оно не проверяемое.&nbsp;</div>\r\n<div>&nbsp;</div>\r\n<div>Так почему не все исключения являются проверяемыми? Дело в том, что если проверять каждое место, где теоретически может быть ошибка, то ваш код сильно разрастется, станет плохо читаемым. Например в любом месте, где происходит деление чисел, нужно было бы проверять на <em>ArithmeticException</em>, потому что возможно деление на ноль. Эту опцию(пере отлавливать не проверяемые исключения) создатели языка оставили программисту на его усмотрение.</div>\r\n<div>&nbsp;</div>\r\n<div>Вернемся к классам исключений:</div>\r\n<div>&nbsp;</div>\r\n<div>1. <strong>RuntimeException</strong></div>\r\n<h3 class=\"r\" style=\"margin-top: 0px; margin-bottom: 0px; overflow: hidden; text-overflow: ellipsis;\"><span style=\"color: #333333;\"><span style=\"font-size: 14px; line-height: 20px; white-space: nowrap;\"><em>IndexOutOfBoundsException</em> -</span></span><span style=\"color: #333333; font-family: \'Helvetica Neue\', Helvetica, Arial, sans-serif; font-size: 14px; white-space: nowrap; line-height: 1.428571429;\">&nbsp;выбрасывается, когда индекс некоторого элемента в структуре данных(массив/коллекция) не попадает в диапазон имеющихся индексов.</span></h3>\r\n<div><em>NullPointerException </em>- ссылка на объект, к которому вы обращаетесь хранит null/</div>\r\n<div><em>ClassCastException </em>&ndash; Ошибка приведения типов. Всякий раз при приведении типов делается проверка на возможность приведения (проверка осуществляется с помощью instanceof.</div>\r\n<div><em>ArithmeticException </em>- бросается когда выполняются недопустимые арифметические операции, например деление на ноль.</div>\r\n<div>&nbsp;</div>\r\n<div>2. <strong>Error</strong></div>\r\n<div><em>ThreadDeath </em>- вызывается при неожиданной остановке потока посредством метода Thread.stop().</div>\r\n<div><em>StackOverflowError </em>- ошибка переполнение стека. Часто возникает в рекурсивных функциях из-за неправильного условия выхода.</div>\r\n<div><em><a href=\"http://habrahabr.ru/post/117274/\" target=\"blank\">OutOfMemoryError</a> </em>- ошибка переполнения памяти.</div>\r\n<h2>Создание своих классов исключений</h2>\r\n<p>Хотя встроенные исключения Java обрабатывают большинство частых ошибок, вероятно, вам потребуется создать ваши собственные типы исключений для обработки ситуаций, специфичных для ваших приложений. Это достаточно просто сделать: просто определите подкласс Exception (который, разумеется, является подклассом Throwable). Ваши подклассы не обязаны реализовывать что-либо &mdash; важно само их присутствие в системе типов, которое позволит использовать их как исключения.</p>\r\n<pre class=\"chili\"><code class=\"java\"><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;MyException&nbsp;<span class=\"java__keyword\">extends</span>&nbsp;Exception{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">public</span>&nbsp;MyException(Throwable&nbsp;e)&nbsp;{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initCause(e);&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />}&nbsp;<br />&nbsp;<br /><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;NewClass&nbsp;{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;MyException&nbsp;{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">int</span>&nbsp;result&nbsp;=&nbsp;<span class=\"java__number\">0</span>;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">try</span>{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result&nbsp;=&nbsp;getAreaValue(-<span class=\"java__number\">1</span>,&nbsp;<span class=\"java__number\">100</span>);&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<span class=\"java__keyword\">catch</span>(IllegalArgumentException&nbsp;e){&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Logger.getLogger(NewClass.<span class=\"java__keyword\">class</span>.getName()).log(<span class=\"java__keyword\">new</span>&nbsp;LogRecord(Level.WARNING,&nbsp;<span class=\"java__string\">\"В&nbsp;метод&nbsp;вычисления&nbsp;площади&nbsp;был&nbsp;передан&nbsp;аргумент&nbsp;с&nbsp;негативным&nbsp;значением!\"</span>));&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;MyException(e);&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"java__string\">\"Result&nbsp;is&nbsp;:&nbsp;\"</span>+result);&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">int</span>&nbsp;getAreaValue(<span class=\"java__keyword\">int</span>&nbsp;x,&nbsp;<span class=\"java__keyword\">int</span>&nbsp;y){&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">if</span>(x&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>&nbsp;||&nbsp;y&nbsp;&lt;&nbsp;<span class=\"java__number\">0</span>)&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IllegalArgumentException(<span class=\"java__string\">\"value&nbsp;of&nbsp;\'x\'&nbsp;or&nbsp;\'y\'&nbsp;is&nbsp;negative:&nbsp;x=\"</span>+x+<span class=\"java__string\">\",&nbsp;y=\"</span>+y);&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">return</span>&nbsp;x*y;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />}&nbsp;<br /></code></pre>\r\n<div>А вот получившейся стектрейс:</div>\r\n<div>&nbsp;</div>\r\n<div><em>Exception in thread \"main\" javatest.MyException</em></div>\r\n<div><em>at javatest.NewClass.main(NewClass.java:29)</em></div>\r\n<div><em>Caused by: java.lang.IllegalArgumentException: value of \'x\' or \'y\' is negative: x=-1, y=100</em></div>\r\n<div><em>at javatest.NewClass.getAreaValue(NewClass.java:37)</em></div>\r\n<div><em>at javatest.NewClass.main(NewClass.java:26)</em></div>\r\n<div><em>Java Result: 1</em></div>\r\n<div><em>&nbsp;</em></div>\r\n<div>Таким образом мы создали собственный класс исключения и в конструкторе завернули первичное исключение с помощью initCause(e), и у нас получился такой стектрейс <em>MyException -&gt; IllegalArgumentException.</em></div>\r\n<div>Идея initCause(e) в том, что бы заворачивать исключение источник в новое исключение. Таким образом можно будет проще проследить место и причину возникновения ошибки. В каждом исключении будет ссылка на предыдущее исключение, и это напоминает связной список. &nbsp;</div>\r\n<h2>Обработка нескольких исключений</h2>\r\n<p>Одному блоку try может соответствовать сразу <strong>несколько блоков catch</strong> с разными классами исключений.</p>\r\n<pre class=\"chili\"><code class=\"java\"><span class=\"java__keyword\">class</span>&nbsp;Main&nbsp;{&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">static</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileInputStream&nbsp;fis&nbsp;=&nbsp;<span class=\"java__keyword\">null</span>;&nbsp;<br /><span class=\"java__keyword\">try</span>{&nbsp;<br />fis&nbsp;=&nbsp;<span class=\"java__keyword\">new</span>&nbsp;FileInputStream(fileName);&nbsp;<br />}<span class=\"java__keyword\">catch</span>&nbsp;(FileNotFoundException&nbsp;ex){&nbsp;<br />System.out.println(<span class=\"java__string\">\"Oops,&nbsp;FileNotFoundException&nbsp;caught\"</span>);&nbsp;<br />}<span class=\"java__keyword\">catch</span>&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;&nbsp;<br />System.out.println(<span class=\"java__string\">\"IOEXCEOTION\"</span>);&nbsp;&nbsp;<br />}&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br />}&nbsp;<br /></code></pre>\r\n<div>Здесь если файл не найден, то будет выведено на экран \"Oops, FileNotFoundException caught\" и программа продолжит работать(в данном случае завершится), если же файл найден, но, например, он не доступен для записи то на экран будет выведено \"IOEXCEOTION\".</div>\r\n<div><strong>Важная особенность</strong>, последовательность блоков catch должна идти от частного к более общему. В противном случае будет ошибка компиляции.</div>\r\n<pre class=\"chili\"><code class=\"java\"><span class=\"java__keyword\">try</span>{&nbsp;<br />fis&nbsp;=&nbsp;<span class=\"java__keyword\">new</span>&nbsp;FileInputStream(fileName);&nbsp;<br />}<span class=\"java__keyword\">catch</span>&nbsp;(Exception&nbsp;ex){&nbsp;&nbsp;&nbsp;&nbsp;<br /><span class=\"java__com\">//...</span>&nbsp;<br />}<span class=\"java__keyword\">catch</span>&nbsp;(IOException&nbsp;e)&nbsp;{&nbsp;<span class=\"java__com\">//&nbsp;&lt;---&nbsp;Ошибка</span>&nbsp;<br /><span class=\"java__com\">//...</span>&nbsp;<br />}&nbsp;<br /></code></pre>\r\n<div>В <strong>Java 7</strong> стала доступна новая конструкция, с помощью которой можно пере отлавливать несколько исключений одни блоком catch:</div>\r\n<pre class=\"chili\"><code class=\"java\"><span class=\"java__keyword\">try</span>&nbsp;{&nbsp;&nbsp;<br />&nbsp;...&nbsp;<br />}&nbsp;<span class=\"java__keyword\">catch</span>(&nbsp;IOException&nbsp;|&nbsp;SQLException&nbsp;ex&nbsp;)&nbsp;{&nbsp;&nbsp;<br />&nbsp;&nbsp;logger.log(ex);&nbsp;<br />&nbsp;&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;ex;&nbsp;<br />}&nbsp;<br /></code></pre>\r\n<p>Это удобно, если обработка ошибок не отличается.</p>\r\n<h2>Конструкция try-with-resources</h2>\r\n<div>В <strong>Java 7</strong> ввели ещё одну конструкцию, призванную упростить жизнь программисту.</div>\r\n<div>Если <strong>раньше </strong>приходилось писать так:</div>\r\n<pre class=\"chili\"><code class=\"java\"><span class=\"java__keyword\">static</span>&nbsp;String&nbsp;readFirstLineFromFileWithFinallyBlock(String&nbsp;path)&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;IOException&nbsp;{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;BufferedReader&nbsp;br&nbsp;=&nbsp;<span class=\"java__keyword\">new</span>&nbsp;BufferedReader(<span class=\"java__keyword\">new</span>&nbsp;FileReader(path));&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">try</span>&nbsp;{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">return</span>&nbsp;br.readLine();&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"java__keyword\">finally</span>&nbsp;{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">if</span>&nbsp;(br&nbsp;!=&nbsp;<span class=\"java__keyword\">null</span>)&nbsp;br.close();&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />}&nbsp;<br /></code></pre>\r\n<div>То <strong>теперь </strong>это можно сделать так:</div>\r\n<pre class=\"chili\"><code class=\"java\"><span class=\"java__keyword\">static</span>&nbsp;String&nbsp;readFirstLineFromFile(String&nbsp;path)&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;IOException&nbsp;{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">try</span>&nbsp;(BufferedReader&nbsp;br&nbsp;=&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">new</span>&nbsp;BufferedReader(<span class=\"java__keyword\">new</span>&nbsp;FileReader(path)))&nbsp;{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">return</span>&nbsp;br.readLine();&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />}&nbsp;<br /></code></pre>\r\n<div>Но где же закрытие потока br? Дело в том, что в<strong> Java SE 7</strong> поток BufferedReader реализует интерфейс <strong>java.lang.AutoCloseable</strong> и теперь в конструкции try-with-resources нет необходимости закрывать его. Удобно и выглядит компактнее :)</div>\r\n<div>рекомендую ознакомиться с интерфейсом <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html\" target=\"blank\">AutoCloseable&nbsp;</a></div>\r\n<h2>Наследование методов бросающих исключения</h2>\r\n<p>Рассмотрим следующий код:</p>\r\n<pre class=\"chili\"><code class=\"java\"><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;SuperClass&nbsp;{&nbsp;&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;start()&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;IOException{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IOException(<span class=\"java__string\">\"Not&nbsp;able&nbsp;to&nbsp;open&nbsp;file\"</span>);&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />}&nbsp;<br /><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;SubClass&nbsp;<span class=\"java__keyword\">extends</span>&nbsp;SuperClass{&nbsp;&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;start()&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;Exception{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;Exception(<span class=\"java__string\">\"Not&nbsp;able&nbsp;to&nbsp;start\"</span>);&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />}&nbsp;<br /></code></pre>\r\n<div>Он не скомпилируется.</div>\r\n<div>Дело в том, что метод start() был переопределен в сабклассе и в сигнатуре был указан более общий класс исключения. Согласно <a href=\"http://java67.blogspot.com/2012/08/what-is-method-overriding-in-java-example-tutorial.html\" target=\"blank\">правилам переопределения методов</a>, это действие не допустимо.</div>\r\n<p>Можно лишь сужать класс исключения:</p>\r\n<pre class=\"chili\"><code class=\"java\"><span class=\"java__keyword\">import</span>&nbsp;java.io.FileNotFoundException;&nbsp;<br /><span class=\"java__keyword\">import</span>&nbsp;java.io.IOException;&nbsp;<br /><span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">class</span>&nbsp;SuperClass&nbsp;{&nbsp;&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;start()&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;IOException{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;IOException(<span class=\"java__string\">\"Not&nbsp;able&nbsp;to&nbsp;open&nbsp;file\"</span>);&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />}&nbsp;<br />&nbsp;<span class=\"java__keyword\">class</span>&nbsp;SubClass&nbsp;<span class=\"java__keyword\">extends</span>&nbsp;SuperClass{&nbsp;&nbsp;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">public</span>&nbsp;<span class=\"java__keyword\">void</span>&nbsp;start()&nbsp;<span class=\"java__keyword\">throws</span>&nbsp;FileNotFoundException{&nbsp;&nbsp;<br /><span class=\"java__com\">//&nbsp;FileNotFoundException&nbsp;-&nbsp;наследник&nbsp;IOException</span>&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"java__keyword\">throw</span>&nbsp;<span class=\"java__keyword\">new</span>&nbsp;FileNotFoundException(<span class=\"java__string\">\"Not&nbsp;able&nbsp;to&nbsp;start\"</span>);&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br />}&nbsp;<br /></code></pre>\r\n<h2>Как бросить проверяемое исключение не обрабатывая его (хак)&nbsp;</h2>\r\n<p>Нет ничего невозможного. С помощью рефлексии и внутреннего API языка java можно творить магию :).</p>\r\n<p><span style=\"color: #cc3333;\">Естественно так писать нельзя</span>, но знать как это делается все же интересно.</p>\r\n<pre style=\"color: #000000; font-size: medium; line-height: normal;\"><span style=\"color: #800000; font-weight: bold;\">public</span> <span style=\"color: #800000; font-weight: bold;\">class</span> UglyDirtyHack<span style=\"color: #800080;\">{</span>\r\n\r\n    <span style=\"color: #800000; font-weight: bold;\">public</span> <span style=\"color: #800000; font-weight: bold;\">static</span> <span style=\"color: #bb7977;\">void</span> main<span style=\"color: #808030;\">(</span><span style=\"color: #bb7977; font-weight: bold;\">String</span><span style=\"color: #808030;\">[</span><span style=\"color: #808030;\">]</span> args<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\r\n\r\n        getUnsafe<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">.</span>throwException<span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">new</span> <span style=\"color: #bb7977; font-weight: bold;\">IOException</span><span style=\"color: #808030;\">(</span><span style=\"color: #0000e6;\">\"This is checked exception\"</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\r\n\r\n    <span style=\"color: #800080;\">}</span>\r\n\r\n    <span style=\"color: #800000; font-weight: bold;\">public</span> <span style=\"color: #800000; font-weight: bold;\">static</span> Unsafe getUnsafe<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\r\n\r\n        Unsafe unsafe <span style=\"color: #808030;\">=</span> <span style=\"color: #800000; font-weight: bold;\">null</span><span style=\"color: #800080;\">;</span>\r\n\r\n        <span style=\"color: #800000; font-weight: bold;\">try</span> <span style=\"color: #800080;\">{</span>\r\n\r\n            <span style=\"color: #bb7977; font-weight: bold;\">Field</span> f <span style=\"color: #808030;\">=</span> Unsafe<span style=\"color: #808030;\">.</span>class<span style=\"color: #808030;\">.</span>getDeclaredField<span style=\"color: #808030;\">(</span><span style=\"color: #0000e6;\">\"theUnsafe\"</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\r\n\r\n            f<span style=\"color: #808030;\">.</span>setAccessible<span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">true</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\r\n\r\n            unsafe <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>Unsafe<span style=\"color: #808030;\">)</span> f<span style=\"color: #808030;\">.</span>get<span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">null</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\r\n\r\n        <span style=\"color: #800080;\">}</span> <span style=\"color: #800000; font-weight: bold;\">catch</span> <span style=\"color: #808030;\">(</span>ReflectiveOperationException e<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\r\n\r\n            <span style=\"color: #bb7977; font-weight: bold;\">System</span><span style=\"color: #808030;\">.</span>out<span style=\"color: #808030;\">.</span>println<span style=\"color: #808030;\">(</span><span style=\"color: #0000e6;\">\"Who cares\"</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\r\n\r\n        <span style=\"color: #800080;\">}</span>\r\n\r\n        <span style=\"color: #800000; font-weight: bold;\">return</span> unsafe<span style=\"color: #800080;\">;</span>\r\n\r\n    <span style=\"color: #800080;\">}</span>\r\n\r\n<span style=\"color: #800080;\">}</span></pre>\r\n<p><span style=\"font-size: 14px; line-height: 1.428571429;\">sun.misc.Unsafe - API позволяющее выполнять &nbsp;с классами, методами и полями действия, недопустимые стандартными средствами языка.</span>Идея заключается в получении системного объекта&nbsp;<span style=\"font-size: 14px; line-height: 1.428571429;\">Unsafe.&nbsp;</span></p>\r\n<p>В примере используется рефлексия для получения объекта&nbsp;<span style=\"font-size: 14px; line-height: 1.428571429;\">Unsafe так как другими средствами это сделать проблематично.&nbsp;</span><span style=\"font-size: 14px; line-height: 1.428571429;\">&nbsp;У класса&nbsp;</span><span style=\"font-size: 14px; line-height: 1.428571429;\">Unsafe приватный конструктор. А если попытаться вызвать статический метод getUnsafe() то будет брошено исключение&nbsp;</span>SecurityException.</p>\r\n<h2>Заключение</h2>\r\n<p>Изначально я хотел сделать себе шпаргалку по иерархии классов исключений и не планировал писать статью. Но получилось так, что шпаргалка выросла в статью :)</p>\r\n<p>Надеюсь она поможет кому-нибудь перед собеседованием, или просто вспомнить/углубить знания :) Спасибо за внимание!</p>','ru',17,'article_b',1,'2016-02-28 19:48:39'),(347,' Access modifiers','en',18,'article_t',1,'2016-02-28 19:50:46'),(348,'Модификаторы доступа','ru',18,'article_t',1,'2016-02-28 19:50:46'),(349,'<h1><span class=\"notranslate\">access Modifiers</span></h1>\r\n<p><span class=\"notranslate\"> To begin with let\'s deal with the access modifiers.</span> <span class=\"notranslate\"> There are only four:</span></p>\r\n<ul>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\"><strong>private</strong> class members are accessible only within the class</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\"><strong>package-private or default (default)</strong> class members are seen inside the package</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\"><strong>protected</strong> class members are available within the package and derived classes</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\"><strong>public</strong> members of a class are available to all</span></span></li>\r\n</ul>\r\n<p><img style=\"line-height: 1.428571429; border-style: solid; margin: 0px;\" src=\"http://s017.radikal.ru/i400/1309/89/8d3fefbab6d1.png\" alt=\"8d3fefbab6d1\" /></p>\r\n<p><span class=\"notranslate\"> <strong>During the inheritance may change access modifiers in the direction of greater visibility.</strong></span></p>\r\n<p><span class=\"notranslate\"> The access modifier from the constructors, methods and fields can be any, but the classes and their units are not so simple.</span> <span class=\"notranslate\"> Class can only be either public, or default, and only one public class may be in the same file.</span> <span class=\"notranslate\"> The block can be only one modifier - default.</span></p>\r\n<h2><span class=\"notranslate\"> Modifiers static, abstract, and final</span></h2>\r\n<h3><span class=\"notranslate\"> Static</span></h3>\r\n<ul>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">It applies to the internal classes, methods, variables, and logical blocks</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Static variables are initialized during class loading</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Static variables are the same for all objects of a class (the same link)</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Static methods can access only static variables</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">For static methods and variables can be referenced via the class name</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Static blocks are executed during class loading</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Not static methods can not be redefined as static</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Local variables can not be declared as static</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Abstract methods can not be static</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Static fields are not serialized (only when implementing Serializable interface)</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Only a static class variables can be passed to the constructor with parameters, the caller through the word super (// parameter //) or this (// parameter //)</span></span></li>\r\n</ul>\r\n<h3><span class=\"notranslate\"> Abstract</span></h3>\r\n<ul>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">It applies only to methods and classes</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">In abstract method is no method body</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">It is the opposite of final: final class can not be inherited, abstract class must be inherited</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">The class must be declared as abstract if:</span></span></li>\r\n</ul>\r\n<ol>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">it contains at least one abstract method</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">it does not provide implementation of the inherited abstract methods</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">it does not provide implementation of the interface methods, the implementation of which he declared</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">We need to ban the creation of instances of the class</span></span></li>\r\n</ol>\r\n<h3><span class=\"notranslate\"> Final</span></h3>\r\n<ul>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">The fields can not be changed, the methods overridden</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Classes can not be inherited</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">This modifier applies only to classes, methods and variables (as well as local variables)</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Arguments methods designated as final, are read-only when you try to change to a compilation error</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Final variables are not initialized by default, they must explicitly assign a value to the declaration or in the constructor, otherwise - compile-time error</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">If the final variable contains a reference to an object, the object can be changed, but the variable will always refer to the same object</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">This also holds true for arrays, because arrays are objects - the array can be changed, and the variable will always refer to the same array</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">If a class is declared final and abstract (mutually exclusive), there will be a compilation error</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Since final class can not be inherited, his methods can never be overridden</span></span></li>\r\n</ul>\r\n<p><span class=\"notranslate\"> <strong>A constructor</strong> can not be static, abstract, or final</span></p>\r\n<h2><span class=\"notranslate\"> Modifiers strictfp, transient, volatile, synchronized, native</span></h2>\r\n<h3><span class=\"notranslate\"> Strictfp</span></h3>\r\n<ul>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Used for methods and classes</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">It ensures the implementation of operations on numbers of type float and double (floating point) on an IEEE 754</span></span></li>\r\n</ul>\r\n<h3><span class=\"notranslate\"> Transient</span></h3>\r\n<ul>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">It applies only for class-level variables (local variables can not be declared as transient)</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Transientperemennye can not be final or static.</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Transientperemennye not serialized</span></span></li>\r\n</ul>\r\n<h3><span class=\"notranslate\"> Volatile</span></h3>\r\n<ul>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">It can only be used with variables</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">It can be used with static variables</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Not used with the final variable - value of the variable declared as volatile, modified by one thread, asynchronously change for other streams</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">It is used in multithreaded applications</span></span></li>\r\n</ul>\r\n<h3><span class=\"notranslate\"> Synchronized</span></h3>\r\n<ul>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">It applies only to methods or parts of methods</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">It used to control access to critical parts of the code, in multi-threaded programs</span></span></li>\r\n</ul>\r\n<h3><span class=\"notranslate\"> Native</span></h3>\r\n<ul>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Used only for methods</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">It indicates that the method is written in another programming language</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Classes in Java use a lot of native methods to increase productivity and access to hardware</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">You can bring / return Java objects from native methods</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">The method signature must end with \";\", the braces will cause a compilation error</span></span></li>\r\n</ul>\r\n<h2><span class=\"notranslate\"> Features in the interfaces</span></h2>\r\n<ul>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">The methods are always public and abstract, even if it is not declared</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">The methods can not be static, final, strictfp, native,</span> private, protected</span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Only variables public static final, even if it is not declared</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Variables can not be strictfp, native, private, protected</span></span></li>\r\n<li><span class=\"notranslate\"> <span style=\"line-height: 1.428571429;\">Can only inherit (extends) the other interface, but does not implement the interface or class (implements).</span></span></li>\r\n</ul>\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"mso-add-space: auto; text-align: justify; margin: 0cm 0cm .0001pt 35.45pt;\"><span class=\"notranslate\"> <span style=\"color: #000000; font-family: Helvetica,sans-serif;\">Put it all together modifiers:</span></span></p>\r\n<table class=\"MsoTableGrid\" style=\"margin-left: 35.45pt; border: none;\" border=\"1\" width=\"527\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr style=\"mso-yfti-irow: 0; mso-yfti-firstrow: yes; page-break-inside: avoid; height: 2.0cm;\">\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt; height: 2.0cm;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\';\">&nbsp;</span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-left: none; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt; mso-rotate: 90; height: 2.0cm;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 5.65pt 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\';\">Class</span></span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-left: none; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt; mso-rotate: 90; height: 2.0cm;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 5.65pt 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\';\">The inner class</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-left: none; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt; mso-rotate: 90; height: 2.0cm;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 5.65pt 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\';\">Variable</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-left: none; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt; mso-rotate: 90; height: 2.0cm;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 5.65pt 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\';\">Method</span></span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-left: none; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt; mso-rotate: 90; height: 2.0cm;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 5.65pt 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\';\">Constructor</span></span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-left: none; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt; mso-rotate: 90; height: 2.0cm;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 5.65pt 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\';\">logical unit</span></span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-fareast-language: RU;\">public</span></span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes (except for local and anonymous classes)</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-fareast-language: RU;\">protected</span></span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span> <span class=\"notranslate\"> <span style=\"color: #00b050; font-family: Helvetica, sans-serif; font-size: 16px; line-height: 1.428571429;\">(except for local and anonymous classes)</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span lang=\"DE\" style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-ansi-language: DE; mso-fareast-language: RU;\">default</span></span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes (for a local variable)</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"color: #00b050; font-family: Helvetica, sans-serif; font-size: 16px;\">Yes</span></span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-fareast-language: RU;\">private</span></span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span> <span class=\"notranslate\"> <span style=\"color: #00b050; font-family: Helvetica, sans-serif; font-size: 16px; line-height: 22px;\">(except for local and anonymous classes)</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-fareast-language: RU;\">final</span></span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes (except anonymous classes)</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes (for a local variable)</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-fareast-language: RU;\">abstract</span></span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes (except anonymous classes)</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12pt; font-family: Helvetica, sans-serif;\"><span style=\"color: #ff0000;\">No</span></span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-fareast-language: RU;\">static</span></span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span> <span class=\"notranslate\"> <span style=\"color: #00b050; font-family: Helvetica, sans-serif; font-size: 16px; line-height: 22px;\">(except for local and anonymous classes)</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-fareast-language: RU;\">native</span></span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-fareast-language: RU;\">transient</span></span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-fareast-language: RU;\">synchronized</span></span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes (only as part of the method)</span></span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-fareast-language: RU;\">volatile</span></span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span lang=\"EN-US\" style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-ansi-language: EN-US; mso-fareast-language: RU;\">strictfp</span></span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"color: #00b050; font-family: Helvetica, sans-serif; font-size: 16px;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Yes</span></span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span class=\"notranslate\"> <span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">No</span></span></p>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>','en',18,'article_b',1,'2016-02-28 19:50:46'),(350,'<p>Для начала разберемся с модификаторами доступа. Их всего четыре:</p>\r\n<ul>\r\n<li><span style=\"line-height: 1.428571429;\"><strong>private</strong> члены класса доступны только внутри класса&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\"><strong>package-private или default (по умолчанию)</strong> члены класса видны внутри пакета</span></li>\r\n<li><span style=\"line-height: 1.428571429;\"><strong>protected</strong> члены класса доступны внутри пакета и в классах-наследниках</span></li>\r\n<li><span style=\"line-height: 1.428571429;\"><strong>public</strong> члены класса доступны всем</span></li>\r\n</ul>\r\n<p><img style=\"line-height: 1.428571429; border-style: solid; margin: 0px;\" src=\"http://s017.radikal.ru/i400/1309/89/8d3fefbab6d1.png\" alt=\"8d3fefbab6d1\" /></p>\r\n<p><strong>Во время наследования возможно изменение модификаторов доступа в сторону БОЛЬШЕЙ видимости.</strong></p>\r\n<p>Модификатор доступа у конструкторов, методов и полей может быть любой, а вот с классами и их блоками не так все просто. Класс может быть только либо public, либо default, причем в одном файле может находиться только один public класс. У блока может быть только один модификатор &ndash; default.</p>\r\n<h2>Модификаторы static, abstract и final</h2>\r\n<h3>Static</h3>\r\n<ul>\r\n<li><span style=\"line-height: 1.428571429;\">Применяется к внутренним классам, методам, переменным и логическим блокам&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Статические переменные инициализируются во время загрузки класса&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Статические переменные едины для всех объектов класса (одинаковая ссылка)&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Статические методы имеют доступ только к статическим переменным&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">К статическим методам и переменным можно обращаться через имя класса&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Статические блоки выполняются во время загрузки класса&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Не static методы не могут быть переопределены как static&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Локальные переменные не могут быть объявлены как static&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Абстрактные методы не могут быть static</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Static поля не сериализуются (только при реализации интерфейса Serializable)</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Только&nbsp;static&nbsp;переменные класса могут быть переданы в конструктор с параметрами, вызывающийся через слово super(//параметр//) или this(//параметр//)</span></li>\r\n</ul>\r\n<h3>Abstract</h3>\r\n<ul>\r\n<li><span style=\"line-height: 1.428571429;\">Применяется только для методов и классов&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">У абстрактных методов нет тела метода&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Является противоположностью final: final класс не может наследоваться, abstract класс обязан наследоваться&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Класс должен быть объявлен как abstract если:&nbsp;</span></li>\r\n</ul>\r\n<ol>\r\n<li><span style=\"line-height: 1.428571429;\">он содержит хотя бы один абстрактный метод&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">он не предоставляет реализацию наследуемых абстрактных методов&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">он не предоставляет реализацию методов интерфейса, реализацию которого он объявил&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">необходимо запретить создание экземпляров класса</span></li>\r\n</ol>\r\n<h3>Final</h3>\r\n<ul>\r\n<li><span style=\"line-height: 1.428571429;\">Поля не могут быть изменены, методы переопределены&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Классы нельзя наследовать&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Этот модификатор применяется только к классам, методам и переменным (также и к локальным переменным)&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Аргументы методов, обозначенные как final, предназначены только для чтения, при попытке изменения будет ошибка компиляции&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Переменные final не инициализируются по умолчанию, им необходимо явно присвоить значение при объявлении или в конструкторе, иначе &ndash; ошибка компиляции&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Если final переменная содержит ссылку на объект, объект может быть изменен, но переменная всегда будет ссылаться на тот же самый объект&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Также это справедливо и для массивов, потому что массивы являются объектами, &ndash; массив может быть изменен, а переменная всегда будет ссылаться на тот же самый массив&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Если класс объявлен final и abstract (взаимоисключающие понятия), произойдет ошибка компиляции&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Так как final класс не может наследоваться, его методы никогда не могут быть переопределены</span></li>\r\n</ul>\r\n<p><strong>Конструктор</strong> не может быть static, abstract или final</p>\r\n<h2>Модификаторы strictfp, transient, volatile, synchronized, native</h2>\r\n<h3>Strictfp</h3>\r\n<ul>\r\n<li><span style=\"line-height: 1.428571429;\">Применяется для методов и классов&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Обеспечивает выполнение операций над числами типа float и double (с плавающей запятой) по стандарту IEEE 754</span></li>\r\n</ul>\r\n<h3>Transient</h3>\r\n<ul>\r\n<li><span style=\"line-height: 1.428571429;\">Применяется только для переменных уровня класса (локальные переменные не могут быть объявлены как transient)&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Transientпеременные могут не быть final или static.&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Transientпеременные не сериализуются</span></li>\r\n</ul>\r\n<h3>Volatile</h3>\r\n<ul>\r\n<li><span style=\"line-height: 1.428571429;\">Используется только с переменными&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Может использоваться со static переменными&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Не используется с final переменными - Значение переменной, объявленной как volatile, измененное одним потоком, асинхронно меняется и для других потоков&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Применяется в многопоточных приложениях</span></li>\r\n</ul>\r\n<h3>Synchronized</h3>\r\n<ul>\r\n<li><span style=\"line-height: 1.428571429;\">Применяется только к методам или частям методов&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Используется для контроля доступа к важным частями кода в многопоточных программах</span></li>\r\n</ul>\r\n<h3>Native</h3>\r\n<ul>\r\n<li><span style=\"line-height: 1.428571429;\">Используется только для методов&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Обозначает, что метод написан на другом языке программирования&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Классы в Java используют много native методов для повышения производительности и доступа к аппаратным средствам&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Можно предавать/возвращать Java объекты из native методов&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Сигнатура метода должна заканчиваться &ldquo;;&rdquo;, фигурные скобки вызовут ошибку компиляции</span></li>\r\n</ul>\r\n<h2>Особенности в интерфейсах</h2>\r\n<ul>\r\n<li><span style=\"line-height: 1.428571429;\">Методы всегда public и abstract, даже если это не объявлено</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Методы не могут быть static, final, strictfp, native, private, protected&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Переменные только public static final, даже если это не объявлено&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Переменные не могут быть strictfp, native, private, protected&nbsp;</span></li>\r\n<li><span style=\"line-height: 1.428571429;\">Может только наследовать (extends) другой интерфейс, но не реализовывать интерфейс или класс (implements).</span></li>\r\n</ul>\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"mso-add-space: auto; text-align: justify; margin: 0cm 0cm .0001pt 35.45pt;\"><span style=\"color: #000000; font-family: Helvetica,sans-serif;\">Соберем все модификаторы вместе:</span></p>\r\n<table class=\"MsoTableGrid\" style=\"margin-left: 35.45pt; border: none;\" border=\"1\" width=\"527\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr style=\"mso-yfti-irow: 0; mso-yfti-firstrow: yes; page-break-inside: avoid; height: 2.0cm;\">\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt; height: 2.0cm;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\';\">&nbsp;</span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-left: none; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt; mso-rotate: 90; height: 2.0cm;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 5.65pt 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\';\">Класс</span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-left: none; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt; mso-rotate: 90; height: 2.0cm;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 5.65pt 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\';\">Внутренний класс</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-left: none; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt; mso-rotate: 90; height: 2.0cm;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 5.65pt 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\';\">Переменная</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-left: none; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt; mso-rotate: 90; height: 2.0cm;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 5.65pt 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\';\">Метод</span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-left: none; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt; mso-rotate: 90; height: 2.0cm;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 5.65pt 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\';\">Конструктор</span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-left: none; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt; mso-rotate: 90; height: 2.0cm;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 5.65pt 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\';\">Логический блок</span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-fareast-language: RU;\">public</span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да (кроме локальных и анонимных классов)</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-fareast-language: RU;\">protected</span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да&nbsp;</span><span style=\"color: #00b050; font-family: Helvetica, sans-serif; font-size: 16px; line-height: 1.428571429;\">(кроме локальных и анонимных классов)</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span lang=\"DE\" style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-ansi-language: DE; mso-fareast-language: RU;\">default</span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да&nbsp;</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да (и для локальной переменной)</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"color: #00b050; font-family: Helvetica, sans-serif; font-size: 16px;\">Да</span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-fareast-language: RU;\">private</span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да&nbsp;</span><span style=\"color: #00b050; font-family: Helvetica, sans-serif; font-size: 16px; line-height: 22px;\">(кроме локальных и анонимных классов)</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-fareast-language: RU;\">final</span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да (кроме анонимных классов)</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да (и для локальной переменной)</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-fareast-language: RU;\">abstract</span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да (кроме анонимных классов)</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12pt; font-family: Helvetica, sans-serif;\"><span style=\"color: #ff0000;\">Нет</span></span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-fareast-language: RU;\">static</span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да&nbsp;</span><span style=\"color: #00b050; font-family: Helvetica, sans-serif; font-size: 16px; line-height: 22px;\">(кроме локальных и анонимных классов)</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-fareast-language: RU;\">native</span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-fareast-language: RU;\">transient</span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-fareast-language: RU;\">synchronized</span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да (только как часть метода)</span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-fareast-language: RU;\">volatile</span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td style=\"width: 83.35pt; border: solid black 1.0pt; mso-border-themecolor: text1; border-top: none; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-alt: solid black .5pt; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"111\">\r\n<p class=\"MsoNormalCxSpLast\" style=\"margin-bottom: 0.0001pt; text-align: justify;\"><span lang=\"EN-US\" style=\"font-size: 12.0pt; font-family: \'Arial\',\'sans-serif\'; mso-fareast-font-family: \'Times New Roman\'; mso-ansi-language: EN-US; mso-fareast-language: RU;\">strictfp</span></p>\r\n</td>\r\n<td style=\"width: 42.55pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"57\">\r\n<p class=\"MsoListParagraphCxSpFirst\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 77.95pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"104\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"color: #00b050; font-family: Helvetica, sans-serif; font-size: 16px;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 35.45pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"47\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: #00b050;\">Да</span></p>\r\n</td>\r\n<td style=\"width: 49.6pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"66\">\r\n<p class=\"MsoListParagraphCxSpMiddle\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n<td style=\"width: 70.85pt; border-top: none; border-left: none; border-bottom: solid black 1.0pt; mso-border-bottom-themecolor: text1; border-right: solid black 1.0pt; mso-border-right-themecolor: text1; mso-border-top-alt: solid black .5pt; mso-border-top-themecolor: text1; mso-border-left-alt: solid black .5pt; mso-border-left-themecolor: text1; mso-border-alt: solid black .5pt; mso-border-themecolor: text1; padding: 0cm 5.4pt 0cm 5.4pt;\" valign=\"top\" width=\"94\">\r\n<p class=\"MsoListParagraphCxSpLast\" style=\"margin: 0cm 0cm 0.0001pt; text-align: justify;\"><span style=\"font-size: 12.0pt; font-family: \'Helvetica\',\'sans-serif\'; color: red;\">Нет</span></p>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>','ru',18,'article_b',1,'2016-02-28 19:50:46'),(351,'Полезная штука','ru',35,'comment',1,'2016-02-28 20:29:04'),(352,'Create an application in Android style','en',19,'article_t',1,'2016-02-28 20:32:35'),(353,'Создание приложения в стиле Android','ru',19,'article_t',1,'2016-02-28 20:32:35'),(354,'<h1 class=\"title\"><span class=\"notranslate\"><span class=\"post_title\">Create an application in Android style</span> <a class=\"flag flag_sandbox\" title=\"Go to the sandbox\" href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=https://geektimes.ru/sandbox/&amp;usg=ALkJrhjgf1pr5nEYORbvJ2IF_5Zo_iBUAQ\">of the sandbox</a></span></h1>\r\n<div class=\"hubs\"><span class=\"notranslate\"> <a class=\"hub \" title=\"You are not subscribed to this hub\" href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=https://geektimes.ru/hub/android/&amp;usg=ALkJrhiYGCpGOKYryAZ_8pFgBU-OzdQnfw\">Android</a></span></div>\r\n<div class=\"content html_format\"><span class=\"notranslate\"> Often, even the interface is very popular All Android-applications designed somehow, and it seems that most developers have not even heard of the User Interface Guidelines.</span> <span class=\"notranslate\"> But the following recommendations are not very difficult, and sometimes even saves development time.</span> <span class=\"notranslate\"> To show that this is indeed the case, I suggest a walk on several key elements of the design application interface on the example of a slightly advanced &laquo;Hello World&raquo;.</span> <br /> <span class=\"notranslate\"> The article is designed for novice Android-developers.</span> <span class=\"notranslate\"> The source code can be downloaded at the link below, and explanations will concern:</span> <br />\r\n<ul>\r\n<li><span class=\"notranslate\"> Creating pop-up menu</span></li>\r\n<li><span class=\"notranslate\"> Design settings window</span></li>\r\n<li><span class=\"notranslate\"> Works with Nine-patch graphics</span></li>\r\n</ul>\r\n<br /><a name=\"habracut\"></a><br />\r\n<h4><span class=\"notranslate\"> Preliminary preparation</span></h4>\r\n<br /> <span class=\"notranslate\"> 1. Create an application AdvancedHelloWorld.</span> <span class=\"notranslate\"> For programs that do not use spetsefichesky functionality specific OS version, I prefer to put BuildTarget - Android 1.6, and Min SDK Version - 3. In this case, the division of resources will work for the screen density (at hdpi, mdpi, ldpi), but Android users 1.5 will not go away.</span> <br /><img src=\"https://habrastorage.org/storage/habraeffect/8c/81/8c8140359d138e4a9cdae39e5fcd751e.png\" alt=\"image\" /><br /> <span class=\"notranslate\"> 2. In the res / layout / main.xml do a single button &laquo;Say hello&raquo;.</span> <br /> <span class=\"notranslate\"> 3. With the help of a wonderful project Android Asset Studio makes a nice icon.</span> <br /> <span class=\"notranslate\"> 4. As a handler, click the button write code that will show Toast-message with the phrase &laquo;Hello World&raquo;.</span> <br /><br />\r\n<h5><span class=\"notranslate\"> On Android Asset Studio</span></h5>\r\n<br /> <span class=\"notranslate\"> Open source online project, the value of which can hardly be overestimated.</span> <span class=\"notranslate\"> It allows you to quickly create application icons (launcher icons), menu icons, bookmarks and alerts.</span> <span class=\"notranslate\"> For he asks 6 Chrome, other browsers, some elements are not working.</span> <span class=\"notranslate\"> Link to the article.</span> <br /><br />\r\n<h5><span class=\"notranslate\"> Note on resources</span></h5>\r\n<br /> <span class=\"notranslate\"> In my view, the most rational choice - is to use a separate set of graphics for hdpi-devices and individual - for all the rest, in the resolution, adapted for mdpi.</span> <span class=\"notranslate\"> Yes, we do not use the possibility of adapting the ldpi, but these devices are relatively few and you can leave the full adaptation to the \"snack\", when all the graphic design has already settled.</span> <span class=\"notranslate\"> In any case, as we have declared support for Android 1.5, folder drawable should be isplzuemye all graphic elements.</span> <span class=\"notranslate\"> The rest - as desired.</span> <br /><br />\r\n<h4><span class=\"notranslate\"> Pop-up menu</span></h4>\r\n<br /><br /> <span class=\"notranslate\"> Menu are described as not difficult to guess, in the xml files.</span> <span class=\"notranslate\"> Make such a file one for our main window: res \\ menu \\ main_menu.xml</span> <br /><br /> <code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; <br /> &lt;menu xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt; <br /> &lt;item android:id=\"@+id/menu_preferences\" <br /> android:icon=\"@drawable/ic_menu_preferences\" <br /> android:title=\"@string/menu_preferences\" /&gt; <br /> &lt;item android:id=\"@+id/menu_theme\" <br /> android:icon=\"@drawable/ic_menu_theme\" <br /> android:title=\"@string/menu_theme\" /&gt; <br /> &lt;item android:id=\"@+id/menu_close\" <br /> android:icon=\"@drawable/ic_menu_close_clear_cancel\" <br /> android:title=\"@string/menu_close\" /&gt; <br /> &lt;/menu&gt; <br /> <br /></code> <br /><br /> <span class=\"notranslate\"> Two points:</span> <br /> <span class=\"notranslate\"> If the number of menu items is more than 6, 6 and the following elements are combined in an additional menu.</span> <span class=\"notranslate\"> An example can be viewed in a standard browser.</span> <br /> <span class=\"notranslate\"> Menus can be nested, but not more than one level.</span> <span class=\"notranslate\"> To describe the sub-menu <strong>menu</strong> tag is added as a child to the element, which will \"unfold\".</span> <br /><br /><br /> <span class=\"notranslate\"> When you create a menu, the first thing is to look for the icon in the standard set.</span> <span class=\"notranslate\"> All they have in due SDK - android-sdk-windows \\ platforms \\ android-1.6 \\ data \\ res \\ drawable \\ ic_menu _ * png.</span> <br /> <span class=\"notranslate\"> Icon setting and exit to pick up is not difficult, but to illustrate, I added a menu item \'theme\', which will switch the background from black to white and back.</span> <span class=\"notranslate\"> Even with very basic skills in computer graphics, it is easy to draw a template for this item.</span> <span class=\"notranslate\"> For example:</span> <br /><img src=\"https://habrastorage.org/storage/habraeffect/6d/6d/6d6d9353513044c6b0ba6ca5e9452c4e.png\" alt=\"image\" /><br /> <span class=\"notranslate\"> With the help of the same Android Asset Studio icon will turn out quite good:</span> <br /><img src=\"https://habrastorage.org/storage/habraeffect/b8/7b/b87b13f1cd4c72d16f10e155f56ab124.png\" alt=\"image\" /><br /><br /> <span class=\"notranslate\"> The actual creation of the menu items takes place in onCreateOptionsMenu:</span> <br /> <code>@Override <br /> public boolean onCreateOptionsMenu(Menu menu) { <br /> MenuInflater inflater = getMenuInflater(); <br /> inflater.inflate(R.menu.main_menu, menu); <br /> return true; <br /> } <br /></code> <br /><br /> <span class=\"notranslate\"> presses Processing - in onOptionsItemSelected:</span> <br /><br /> <code>@Override <br /> public boolean onOptionsItemSelected(MenuItem item) { <br /> switch (item.getItemId()) { <br /> case R.id.menu_preferences: <br /> ... <br /> default: <br /> return super.onOptionsItemSelected(item); <br /> } <br /> } <br /></code> <br /><br />\r\n<h4><span class=\"notranslate\"> Design settings window</span></h4>\r\n<br /> <span class=\"notranslate\"> Again, the main work in the xml.</span> <span class=\"notranslate\"> The res \\ xml will build settings.xml:</span> <br /><br /> <code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; <br /> &lt;PreferenceScreen <br /> xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt; <br /> &lt;PreferenceCategory <br /> android:title=\"@string/settings_general\"&gt; <br /> &lt;CheckBoxPreference <br /> android:key=\"center_message\" <br /> android:title=\"@string/center_message\" <br /> android:summary=\"@string/center_message_summary\" <br /> android:persistent=\"true\" <br /> android:defaultValue=\"true\"/&gt; <br /> &lt;EditTextPreference <br /> android:key=\"text_message\" <br /> android:title=\"@string/text_message\" <br /> android:summary=\"@string/text_message_summary\" <br /> android:defaultValue=\"@string/hello_world\" <br /> android:persistent=\"true\"/&gt; <br /> &lt;/PreferenceCategory&gt; <br /> &lt;/PreferenceScreen&gt; <br /></code> <br /><br /> <span class=\"notranslate\"> The set of supported configuration is not very wide, but it will cover basic needs.</span> <span class=\"notranslate\"> By setting the flag &laquo;persistent&raquo; we do not even have to encode the save / load.</span> <span class=\"notranslate\"> Suffice it to read the required value from SharedPreferences:</span> <br /><br /> <code>SharedPreferences settings = PreferenceManager.getDefaultSharedPreferences(context); <br /> boolean bCenter = settings.getBoolean(\"center_message\", true);</code> <br /> <br /> <span class=\"notranslate\"> As additional pleasant moments can be noted, depending (android: dependency), which allow to \"turn on\" certain items only if marked \"driving\" element, as well as simple to work with nested sets, which appear as separate windows.</span> <br /> <span class=\"notranslate\"> To create a settings window derived class PreferenceActivity, in which the designer and read our xml-prototype:</span> <br /> <code>addPreferencesFromResource(R.xml.settings);</code> <br /> <br /> <span class=\"notranslate\"> PreferenceActivity poorly to styling.</span> <span class=\"notranslate\"> You can, of course, for the corresponding tag in the AndroidManifest.xml add the android: theme = \"@ android: style / Theme.Light\", but for nested settings get porridge.</span> <span class=\"notranslate\"> The discussion of this problem on Stackoverflow boils down to the idea that, in general, it is better to leave things as they are, on a black background.</span> <br /><br />\r\n<h4><span class=\"notranslate\"> Working with the Nine-patch graphics</span></h4>\r\n<br /><br /> <span class=\"notranslate\"> Nine-patch - is the standard method to make graphics in Android-application regardless of the resolution and screen size.</span> <span class=\"notranslate\"> In fact, this is a common image format png with odnopiskselnoy overhead frame.</span> <span class=\"notranslate\"> For proper operation of this frame in the SDK includes a special utility draw9patch.</span> <span class=\"notranslate\"> Black line 1 pixel wide on the top and on the left marked area to be duplicated when zoomed.</span> <span class=\"notranslate\"> right and bottom lines define a \"workspace.\"</span> <span class=\"notranslate\"> For the usual buttons, for example, this is the place for text.</span> <br /> <span class=\"notranslate\"> In words hard enough to explain the functionality of 9patch, so it\'s best to experiment and see all the more so when editing areas 9patch can immediately see the result in the preview window.</span> <span class=\"notranslate\"> Here is the background standard button in the editor:</span> <br /><img src=\"http://habreffect.ru/files/5af/f662e1886/9patch.png\" alt=\"image\" /><br /> <span class=\"notranslate\"> To make the training button AdvancedHelloWorld precarious by preparing 3 9patch-image - for normal button pressed and the focus button.</span> <span class=\"notranslate\"> Occupation quite tedious, but a great opportunity.</span> <br /> <span class=\"notranslate\"> An important point: all 9patch-image must have the extension .9.png, otherwise our application does not recognize that the image can be scaled according to the rules 9patch.</span> <span class=\"notranslate\"> It has one limitation: in the resource folder can not be both two files with the same name and the extension .png and .9.png (eg, button.png button.9.png and conflict, as in fact have the same resource name - button) .</span> <br /><br />\r\n<h4><span class=\"notranslate\"> useful links</span></h4>\r\n<br /> <span class=\"notranslate\"> Android Asset Studio on GoogleCode: <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://android-ui-utils.googlecode.com/hg/asset-studio/dist/index.html&amp;usg=ALkJrhjb_-10gnUlWGYV9_H1eS1KPkmxkQ\">http://android-ui-utils.googlecode.com/hg/asset-studio/dist/index.html</a></span> <br /> <span class=\"notranslate\"> Official documentation on creating submenus: <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://developer.android.com/guide/topics/ui/menus.html&amp;usg=ALkJrhhlAey4KT6s7zMmUWGdD270B_LnZQ#submenu\">http://developer.android.com/guide/topics/ui/menus.html#submenu</a></span> <br /> <span class=\"notranslate\"> An example of a complete list of types of settings: <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.kaloer.com/android-preferences&amp;usg=ALkJrhjx0tirIQj0OvMNmpUmEVxjYH-eaA\">http://www.kaloer.com/android-preferences</a></span> <br /> <span class=\"notranslate\"> stylization problem</span> настроек: <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://stackoverflow.com/questions/2615528/preferenceactivity-and-theme-not-applying&amp;usg=ALkJrhgiAVKJbhB1-WI4WQdo7NTPriUVxQ\">http://stackoverflow.com/questions/2615528/preferenceactivity-and-theme-not-applying</a> <br /><br /> <span class=\"notranslate\"> <a href=\"http://mywebprojects.com.ua/AdvancedHelloWorld.zip\">Source code</a> .</span></div>','en',19,'article_b',1,'2016-02-28 20:32:35'),(355,'<h1 class=\"title\"><span class=\"post_title\">Создание приложения в стиле Android</span> <a class=\"flag flag_sandbox\" title=\"Перейти в песочницу\" href=\"https://geektimes.ru/sandbox/\">из песочницы</a></h1>\r\n<p>&nbsp;</p>\r\n<div class=\"hubs\"><a class=\"hub \" title=\"Вы не подписаны на этот хаб\" href=\"https://geektimes.ru/hub/android/\">Android</a></div>\r\n<p>Часто, интерфейс даже очень популярных Android-приложений спроектирован кое-как и складывается впечатление, что большинство разработчиков даже не слышало о User Interface Guidelines. Но следование рекомендациям не очень сложно, а иногда даже позволяет экономить время на разработку. Для того, чтобы показать, что это действительно так, я предлагаю пройтись по нескольким ключевым элементам проектирования интерфейса приложения на примере слегка продвинутого &laquo;Hello World&raquo;.<br /> Статья расчитана на начинающих Android-разработчиков. Исходный код можно скачать по ссылке в конце, а пояснения будут касаться:</p>\r\n<ul>\r\n<li>Создания всплывающего меню</li>\r\n<li>Проектирования окна настроек</li>\r\n<li>Работы с Nine-patch graphics</li>\r\n</ul>\r\n<p><br /> <a name=\"habracut\"></a></p>\r\n<h4>Предварительная подготовка</h4>\r\n<p><br /> 1. Создаем приложение AdvancedHelloWorld. Для программ, которые не используют спецефическую функциональность определенной версии ОС, я предпочитаю ставить BuildTarget &mdash; Android 1.6, а Min SDK Version &mdash; 3. В этом случае будет работать разделение ресурсов по плотности экрана (на hdpi, mdpi, ldpi), но и пользователи Android 1.5 не останутся в стороне.<br /> <img src=\"https://habrastorage.org/storage/habraeffect/8c/81/8c8140359d138e4a9cdae39e5fcd751e.png\" alt=\"image\" /><br /> 2. В res/layout/main.xml делаем одну кнопку &laquo;Say hello&raquo;. <br /> 3. С помощью замечательного проекта Android Asset Studio делаем приятную иконку. <br /> 4. В качестве обработчика щелчка по кнопке пишем код, который покажет Toast-сообщение с фразой &laquo;Hello World&raquo;.<br /> </p>\r\n<h5>Об Android Asset Studio</h5>\r\n<p><br /> Open source онлайн проект, ценность которого сложно переоценить. Позволяет быстро создавать иконки приложения (launcher icons), иконки меню, закладок и оповещения. Для работы он просит Chrome 6, в других браузерах некоторые элементы не работают. Ссылка в конце статьи.<br /> </p>\r\n<h5>Замечание по поводу ресурсов</h5>\r\n<p><br /> На мой взгляд, наиболее рациональный выбор &mdash; это использование отдельного набора графики для hdpi-устройств и отдельного &mdash; для всех остальных, в разрешении, адаптированном под mdpi. Да, мы не используем возможность адаптации под ldpi, но этих устройств сравнительно немного и можно оставить полную адаптацию на &laquo;закуску&raquo;, когда все графическое оформление уже устоялось. В любом случае, поскольку мы задекларировали поддержку Android 1.5, в папке drawable должны быть все испльзуемые графические элементы. Остальное &mdash; по желанию.<br /> </p>\r\n<h4>Всплывающее меню</h4>\r\n<p><br /> <br /> Меню описываются, как не сложно догадаться, в xml файлах. Сделаем один такой файл для нашего главного окна: res\\menu\\main_menu.xml<br /> <br /> <code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;<br /> &lt;menu xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;<br /> &lt;item android:id=\"@+id/menu_preferences\"<br /> android:icon=\"@drawable/ic_menu_preferences\"<br /> android:title=\"@string/menu_preferences\" /&gt; <br /> &lt;item android:id=\"@+id/menu_theme\"<br /> android:icon=\"@drawable/ic_menu_theme\"<br /> android:title=\"@string/menu_theme\" /&gt; <br /> &lt;item android:id=\"@+id/menu_close\"<br /> android:icon=\"@drawable/ic_menu_close_clear_cancel\"<br /> android:title=\"@string/menu_close\" /&gt;<br /> &lt;/menu&gt;<br /> <br /> </code><br /> <br /> Два момента:<br /> Если количество пунктов меню больше 6, 6-й и следующие элементы объединяются в дополнительное меню. Пример можно посмотреть в стандартном браузере.<br /> Меню может быть вложенным, но не более одного уровня. Для описания вложенного меню добавляется тег <strong>menu</strong> в качестве дочернего к тому элементу, который будет &laquo;разворачиваться&raquo;.<br /> <br /> <br /> При создании меню первым делом стоит поискать иконки в стандартном наборе. Все они есть в установленном SDK &mdash; android-sdk-windows\\platforms\\android-1.6\\data\\res\\drawable\\ic_menu_*.png<br /> Иконку настройки и выхода подобрать не сложно, но, для иллюстрации, я добавил пункт меню &laquo;тема&raquo;, который будет переключать фон с черного на белый и назад. Даже обладая совсем базовыми навыками в компьютерной графике, несложно нарисовать шаблон и для этого пункта. Например:<br /> <img src=\"https://habrastorage.org/storage/habraeffect/6d/6d/6d6d9353513044c6b0ba6ca5e9452c4e.png\" alt=\"image\" /><br /> С помощью все того же Android Asset Studio получится вполне неплохая иконка:<br /> <img src=\"https://habrastorage.org/storage/habraeffect/b8/7b/b87b13f1cd4c72d16f10e155f56ab124.png\" alt=\"image\" /><br /> <br /> Фактическое создание пунктов меню происходит в onCreateOptionsMenu:<br /> <code> @Override<br /> public boolean onCreateOptionsMenu(Menu menu) {<br /> MenuInflater inflater = getMenuInflater();<br /> inflater.inflate(R.menu.main_menu, menu);<br /> return true;<br /> }<br /> </code><br /> <br /> Обработка нажатий &mdash; в onOptionsItemSelected:<br /> <br /> <code>@Override<br /> public boolean onOptionsItemSelected(MenuItem item) {<br /> switch (item.getItemId()) {<br /> case R.id.menu_preferences:<br /> ...<br /> default:<br /> return super.onOptionsItemSelected(item);<br /> }<br /> }<br /> </code><br /> </p>\r\n<h4>Проектирование окна настроек</h4>\r\n<p><br /> И снова, основная работа в xml. В res\\xml создем settings.xml:<br /> <br /> <code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;<br /> &lt;PreferenceScreen <br /> xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;<br /> &lt;PreferenceCategory<br /> android:title=\"@string/settings_general\"&gt;<br /> &lt;CheckBoxPreference<br /> android:key=\"center_message\"<br /> android:title=\"@string/center_message\"<br /> android:summary=\"@string/center_message_summary\"<br /> android:persistent=\"true\"<br /> android:defaultValue=\"true\"/&gt; <br /> &lt;EditTextPreference<br /> android:key=\"text_message\"<br /> android:title=\"@string/text_message\"<br /> android:summary=\"@string/text_message_summary\"<br /> android:defaultValue=\"@string/hello_world\"<br /> android:persistent=\"true\"/&gt; <br /> &lt;/PreferenceCategory&gt;<br /> &lt;/PreferenceScreen&gt; <br /> </code><br /> <br /> Набор поддерживаемых настроек не очень широкий, но основные потребности он покроет. Устанавливая флаг &laquo;persistent&raquo; нам даже не придется кодировать сохранение/загрузку. Достаточно прочитать нужное значение из SharedPreferences:<br /> <br /> <code> SharedPreferences settings = PreferenceManager.getDefaultSharedPreferences(context);<br /> boolean bCenter = settings.getBoolean(\"center_message\", true);</code><br /> <br /> В качестве дополнительных приятных моментов можно отметить зависимости (android:dependency), которые позволяют &laquo;включать&raquo; определенные пункты только в случае отмеченного &laquo;ведущего&raquo; элемента, а также простую работу с вложенными наборами, которые в приложении выглядят как отдельные окна.<br /> Для окна настроек создается свой класс-наследник PreferenceActivity, в конструкторе которого и считывается наш xml-прототип:<br /> <code> addPreferencesFromResource(R.xml.settings);</code><br /> <br /> PreferenceActivity плохо поддается стилизации. Можно, конечно, для соответствующего тэга в AndroidManifest.xml добавить android:theme=\"@android:style/Theme.Light\", но для вложенных настроек получится каша. Обсуждение этой проблемы на Stackoverflow сводится к мысли, что, в общем случае, лучше оставлять все как есть, на черном фоне.<br /> </p>\r\n<h4>Работа с Nine-patch graphics</h4>\r\n<p><br /> <br /> Nine-patch &mdash; это стандартный метод, позволяющий сделать графику в Android-приложении независимой от разрешения и размера экрана. По сути, это обычное изображение в формате png с однописксельной служебной рамкой. Для правильной работы с этой рамкой в состав SDK входит специальная утилита draw9patch. Черной линией толщиной в 1 пиксель сверху и слева отмечается область, которая будет дублироваться при увеличении изображения. Линии справа и снизу определяют &laquo;рабочую область&raquo;. Для обычной кнопки, например, это место для текста. <br /> На словах достаточно трудно объяснить возможности 9patch, поэтому лучше экспериментировать и смотреть, тем более, что при редактировании областей 9patch можно сразу видеть результат в окне предпросмотра. Вот как выглядит фон стандартной кнопки в редакторе:<br /> <img src=\"http://habreffect.ru/files/5af/f662e1886/9patch.png\" alt=\"image\" /><br /> Для тренировки сделаем кнопку в AdvancedHelloWorld нестандартной, подготовив 3 9patch-изображения &mdash; для обычной кнопки, нажатого состояния и кнопки в фокусе. Занятие достаточно нудное, но открывает большие возможности.<br /> Важный момент: все 9patch-изображения должны иметь расширение .9.png, иначе наше приложение не узнает, что изображение можно масштабировать по правилам 9patch. Отсюда еще одно ограничение: в папке ресурсов не может быть одновременно двух файлов с одинаковым именем и расширениями .png и .9.png (например, button.png и button.9.png конфликтуют, так как фактически имеют одинаковое имя ресурса &mdash; button).<br /> </p>\r\n<h4>Полезные ссылки</h4>\r\n<p><br /> Android Asset Studio на Googlecode: <a href=\"http://android-ui-utils.googlecode.com/hg/asset-studio/dist/index.html\">http://android-ui-utils.googlecode.com/hg/asset-studio/dist/index.html</a><br /> Официальная документация по созданию вложенных меню: <a href=\"http://developer.android.com/guide/topics/ui/menus.html#submenu\">http://developer.android.com/guide/topics/ui/menus.html#submenu</a><br /> Пример с полным перечнем типов настроек: <a href=\"http://www.kaloer.com/android-preferences\">http://www.kaloer.com/android-preferences</a><br /> Проблема стилизации настроек: <a href=\"http://stackoverflow.com/questions/2615528/preferenceactivity-and-theme-not-applying\">http://stackoverflow.com/questions/2615528/preferenceactivity-and-theme-not-applying</a><br /> <br /> <a href=\"http://mywebprojects.com.ua/AdvancedHelloWorld.zip\">Исходные коды</a>.</p>','ru',19,'article_b',1,'2016-02-28 20:32:35'),(356,'Orientation','en',20,'article_t',1,'2016-02-28 20:34:57'),(357,'Ориентация','ru',20,'article_t',1,'2016-02-28 20:34:57'),(358,'<h2 id=\"intro\" class=\"text-warning\"><span class=\"notranslate\">Introduction</span></h2>\r\n<p><span class=\"notranslate\"> When the first portable device designed - PDAs and smartphones, it was taken as a basis for a desktop operating system and mobile device under dopilivat.</span> <span class=\"notranslate\"> The extra features were removed and some added features.</span> <span class=\"notranslate\"> But it is once completely overlooked, that, unlike the bulky monitors and notebook displays, handheld devices can be rotated in the hands.</span> <span class=\"notranslate\"> The first devices were not able to change the screen orientation.</span> <span class=\"notranslate\"> Some programmers independently began to create programs that are able to switch to different modes.</span> <span class=\"notranslate\"> Then this opportunity to become included in the machine settings.</span> <span class=\"notranslate\"> Later machines have learned to determine the orientation of the screen.</span></p>\r\n<p><span class=\"notranslate\"> In total there are two modes - portrait and landscape.</span> <span class=\"notranslate\"> On most phones, the default portrait mode (as in the passport).</span> <span class=\"notranslate\"> Landscape mode is familiar to us by conventional monitors.</span></p>\r\n<p><span class=\"notranslate\"> Consider the following case.</span> <span class=\"notranslate\"> Suppose you have an application has a single text field, and six buttons.</span> <span class=\"notranslate\"> It feels good.</span></p>\r\n<p><img title=\"\" src=\"http://developer.alexanderklimov.ru/android/images/orientation1.png\" alt=\"Портретный режим\" width=\"225\" height=\"400\" border=\"0\" /></p>\r\n<p><span class=\"notranslate\"> But if we turn the device 90 degrees (for the emulator you need to press the key combination Ctrl + F11), both immediately found the problem.</span> <span class=\"notranslate\"> The fifth button is visible part, and the sixth was all out of sight.</span> <span class=\"notranslate\"> Disorder!</span></p>\r\n<p><img title=\"\" src=\"http://developer.alexanderklimov.ru/android/images/orientation2.png\" alt=\"Альбомный режим\" width=\"400\" height=\"225\" border=\"0\" /></p>\r\n<p><span class=\"notranslate\"> To avoid such problems, it is necessary to somehow put together on another key.</span> <span class=\"notranslate\"> For example, do not place them in a row one after the other, and divided into pairs.</span> <span class=\"notranslate\"> We use container <strong>TableLayout.</strong></span> <span class=\"notranslate\"> With it, we can split the buttons into two columns and put them in three rows.</span></p>\r\n<p><span class=\"notranslate\"> For this operation, we need to make a few important steps.</span> <span class=\"notranslate\"> First you need to create a new subfolder in the folder <strong>res.</strong></span> <span class=\"notranslate\"> Select the <strong>res</strong> folder, call it from the context menu and subsequently choose the <strong>New |</strong></span> <span class=\"notranslate\"> <strong>Android resource directory.</strong></span> <span class=\"notranslate\"> In the dialog box, from the drop down list <strong>Resource type:</strong> choose the <strong>layout.</strong></span> <span class=\"notranslate\"> In the list of <strong>Available qualifiers:</strong> <strong>Orientation</strong> find the item and drag it to the right part of the <strong>Chosen qualifiers:</strong> using buttons with double arrows.</span> <span class=\"notranslate\"> By default, you will have the name of the folder <strong>layout-port</strong> in the first line <strong>Directory Name:.</strong></span> <span class=\"notranslate\"> But we need a landscape option, so the drop-down list, select <strong>Screen orientation</strong> <strong>Landscape.</strong></span> <span class=\"notranslate\"> Now the folder name will be <strong>layout-land.</strong></span></p>\r\n<p><img src=\"http://developer.alexanderklimov.ru/android/images/orientation3.png\" alt=\"layout-land\" /></p>\r\n<p><span class=\"notranslate\"> You can do without the help of the wizard, create a folder directly via the menu <strong>New |</strong></span> <span class=\"notranslate\"> <strong>Directory.</strong></span> <span class=\"notranslate\"> This method is suitable for experienced developers who know how to name the folder.</span> <span class=\"notranslate\"> It is important to remember that the name is not given arbitrarily, namely in such a <strong>layout-land.</strong></span> <span class=\"notranslate\"> According <strong>-land</strong> suffix system understands that we are talking about the new regime.</span> <span class=\"notranslate\"> Now we have to create in the Create a new XML-file <strong>activity_main.xml</strong> folder.</span> <span class=\"notranslate\"> Call the context menu in <strong>layout-land</strong> folder and select <strong>New</strong> Team <strong>|</strong></span> <span class=\"notranslate\"> <strong>Layout Resource File.</strong></span> <span class=\"notranslate\"> In assigning the name <strong>activity_main.xml</strong> dialog box, which must match the name of an existing file.</span> <span class=\"notranslate\"> In the second field enter <strong>LinearLayout,</strong> as you enter the tooltip will appear to facilitate selection.</span></p>\r\n<p><img src=\"http://developer.alexanderklimov.ru/android/images/orientation4.png\" alt=\"\" /></p>\r\n<p><span class=\"notranslate\"> Open the created file and modify it as follows.</span></p>\r\n<pre><code class=\"xml\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; &lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:orientation=\"vertical\"&gt; &lt;LinearLayout android:orientation=\"vertical\" android:layout_height=\"wrap_content\" android:layout_width=\"match_parent\" android:layout_gravity=\"center\" android:paddingLeft=\"20dp\" android:paddingRight=\"20dp\"&gt; &lt;EditText android:layout_height=\"wrap_content\" android:id=\"@+id/editText1\" android:layout_width=\"match_parent\"/&gt; &lt;TableLayout android:layout_height=\"wrap_content\" android:layout_width=\"wrap_content\" android:layout_gravity=\"center\" android:stretchColumns=\"*\"&gt; &lt;TableRow&gt; &lt;Button android:id=\"@+id/button1\" android:layout_height=\"wrap_content\" android:layout_width=\"match_parent\" android:text=\"Первая кнопка\"/&gt; &lt;Button android:id=\"@+id/button2\" android:layout_height=\"wrap_content\" android:layout_width=\"match_parent\" android:text=\"Вторая кнопка\"/&gt; &lt;/TableRow&gt; &lt;TableRow&gt; &lt;Button android:id=\"@+id/button3\" android:layout_height=\"wrap_content\" android:layout_width=\"match_parent\" android:text=\"Третья кнопка\"/&gt; &lt;Button android:id=\"@+id/button4\" android:layout_height=\"wrap_content\" android:layout_width=\"match_parent\" android:text=\"Четвёртая кнопка\"/&gt; &lt;/TableRow&gt; &lt;TableRow&gt; &lt;Button android:id=\"@+id/button5\" android:layout_height=\"wrap_content\" android:layout_width=\"match_parent\" android:text=\"Пятая кнопка\"/&gt; &lt;Button android:id=\"@+id/button6\" android:layout_height=\"wrap_content\" android:layout_width=\"match_parent\" android:text=\"Шестая кнопка\"/&gt; &lt;/TableRow&gt; &lt;/TableLayout&gt; &lt;/LinearLayout&gt; &lt;/LinearLayout&gt;</code> </pre>\r\n<p><span class=\"notranslate\"> Run the application and check.</span> <span class=\"notranslate\"> Ok, now all the buttons visible.</span> <span class=\"notranslate\"> Congratulations, you\'re a genius!</span></p>\r\n<p><img title=\"\" src=\"http://developer.alexanderklimov.ru/android/images/orientation5.png\" alt=\"\" width=\"400\" height=\"225\" border=\"0\" /></p>\r\n<p><span class=\"notranslate\"> When you create an alternate layout, do not forget to include all of the components, which will handle the software, otherwise get an error.</span> <span class=\"notranslate\"> Let\'s say you forgot to add a sixth button.</span> <span class=\"notranslate\"> In portrait mode, the program will work, but when the user will turn the screen, then the activity will initialize all the components for the job, and the buttons then and there.</span> <span class=\"notranslate\"> The collapse of the applications and cons review.</span></p>\r\n<h2 id=\"code\" class=\"text-warning\"><span class=\"notranslate\"> Check the orientation program</span></h2>\r\n<p><span class=\"notranslate\"> To learn the code of the current orientation, you can create the following function:</span></p>\r\n<pre> <code class=\"java\">private String getScreenOrientation(){ if(getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) return \"Портретная ориентация\"; else if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) return \"Альбомная ориентация\"; else return \"\"; }</code> <span class=\"notranslate\">). orientation == Configuration.ORIENTATION_PORTRAIT)</span> <code class=\"java\">private String getScreenOrientation(){ if(getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) return \"Портретная ориентация\"; else if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) return \"Альбомная ориентация\"; else return \"\"; }</code> <span class=\"notranslate\">(). orientation == Configuration.ORIENTATION_LANDSCAPE)</span> <code class=\"java\">private String getScreenOrientation(){ if(getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) return \"Портретная ориентация\"; else if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) return \"Альбомная ориентация\"; else return \"\"; }</code> </pre>\r\n<p><span class=\"notranslate\"> Call this function from the right place, for example, when you click a button and find out the current orientation.</span> <span class=\"notranslate\"> In the example we used two common system for constant orientation.</span> <span class=\"notranslate\"> There are constant <strong>ORIENTATION_SQUARE (square</strong> screen).</span> <span class=\"notranslate\"> But I have not seen such phones.</span></p>\r\n<p><span class=\"notranslate\"> It is also possible to calculate the width and height of the screen, if the height is greater than the width of the device in the portrait orientation, or - in landscape:</span></p>\r\n<pre> <code class=\"java\">private String mOrientation = \"\"; private boolean isLandscapeMode(Activity activity) { int width = activity.getWindowManager().getDefaultDisplay().getWidth(); int height = activity.getWindowManager().getDefaultDisplay().getHeight(); boolean isLandscape = width &gt; height; if(isLandscape) mOrientation = \"Альбомная\"; else mOrientation = \"Портретная\"; return isLandscape; }</code> <span class=\"notranslate\">getWidth ();</span> <code class=\"java\">private String mOrientation = \"\"; private boolean isLandscapeMode(Activity activity) { int width = activity.getWindowManager().getDefaultDisplay().getWidth(); int height = activity.getWindowManager().getDefaultDisplay().getHeight(); boolean isLandscape = width &gt; height; if(isLandscape) mOrientation = \"Альбомная\"; else mOrientation = \"Портретная\"; return isLandscape; }</code> <span class=\"notranslate\">getHeight ();</span> <code class=\"java\">private String mOrientation = \"\"; private boolean isLandscapeMode(Activity activity) { int width = activity.getWindowManager().getDefaultDisplay().getWidth(); int height = activity.getWindowManager().getDefaultDisplay().getHeight(); boolean isLandscape = width &gt; height; if(isLandscape) mOrientation = \"Альбомная\"; else mOrientation = \"Портретная\"; return isLandscape; }</code> </pre>\r\n<p><span class=\"notranslate\"> Now that code is obsolete and other methods (described in the example screen) are used to calculate the size of the screen.</span></p>\r\n<h2 id=\"whereorientation\" class=\"text-warning\"><span class=\"notranslate\"> Kruchu-Virtue, want to confuse!</span></h2>\r\n<p><span class=\"notranslate\"> Well, we can determine the current orientation, but in which direction to turn the device?</span> <span class=\"notranslate\"> After all, it is possible to turn left, right or even upside down.</span> <span class=\"notranslate\"> Let\'s write another function:</span></p>\r\n<pre> <code class=\"java\">private String getRotateOrientation() { int rotate = getWindowManager().getDefaultDisplay().getRotation(); switch (rotate) { case Surface.ROTATION_0: return \"Не поворачивали\"; case Surface.ROTATION_90: return \"Повернули на 90 градусов по часовой стрелке\"; case Surface.ROTATION_180: return \"Повернули на 180 градусов\"; case Surface.ROTATION_270: return \"Повернули на 90 градусов против часовой стрелки\"; default: return \"Не понятно\"; } }</code> <span class=\"notranslate\">getDefaultDisplay () getRotation ();</span> <code class=\"java\">private String getRotateOrientation() { int rotate = getWindowManager().getDefaultDisplay().getRotation(); switch (rotate) { case Surface.ROTATION_0: return \"Не поворачивали\"; case Surface.ROTATION_90: return \"Повернули на 90 градусов по часовой стрелке\"; case Surface.ROTATION_180: return \"Повернули на 180 градусов\"; case Surface.ROTATION_270: return \"Повернули на 90 градусов против часовой стрелки\"; default: return \"Не понятно\"; } }</code> </pre>\r\n<div class=\"alert\"><span class=\"notranslate\"> Previously, there was a similar <strong>getOrientation ()</strong> method, which is outdated.</span> <span class=\"notranslate\"> Use <strong>getRotation ()</strong></span></div>\r\n<h2 id=\"setorientation\" class=\"text-warning\"><span class=\"notranslate\"> Set the orientation of the program and in the manifesto</span></h2>\r\n<p><span class=\"notranslate\"> If you are a great original and want to run the application in the style of \"side view\", you can do it programmatically.</span> <span class=\"notranslate\"> Place the code in <strong>onCreate ()</strong> method:</span></p>\r\n<pre> <code class=\"java\">import android.content.pm.ActivityInfo; setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);</code> </pre>\r\n<p><span class=\"notranslate\"> Note that in this case, cats are not very convenient to use your application.</span></p>\r\n<p><img src=\"http://developer.alexanderklimov.ru/android/views/up.jpg\" alt=\"landscape mode\" /></p>\r\n<p><span class=\"notranslate\"> You can disable the application to change the orientation, if you add the correct code in <strong>onCreate ().</strong></span></p>\r\n<pre> <code class=\"java\">setRequestedOrientation (ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE); //для альбомного режима // или setRequestedOrientation (ActivityInfo.SCREEN_ORIENTATION_PORTRAIT); //для портретного режима</code> </pre>\r\n<p><span class=\"notranslate\"> But this method is not very desirable.</span> <span class=\"notranslate\"> It is better to set the desired orientation through the Manifesto, writing in the element &lt;activity&gt; option <strong>android: screenOrientation:</strong></span></p>\r\n<pre> <code class=\"xml\">android:screenOrientation=\"portrait\" android:screenOrientation=\"landscape\"</code> </pre>\r\n<p><span class=\"notranslate\"> By the way, there is another option, when the device relies on the sensor readings, and some others:</span></p>\r\n<pre> <code class=\"xml\">android:screenOrientation=\"sensor\"</code> </pre>\r\n<p><span class=\"notranslate\"> In Android 4.3 (API 18), new values (leave is without translation):</span></p>\r\n<ul>\r\n<li><span class=\"notranslate\"> <strong>userLandscape - Behaves the same as \"sensorLandscape</strong> \", except if the user disables auto-rotate then it locks in the normal landscape orientation and will not flip.</span></li>\r\n<li><span class=\"notranslate\"> <strong>userPortrait - Behaves the same as \"sensorPortrait</strong> \", except if the user disables auto-rotate then it locks in the normal portrait orientation and will not flip.</span></li>\r\n<li><span class=\"notranslate\"> <strong>fullUser - Behaves the same as \"fullSensor</strong> \" and allows rotation in all four directions, except if the user disables auto-rotate then it locks in the user\'s preferred orientation.</span></li>\r\n<li><span class=\"notranslate\"> <strong>locked - to lock your app\'s orientation</strong> into the screen\'s current orientation.</span></li>\r\n</ul>\r\n<p><span class=\"notranslate\"> After the appearance of Android 5.0 has come on the documentation page and was horrified.</span> <span class=\"notranslate\"> There have new values.</span></p>\r\n<pre> <code>android:screenOrientation=[\"unspecified\" | \"behind\" | \"landscape\" | \"portrait\" | \"reverseLandscape\" | \"reversePortrait\" | \"sensorLandscape\" | \"sensorPortrait\" | \"userLandscape\" | \"userPortrait\" | \"sensor\" | \"fullSensor\" | \"nosensor\" | \"user\" | \"fullUser\" | \"locked\"]</code> <span class=\"notranslate\">|</span> <code>android:screenOrientation=[\"unspecified\" | \"behind\" | \"landscape\" | \"portrait\" | \"reverseLandscape\" | \"reversePortrait\" | \"sensorLandscape\" | \"sensorPortrait\" | \"userLandscape\" | \"userPortrait\" | \"sensor\" | \"fullSensor\" | \"nosensor\" | \"user\" | \"fullUser\" | \"locked\"]</code> </pre>\r\n<h2 id=\"noactivity\" class=\"text-warning\"><span class=\"notranslate\"> The ban on the creation of a new activity</span></h2>\r\n<p><span class=\"notranslate\"> On the software installation orientation example, you can see the interesting effect, which must be remembered.</span> <span class=\"notranslate\"> Suppose we have a button that allows you to change the orientation.</span> <span class=\"notranslate\"> At the same time we will change the text on the button that corresponds to the operation of the inscription.</span></p>\r\n<pre> <code class=\"java\">public class MainActivity extends Activity { Button mButton; static final String ORIENTATION_PORTRAIT = \"Портретный режим\"; static final String ORIENTATION_LANDSCAPE = \"Альбомный режим\"; // определяем изменение ориентации экрана boolean mState = false; /** Called when the activity is first created. */ @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mButton = (Button) findViewById(R.id.button1); // set default text display mButton.setText(ORIENTATION_LANDSCAPE); } public void onClick(View v) { // state FALSE: переключаемся на LANDSCAPE if (!mState) { setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE); mButton.setText(ORIENTATION_PORTRAIT); } // state TRUE: переключаемся на PORTRAIT else { setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT); mButton.setText(ORIENTATION_LANDSCAPE); } // обновляем state на противоположное значение mState = !mState; } }</code> <span class=\"notranslate\">created.</span> <code class=\"java\">public class MainActivity extends Activity { Button mButton; static final String ORIENTATION_PORTRAIT = \"Портретный режим\"; static final String ORIENTATION_LANDSCAPE = \"Альбомный режим\"; // определяем изменение ориентации экрана boolean mState = false; /** Called when the activity is first created. */ @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mButton = (Button) findViewById(R.id.button1); // set default text display mButton.setText(ORIENTATION_LANDSCAPE); } public void onClick(View v) { // state FALSE: переключаемся на LANDSCAPE if (!mState) { setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE); mButton.setText(ORIENTATION_PORTRAIT); } // state TRUE: переключаемся на PORTRAIT else { setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT); mButton.setText(ORIENTATION_LANDSCAPE); } // обновляем state на противоположное значение mState = !mState; } }</code> <span class=\"notranslate\">);</span> <code class=\"java\">public class MainActivity extends Activity { Button mButton; static final String ORIENTATION_PORTRAIT = \"Портретный режим\"; static final String ORIENTATION_LANDSCAPE = \"Альбомный режим\"; // определяем изменение ориентации экрана boolean mState = false; /** Called when the activity is first created. */ @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mButton = (Button) findViewById(R.id.button1); // set default text display mButton.setText(ORIENTATION_LANDSCAPE); } public void onClick(View v) { // state FALSE: переключаемся на LANDSCAPE if (!mState) { setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE); mButton.setText(ORIENTATION_PORTRAIT); } // state TRUE: переключаемся на PORTRAIT else { setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT); mButton.setText(ORIENTATION_LANDSCAPE); } // обновляем state на противоположное значение mState = !mState; } }</code> </pre>\r\n<p><span class=\"notranslate\"> Now look what we\'ve got.</span> <span class=\"notranslate\"> Run the project and click the button.</span> <span class=\"notranslate\"> The screen orientation has changed, but the text on the button is the same, although our idea he has to change.</span></p>\r\n<p><img src=\"http://developer.alexanderklimov.ru/android/images/orientation6.png\" alt=\"Orientation\" width=\"240\" height=\"400\" /></p>\r\n<p><span class=\"notranslate\"> Nazhmёm the button again.</span> <span class=\"notranslate\"> The inscription will change, but the focus will not be replaced.</span> <span class=\"notranslate\"> And only another click will turn the screen in the opposite direction.</span></p>\r\n<p><span class=\"notranslate\"> By default, when you change the orientation of Android destroys and re-creates the activity of the code, which means recalling <strong>onCreate ()</strong> method.</span> <span class=\"notranslate\"> Therefore, when you turn the Activity Sets the text defined in the <strong>onCreate ().</strong></span> <span class=\"notranslate\"> In most cases it does not interfere with the program.</span> <span class=\"notranslate\"> But if your application plays video, then when you change the orientation of the challenge <strong>the onCreate ()</strong> can lead to re-start playback (if I write an example).</span></p>\r\n<p><span class=\"notranslate\"> To re-create the activity does not, add a line to the manifest for the desired activity:</span></p>\r\n<pre> <code class=\"xml\">android:configChanges=\"keyboardHidden|orientation|screenSize\"</code> </pre>\r\n<div class=\"alert alert-info\"><span class=\"notranslate\"> In many instances, I have seen, used a pair <em>keyboardHidden | orientation,</em> but it seems that in Android 4 is not enough and you need to add another attribute <strong>screenSize</strong></span></div>\r\n<p><span class=\"notranslate\"> In this case, the system will call <strong>onConfigurationChanged</strong> method <strong>(Configuration)</strong> and relies on you to:</span></p>\r\n<pre> <code class=\"java\">@Override public void onConfigurationChanged(Configuration newConfig) { super.onConfigurationChanged(newConfig); // Проверяем ориентацию экрана if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) { Toast.makeText(this, \"landscape\", Toast.LENGTH_SHORT).show(); } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) { Toast.makeText(this, \"portrait\", Toast.LENGTH_SHORT).show(); } }</code> <span class=\"notranslate\">Toast.LENGTH_SHORT) .show ();</span> <code class=\"java\">@Override public void onConfigurationChanged(Configuration newConfig) { super.onConfigurationChanged(newConfig); // Проверяем ориентацию экрана if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) { Toast.makeText(this, \"landscape\", Toast.LENGTH_SHORT).show(); } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) { Toast.makeText(this, \"portrait\", Toast.LENGTH_SHORT).show(); } }</code> <span class=\"notranslate\">{</span> <code class=\"java\">@Override public void onConfigurationChanged(Configuration newConfig) { super.onConfigurationChanged(newConfig); // Проверяем ориентацию экрана if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) { Toast.makeText(this, \"landscape\", Toast.LENGTH_SHORT).show(); } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) { Toast.makeText(this, \"portrait\", Toast.LENGTH_SHORT).show(); } }</code> <span class=\"notranslate\">Toast.LENGTH_SHORT) .show ();</span> <code class=\"java\">@Override public void onConfigurationChanged(Configuration newConfig) { super.onConfigurationChanged(newConfig); // Проверяем ориентацию экрана if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) { Toast.makeText(this, \"landscape\", Toast.LENGTH_SHORT).show(); } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) { Toast.makeText(this, \"portrait\", Toast.LENGTH_SHORT).show(); } }</code> </pre>\r\n<p><span class=\"notranslate\"> The documentation states that this method should be avoided.</span></p>\r\n<h2 id=\"dissapear\" class=\"text-warning\"><span class=\"notranslate\"> Disappearing text</span></h2>\r\n<p><span class=\"notranslate\"> As already mentioned, when you change the orientation of the activity is recreated.</span> <span class=\"notranslate\"> It is possible to observe an interesting effect with the text disappears.</span> <span class=\"notranslate\"> To see the effect, create two text boxes.</span> <span class=\"notranslate\"> One of them is assigned an identifier, and the other field is left without him.</span></p>\r\n<pre> <code class=\"xml\">&lt;EditText android:id=\"@+id/editTest\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" /&gt; &lt;EditText android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" /&gt;</code> <span class=\"notranslate\">/ editTest\"</span> <code class=\"xml\">&lt;EditText android:id=\"@+id/editTest\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" /&gt; &lt;EditText android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" /&gt;</code> <span class=\"notranslate\">&gt;</span> <code class=\"xml\">&lt;EditText android:id=\"@+id/editTest\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" /&gt; &lt;EditText android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" /&gt;</code> </pre>\r\n<p><span class=\"notranslate\"> Launch the app, enter any text in both boxes and change the orientation.</span> <span class=\"notranslate\"> You will see that the fields with an identifier when you turn the text continues, and in the field the text disappears without ID.</span> <span class=\"notranslate\"> Consider this fact.</span></p>\r\n<p><span class=\"notranslate\"> By the above, I can add that <strong>onTextChanged ()</strong> method is called when a change in the orientation of the field with the identifier:</span></p>\r\n<pre> <code class=\"java\">@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_test); EditText edit = (EditText)findViewById(R.id.editTest); edit.addTextChangedListener(new TextWatcher() { @Override public void onTextChanged(CharSequence s, int start, int before, int count) { // TODO Auto-generated method stub Toast.makeText(TestActivity.this, \"onTextChanged: \" + s, Toast.LENGTH_SHORT).show(); } @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) { // TODO Auto-generated method stub } @Override public void afterTextChanged(Editable s) { // TODO Auto-generated method stub } }); }</code> <span class=\"notranslate\">R.id.editTest);</span> <code class=\"java\">@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_test); EditText edit = (EditText)findViewById(R.id.editTest); edit.addTextChangedListener(new TextWatcher() { @Override public void onTextChanged(CharSequence s, int start, int before, int count) { // TODO Auto-generated method stub Toast.makeText(TestActivity.this, \"onTextChanged: \" + s, Toast.LENGTH_SHORT).show(); } @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) { // TODO Auto-generated method stub } @Override public void afterTextChanged(Editable s) { // TODO Auto-generated method stub } }); }</code> <span class=\"notranslate\">start, int before, int count) {</span> <code class=\"java\">@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_test); EditText edit = (EditText)findViewById(R.id.editTest); edit.addTextChangedListener(new TextWatcher() { @Override public void onTextChanged(CharSequence s, int start, int before, int count) { // TODO Auto-generated method stub Toast.makeText(TestActivity.this, \"onTextChanged: \" + s, Toast.LENGTH_SHORT).show(); } @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) { // TODO Auto-generated method stub } @Override public void afterTextChanged(Editable s) { // TODO Auto-generated method stub } }); }</code> <span class=\"notranslate\">) .show ();</span> <code class=\"java\">@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_test); EditText edit = (EditText)findViewById(R.id.editTest); edit.addTextChangedListener(new TextWatcher() { @Override public void onTextChanged(CharSequence s, int start, int before, int count) { // TODO Auto-generated method stub Toast.makeText(TestActivity.this, \"onTextChanged: \" + s, Toast.LENGTH_SHORT).show(); } @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) { // TODO Auto-generated method stub } @Override public void afterTextChanged(Editable s) { // TODO Auto-generated method stub } }); }</code> <span class=\"notranslate\">start, int count,</span> <code class=\"java\">@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_test); EditText edit = (EditText)findViewById(R.id.editTest); edit.addTextChangedListener(new TextWatcher() { @Override public void onTextChanged(CharSequence s, int start, int before, int count) { // TODO Auto-generated method stub Toast.makeText(TestActivity.this, \"onTextChanged: \" + s, Toast.LENGTH_SHORT).show(); } @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) { // TODO Auto-generated method stub } @Override public void afterTextChanged(Editable s) { // TODO Auto-generated method stub } }); }</code> </pre>\r\n<h2 id=\"exist\" class=\"text-warning\"><span class=\"notranslate\"> Check for the existence of</span></h2>\r\n<p><span class=\"notranslate\"> If you are using two different layout, it is possible that in landscape mode using a button that is not in the portrait orientation.</span> <span class=\"notranslate\"> This can lead to an error in the code, so you need to verify the existence of a button:</span></p>\r\n<pre> <code class=\"java\">Button landscapeButton = (Button) findViewById(R.id.landscapeButton); if (landscapeButton != null) { // Можно работать }</code> <span class=\"notranslate\">R.id.landscapeButton);</span> <code class=\"java\">Button landscapeButton = (Button) findViewById(R.id.landscapeButton); if (landscapeButton != null) { // Можно работать }</code> </pre>\r\n<p><span class=\"notranslate\"> In practice, this is rare, but keep in mind just in case.</span></p>\r\n<h2 class=\"text-warning\"><span class=\"notranslate\"> Orientation in fragments</span></h2>\r\n<p><span class=\"notranslate\"> Later, you\'ll learn about the existence of fragments.</span> <span class=\"notranslate\"> It may be a situation where you want to display a specific fragment in the correct orientation.</span> <span class=\"notranslate\"> In fragments has its own life cycle, and you can implement in your code fragment methods:</span></p>\r\n<pre> <code class=\"java\">@Override public void onResume() { getActivity().setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR); } @Override public void onPause() { getActivity().setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT); // ваш код super.onPause(); }</code> <span class=\"notranslate\">;</span> <code class=\"java\">@Override public void onResume() { getActivity().setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR); } @Override public void onPause() { getActivity().setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT); // ваш код super.onPause(); }</code> <span class=\"notranslate\">;</span> <code class=\"java\">@Override public void onResume() { getActivity().setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR); } @Override public void onPause() { getActivity().setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT); // ваш код super.onPause(); }</code> </pre>\r\n<p><span class=\"notranslate\"> I\'m such a case did not meet, but will leave as a reminder.</span></p>\r\n<h2 class=\"text-warning\"><span class=\"notranslate\"> Life at the turn of the cycle</span></h2>\r\n<p><span class=\"notranslate\"> By turning the activity passes through various states of the chain.</span> <span class=\"notranslate\"> The procedure is as follows.</span></p>\r\n<ol>\r\n<li><span class=\"notranslate\"> onPause ()</span></li>\r\n<li><span class=\"notranslate\"> onStop ()</span></li>\r\n<li><span class=\"notranslate\"> onDestroy ()</span></li>\r\n<li><span class=\"notranslate\"> onCreate ()</span></li>\r\n<li><span class=\"notranslate\"> onStart ()</span></li>\r\n<li><span class=\"notranslate\"> onResume ()</span></li>\r\n</ol>','en',20,'article_b',1,'2016-02-28 20:34:57'),(359,'<h2 id=\"intro\" class=\"text-warning\">Вступление</h2>\r\n<p>Когда создавались первые портативные устройства - КПК и смартфоны, то за основу бралась настольная операционная система и допиливалась под мобильное устройство. Лишние функции удалялись, а некоторые функции добавлялись. Но при этом как-то совсем упустили из виду, что в отличие от громоздких мониторов и экранов ноутбуков, карманные устройства можно вращать в руках. Первые устройства не умели менять ориентацию экрана. Некоторые программисты самостоятельно стали создавать программы, которые умели переключаться в разные режимы. Затем эту возможность стали включать в настройки аппарата. Позже аппараты научились самостоятельно определять ориентацию экрана.</p>\r\n<p>Всего существует два режима - портретный и альбомный. На большинстве телефонов используется по умолчанию портретный режим (как на паспорте). Альбомный режим знаком нам по обычным мониторам.</p>\r\n<p>Рассмотрим следующий случай. Предположим, у нас в приложении имеется одно текстовое поле и шесть кнопок. Вроде всё нормально.</p>\r\n<p><img title=\"\" src=\"http://developer.alexanderklimov.ru/android/images/orientation1.png\" alt=\"Портретный режим\" width=\"225\" height=\"400\" border=\"0\" /></p>\r\n<p>Но стоит нам повернуть устройство на 90 градусов (для эмулятора нужно нажать комбинацию клавиш Ctrl+F11), как сразу обнаруживаются проблемы. Пятая кнопка видна частично, а шестая вообще оказалась за пределами видимости. Непорядок!</p>\r\n<p><img title=\"\" src=\"http://developer.alexanderklimov.ru/android/images/orientation2.png\" alt=\"Альбомный режим\" width=\"400\" height=\"225\" border=\"0\" /></p>\r\n<p>Чтобы избежать такой проблемы, необходимо как-то по другому скомпоновать кнопки. Например, расположить их не подряд друг за другом, а разбить на пары. Воспользуемся контейнером <strong>TableLayout</strong>. С его помощью мы можем разбить кнопки на две колонки и поместить их в три ряда.</p>\r\n<p>Для этой операции нам понадобится сделать несколько важных шагов. Сначала нужно создать новую подпапку в папке <strong>res</strong>. Выделяем папку <strong>res</strong>, вызываем из него контекстное меню и последовательно выбираем команды <strong>New | Android resource directory</strong>. В диалоговом окне из выпадающего списка <strong>Resource type:</strong> выбираем <strong>layout</strong>. В списке <strong>Available qualifiers:</strong> находим элемент <strong>Orientation</strong> и переносим его в правую часть <strong>Chosen qualifiers:</strong> с помощью кнопки с двумя стрелками. По умолчанию у вас появится имя папки <strong>layout-port</strong> в первой строке <strong>Directory Name:</strong>. Но нам нужен альбомный вариант, поэтому в выпадающем списке <strong>Screen orientation</strong> выбираем <strong>Landscape</strong>. Теперь название папки будет <strong>layout-land</strong>.</p>\r\n<p><img src=\"http://developer.alexanderklimov.ru/android/images/orientation3.png\" alt=\"layout-land\" /></p>\r\n<p>Можно обойтись без помощи мастера, создав папку сразу через меню <strong>New | Directory</strong>. Этот способ годится для опытных разработчиков, которые знают, как следует назвать папку. Важно запомнить, что имя даётся не произвольно, а именно в таком виде <strong>layout-land</strong>. По суффиксу <strong>-land</strong> система понимает, что речь идет о новом режиме. Теперь нам осталось создать в созданной папке новый XML-файл <strong>activity_main.xml</strong>. Вызываем контекстное меню у папки <strong>layout-land</strong> и выбираем команды <strong>New | Layout Resource File</strong>. В диалоговом окне присваиваем имя <strong>activity_main.xml</strong>, которое должно совпадать с именем существующего файла. Во втором поле вводим <strong>LinearLayout</strong>, по мере ввода появится подсказка, облегчающая выбор.</p>\r\n<p><img src=\"http://developer.alexanderklimov.ru/android/images/orientation4.png\" alt=\"\" /></p>\r\n<p>Откроем созданный файл и модифицируем его следующим образом.</p>\r\n<pre><code class=\"xml\">\r\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\r\n&lt;LinearLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:orientation=\"vertical\"&gt;\r\n\r\n    &lt;LinearLayout\r\n        android:orientation=\"vertical\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_gravity=\"center\"\r\n        android:paddingLeft=\"20dp\"\r\n        android:paddingRight=\"20dp\"&gt;\r\n\r\n        &lt;EditText\r\n            android:layout_height=\"wrap_content\"\r\n            android:id=\"@+id/editText1\"\r\n            android:layout_width=\"match_parent\"/&gt;\r\n\r\n        &lt;TableLayout\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:stretchColumns=\"*\"&gt;\r\n\r\n            &lt;TableRow&gt;\r\n\r\n                &lt;Button\r\n                    android:id=\"@+id/button1\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:text=\"Первая кнопка\"/&gt;\r\n\r\n                &lt;Button\r\n                    android:id=\"@+id/button2\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:text=\"Вторая кнопка\"/&gt;\r\n            &lt;/TableRow&gt;\r\n\r\n            &lt;TableRow&gt;\r\n\r\n                &lt;Button\r\n                    android:id=\"@+id/button3\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:text=\"Третья кнопка\"/&gt;\r\n\r\n                &lt;Button\r\n                    android:id=\"@+id/button4\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:text=\"Четвёртая кнопка\"/&gt;\r\n            &lt;/TableRow&gt;\r\n\r\n            &lt;TableRow&gt;\r\n\r\n                &lt;Button\r\n                    android:id=\"@+id/button5\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:text=\"Пятая кнопка\"/&gt;\r\n\r\n                &lt;Button\r\n                    android:id=\"@+id/button6\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:text=\"Шестая кнопка\"/&gt;\r\n            &lt;/TableRow&gt;\r\n        &lt;/TableLayout&gt;\r\n    &lt;/LinearLayout&gt;\r\n&lt;/LinearLayout&gt;\r\n</code></pre>\r\n<p>Запускаем приложение и проверяем. Отлично, теперь видны все кнопки. Поздравляю, вы гений!</p>\r\n<p><img title=\"\" src=\"http://developer.alexanderklimov.ru/android/images/orientation5.png\" alt=\"\" width=\"400\" height=\"225\" border=\"0\" /></p>\r\n<p>Когда вы создаёте альтернативную разметку, то не забывайте включать все компоненты, к которым будете обращаться программно, иначе получите ошибку. Допустим, вы забыли добавить шестую кнопку. В портретном режиме программа будет работать, а когда пользователь перевернёт экран, то активность будет инициализировать все компоненты для работы, а кнопки-то и нет. Крах приложения и минусы в отзывах.</p>\r\n<h2 id=\"code\" class=\"text-warning\">Узнать ориентацию программно</h2>\r\n<p>Чтобы из кода узнать текущую ориентацию, можно создать следующую функцию:</p>\r\n<pre><code class=\"java\">\r\nprivate String getScreenOrientation(){    \r\n	if(getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT)\r\n	    return \"Портретная ориентация\";\r\n	else if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE)\r\n		return \"Альбомная ориентация\";\r\n	else\r\n		return \"\";\r\n}\r\n</code></pre>\r\n<p>Вызовите данную функцию из нужного места, например, при щелчке кнопки и узнайте текущую ориентацию. В примере использовались две распространённые системные константы для ориентации. Есть еще константа <strong>ORIENTATION_SQUARE</strong> (квадратный экран). Но я таких телефонов не встречал.</p>\r\n<p>Можно также вычислить ширину и высоту экрана, если высота больше ширины, то устройство в портретной ориентации, иначе - в альбомной:</p>\r\n<pre><code class=\"java\">\r\nprivate String mOrientation = \"\";\r\n\r\nprivate boolean isLandscapeMode(Activity activity)\r\n{\r\n    int width =\r\n    activity.getWindowManager().getDefaultDisplay().getWidth();\r\n    int height =\r\n            activity.getWindowManager().getDefaultDisplay().getHeight();\r\n\r\n    boolean isLandscape = width &gt; height;\r\n\r\n    if(isLandscape)\r\n        mOrientation = \"Альбомная\";\r\n    else\r\n        mOrientation = \"Портретная\";\r\n\r\n    return isLandscape;\r\n}\r\n</code></pre>\r\n<p>Сейчас этот код считается устаревшим и для вычисления размера экрана используются другие методы (описано в примере Экран).</p>\r\n<h2 id=\"whereorientation\" class=\"text-warning\">Кручу-верчу, запутать хочу!</h2>\r\n<p>Хорошо, мы можем определить текущую ориентацию, но в какую сторону повернули устройство? Ведь его можно повернуть влево, вправо или вообще вверх тормашками. Напишем другую функцию:</p>\r\n<pre><code class=\"java\">\r\nprivate String getRotateOrientation() {\r\n	int rotate = getWindowManager().getDefaultDisplay().getRotation();\r\n	switch (rotate) {\r\n	case Surface.ROTATION_0:\r\n		return \"Не поворачивали\";\r\n	case Surface.ROTATION_90:\r\n		return \"Повернули на 90 градусов по часовой стрелке\";\r\n	case Surface.ROTATION_180:\r\n		return \"Повернули на 180 градусов\";\r\n	case Surface.ROTATION_270:\r\n		return \"Повернули на 90 градусов против часовой стрелки\";\r\n	default:\r\n		return \"Не понятно\";\r\n	}\r\n}\r\n</code></pre>\r\n<div class=\"alert\">Раньше существовал аналогичный метод <strong>getOrientation()</strong>, который устарел. Используйте <strong>getRotation()</strong></div>\r\n<h2 id=\"setorientation\" class=\"text-warning\">Установить ориентацию программно и через манифест</h2>\r\n<p>Если вы большой оригинал и хотите запустить приложение в стиле \"вид сбоку\", то можете сделать это программно. Разместите код в методе <strong>onCreate()</strong>:</p>\r\n<pre><code class=\"java\">\r\nimport android.content.pm.ActivityInfo;\r\n\r\nsetRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r\n</code></pre>\r\n<p>Учтите, что в этом случае котам не очень удобно будет пользоваться вашим приложением.</p>\r\n<p><img src=\"http://developer.alexanderklimov.ru/android/views/up.jpg\" alt=\"Альбомный режим\" /></p>\r\n<p>Вы можете запретить приложению менять ориентацию, если добавите нужный код в <strong>onCreate()</strong>.</p>\r\n<pre><code class=\"java\">\r\nsetRequestedOrientation (ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE); //для альбомного режима\r\n// или\r\nsetRequestedOrientation (ActivityInfo.SCREEN_ORIENTATION_PORTRAIT); //для портретного режима\r\n</code></pre>\r\n<p>Но указанный способ не совсем желателен. Лучше установить нужную ориентацию через манифест, прописав в элементе &lt;activity&gt; параметр <strong>android:screenOrientation</strong>:</p>\r\n<pre><code class=\"xml\">\r\nandroid:screenOrientation=\"portrait\"\r\nandroid:screenOrientation=\"landscape\"\r\n</code></pre>\r\n<p>Кстати, существует ещё один вариант, когда устройство полагается на показания сенсора и некоторые другие:</p>\r\n<pre><code class=\"xml\">\r\nandroid:screenOrientation=\"sensor\"\r\n</code></pre>\r\n<p>В Android 4.3 (API 18) появились новые значения (оставлю пока без перевода):</p>\r\n<ul>\r\n<li><strong>userLandscape</strong> - Behaves the same as \"sensorLandscape\", except if the user disables auto-rotate then it locks in the normal landscape orientation and will not flip.</li>\r\n<li><strong>userPortrait</strong> - Behaves the same as \"sensorPortrait\", except if the user disables auto-rotate then it locks in the normal portrait orientation and will not flip.</li>\r\n<li><strong>fullUser</strong> - Behaves the same as \"fullSensor\" and allows rotation in all four directions, except if the user disables auto-rotate then it locks in the user\'s preferred orientation.</li>\r\n<li><strong>locked</strong> - to lock your app\'s orientation into the screen\'s current orientation.</li>\r\n</ul>\r\n<p>После появления Android 5.0 зашёл на страницу документации и пришёл в ужас. Там появились новые значения.</p>\r\n<pre><code>\r\nandroid:screenOrientation=[\"unspecified\" | \"behind\" |\r\n    \"landscape\" | \"portrait\" |\r\n    \"reverseLandscape\" | \"reversePortrait\" |\r\n    \"sensorLandscape\" | \"sensorPortrait\" |\r\n    \"userLandscape\" | \"userPortrait\" |\r\n    \"sensor\" | \"fullSensor\" | \"nosensor\" |\r\n    \"user\" | \"fullUser\" | \"locked\"]\r\n</code></pre>\r\n<h2 id=\"noactivity\" class=\"text-warning\">Запрет на создание новой активности</h2>\r\n<p>На примере программной установки ориентации можно увидеть интересный эффект, о котором нужно помнить. Предположим у нас есть кнопка, позволяющая менять ориентацию. Заодно будем менять текст на кнопке, чтобы операция соответствовала надписи.</p>\r\n<pre><code class=\"java\">\r\npublic class MainActivity extends Activity {\r\n\r\n	Button mButton;\r\n	static final String ORIENTATION_PORTRAIT = \"Портретный режим\";\r\n	static final String ORIENTATION_LANDSCAPE = \"Альбомный режим\";\r\n\r\n	// определяем изменение ориентации экрана\r\n	boolean mState = false;\r\n\r\n	/** Called when the activity is first created. */\r\n	@Override\r\n	public void onCreate(Bundle savedInstanceState) {\r\n		super.onCreate(savedInstanceState);\r\n		setContentView(R.layout.activity_main);\r\n\r\n		mButton = (Button) findViewById(R.id.button1);\r\n\r\n		// set default text display\r\n		mButton.setText(ORIENTATION_LANDSCAPE);\r\n	}\r\n\r\n	public void onClick(View v) {\r\n		// state FALSE: переключаемся на LANDSCAPE\r\n		if (!mState) {\r\n			setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r\n			mButton.setText(ORIENTATION_PORTRAIT);\r\n		}\r\n		// state TRUE: переключаемся на PORTRAIT\r\n		else {\r\n			setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);\r\n			mButton.setText(ORIENTATION_LANDSCAPE);\r\n		}\r\n		// обновляем state на противоположное значение\r\n		mState = !mState;\r\n	}\r\n}\r\n</code></pre>\r\n<p>Теперь посмотрите, что у нас получилось. Запустите проект и нажмите на кнопку. Ориентация экрана поменялась, однако текст на кнопке остался прежним, хотя по нашей задумке он должен измениться.</p>\r\n<p><img src=\"http://developer.alexanderklimov.ru/android/images/orientation6.png\" alt=\"Ориентация\" width=\"240\" height=\"400\" /></p>\r\n<p>Нажмём на кнопку ещё раз. Надпись изменится, но ориентация не сменится. И только повторный щелчок повернёт экран в обратную сторону.</p>\r\n<p>По умолчанию, при смене ориентации Android уничтожает и пересоздаёт активность из кода, что подразумевает повторный вызов метода <strong>onCreate()</strong>. Поэтому при повороте активность устанавливала текст, определенный в <strong>onCreate()</strong>. В большинстве случаев это не мешает программе. Но если приложение воспроизводит видео, то при смене ориентации вызов <strong>onCreate()</strong> может привести к повторному началу воспроизведения (если так написан пример).</p>\r\n<p>Чтобы активность не пересоздавалась, добавьте в манифест строчку для нужной активности:</p>\r\n<pre><code class=\"xml\">\r\nandroid:configChanges=\"keyboardHidden|orientation|screenSize\"\r\n</code></pre>\r\n<div class=\"alert alert-info\">Во многих примерах, которые я видел, используется пара <em>keyboardHidden|orientation</em>, но, похоже, в Android 4 этого недостаточно и нужно добавить еще один атрибут <strong>screenSize</strong></div>\r\n<p>В этом случае система вызовет метод <strong>onConfigurationChanged(Configuration)</strong> и полагается на вас:</p>\r\n<pre><code class=\"java\">\r\n@Override\r\npublic void onConfigurationChanged(Configuration newConfig) {\r\n    super.onConfigurationChanged(newConfig);\r\n    // Проверяем ориентацию экрана\r\n    if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n        Toast.makeText(this, \"landscape\", Toast.LENGTH_SHORT).show();\r\n    } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {\r\n        Toast.makeText(this, \"portrait\", Toast.LENGTH_SHORT).show();\r\n    }\r\n}\r\n</code></pre>\r\n<p>В документации говорится, что данный способ следует избегать.</p>\r\n<h2 id=\"dissapear\" class=\"text-warning\">Исчезающий текст</h2>\r\n<p>Как уже говорилось, при смене ориентации активность пересоздаётся. При этом можно наблюдать интересный эффект с пропадающим текстом. Чтобы увидеть эффект, создадим два текстовых поля. Одному из них присвоим идентификатор, а другое поле оставим без него.</p>\r\n<pre><code class=\"xml\">\r\n&lt;EditText\r\n    android:id=\"@+id/editTest\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\" /&gt;\r\n\r\n&lt;EditText\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\" /&gt;\r\n</code></pre>\r\n<p>Запустите приложение, введите любой текст в обоих полях и смените ориентацию. Вы увидите, что у поля с идентификатором текст при повороте сохранится, а у поля без идентификатора текст исчезнет. Учитывайте данное обстоятельство.</p>\r\n<p>К вышесказанному могу добавить, что при смене ориентации у поля с идентификатором вызывается метод <strong>onTextChanged()</strong>:</p>\r\n<pre><code class=\"java\">\r\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n	super.onCreate(savedInstanceState);\r\n	setContentView(R.layout.activity_test);\r\n\r\n	EditText edit = (EditText)findViewById(R.id.editTest);\r\n	edit.addTextChangedListener(new TextWatcher() {\r\n		@Override\r\n		public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n			// TODO Auto-generated method stub\r\n			Toast.makeText(TestActivity.this, \r\n			         \"onTextChanged: \" + s, Toast.LENGTH_SHORT).show();\r\n		}\r\n		\r\n		@Override\r\n		public void beforeTextChanged(CharSequence s, int start, int count,\r\n				int after) {\r\n			// TODO Auto-generated method stub\r\n		}\r\n		\r\n		@Override\r\n		public void afterTextChanged(Editable s) {\r\n			// TODO Auto-generated method stub\r\n		}\r\n	});\r\n}\r\n</code></pre>\r\n<h2 id=\"exist\" class=\"text-warning\">Проверка на существование</h2>\r\n<p>Если вы используете две разные разметки, то возможна ситуация, когда в альбомной ориентации используется кнопка, которой нет в портретной ориентации. Это можете привести к ошибке в коде, поэтому нужно проверить существование кнопки:</p>\r\n<pre><code class=\"java\">\r\nButton landscapeButton = (Button) findViewById(R.id.landscapeButton);\r\nif (landscapeButton != null) {\r\n    // Можно работать\r\n}\r\n</code></pre>\r\n<p>На практике такое встречается редко, но помните на всякий случай.</p>\r\n<h2 class=\"text-warning\">Ориентация у фрагментов</h2>\r\n<p>Позже вы узнаете о существовании фрагментов. Может возникнуть такая ситуация, когда вы захотите выводить конкретный фрагмент в нужной ориентации. У фрагментов есть собственный жизненный цикл, и вы можете реализовать свой код в методах фрагмента:</p>\r\n<pre><code class=\"java\">\r\n@Override\r\npublic void onResume() {\r\n    getActivity().setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR);\r\n}\r\n\r\n@Override\r\npublic void onPause() {\r\n	getActivity().setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT); \r\n    // ваш код\r\n	super.onPause();\r\n}\r\n</code></pre>\r\n<p>Я с таким случаем не встречался, но оставлю как памятку.</p>\r\n<h2 class=\"text-warning\">Жизненный цикл при повороте</h2>\r\n<p>При повороте активность проходит через цепочку различных состояний. Порядок следующий.</p>\r\n<ol>\r\n<li>onPause()</li>\r\n<li>onStop()</li>\r\n<li>onDestroy()</li>\r\n<li>onCreate()</li>\r\n<li>onStart()</li>\r\n<li>onResume()</li>\r\n</ol>','ru',20,'article_b',1,'2016-02-28 20:34:57'),(360,'Good programming style','en',21,'article_t',1,'2016-02-28 20:37:09'),(361,'Хороший стиль программирования','ru',21,'article_t',1,'2016-02-28 20:37:09'),(362,'<p><span class=\"notranslate\">Anyone who faces c PHP, soon comes to the conclusion that this is not convenient for the study of language.</span> <span class=\"notranslate\"> The fact that it is quite new and dynamic, each subsequent version of virtually negates the previous one.</span> <span class=\"notranslate\"> In such circumstances, the available documentation quickly becomes outdated and specialists prefer not to write books, since the information is placed in the book starts to become outdated before the book publication.</span> <a id=\"id=815\" name=\"id=815\"></a></p>\r\n<p><span class=\"notranslate\"> Why is PHP so popular and how much time people were trained PHP?</span> <span class=\"notranslate\"> The fact that the majority of PHP-programmers not to learn the language from scratch, and has been studying it or already know C / C ++ or Perl.</span> <span class=\"notranslate\"> Perl is a C-like programming language (like PHP), and is a precursor of PHP, we can say that PHP is a Web-oriented Perl.</span> <span class=\"notranslate\"> Because, PHP simply logically follows from Perl and widely spread is due to the fact that programmers could easily move from Perl to PHP (well, C in PHP, too).</span></p>\r\n<p><a id=\"id=816\" name=\"id=816\"></a></p>\r\n<h3><span class=\"notranslate\"> Comment</span></h3>\r\n<p><a id=\"id=817\" name=\"id=817\"></a></p>\r\n<p class=\"artnote\"><span class=\"notranslate\"> Perl language appeared in 1986 for the will of the system programmer Larry Wall.</span> <span class=\"notranslate\"> Created initially as a text file processing tool, designed to make life easier for UNIX system administrator, he turned into a real programming language.</span> <span class=\"notranslate\"> Traditional areas where Perl is used most often and successfully, - the creation of CGI applications, system administration of UNIX, word processing.</span></p>\r\n<p><a id=\"id=818\" name=\"id=818\"></a></p>\r\n<p><span class=\"notranslate\"> In addition, a contribution is made by the subject area - programming for the Internet.</span> <span class=\"notranslate\"> For a serious understanding of the knowledge of which it is desirable to so many things (HTML, SQL, UNIX, application protocols - even if HTTP, styles of programming in C, Perl, Java).</span> <br /> <span class=\"notranslate\"> When the majority of PHP-programmers moving to PHP world with the luggage of another programming language (their style already established), the demand for literature in which to discuss the basics of programming is not so great.</span> <span class=\"notranslate\"> For beginners it is difficult to find information about the organization code.</span> <span class=\"notranslate\"> We hope that this article will help put your own style, which ultimately may increase the development speed by 30% and help when working in a team, when your code will be read by other programmers, and you have to read someone else\'s code, respectively.</span> </p>\r\n<p><a id=\"id=819\" name=\"id=819\"></a></p>\r\n<h3><span class=\"notranslate\"> The alignment of braces and indents</span></h3>\r\n<p><a id=\"id=820\" name=\"id=820\"></a></p>\r\n<p><span class=\"notranslate\"> There are several styles of braces placement, they are dictated by the existing styles in other C-like programming language.</span></p>\r\n<p><a id=\"id=821\" name=\"id=821\"></a></p>\r\n<p><span class=\"notranslate\"> 1) Rational Style</span></p>\r\n<p><a id=\"id=822\" name=\"id=822\"></a></p>\r\n<p><span class=\"notranslate\"> This is one of the most common styles, as they enjoyed Kernig (Kernighan) and Ritchie (Ritchie), C. language authors</span></p>\r\n<p><a id=\"id=823\" name=\"id=823\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /></span> <span style=\"color: #006600;\">if(</span> <span style=\"color: #0000cc;\">$flag</span> <span style=\"color: #006600;\">){ <br /> echo</span> <span style=\"color: #cc0000;\">\"Hello world!\"</span> <span style=\"color: #006600;\">; <br /> } <br /></span> <span style=\"color: #0000cc;\">?&gt;</span></span></code></p>\r\n<p><a id=\"id=824\" name=\"id=824\"></a></p>\r\n<p><span class=\"notranslate\"> The advantage of this approach is to save vertical space, vital when debugging a large code block.</span> <span class=\"notranslate\"> The flip side of this approach is that it may be difficult to find a {character, tucked away at the end of the line.</span> <span class=\"notranslate\"> This style is shared by the Java-programmers, such as the attributes Sun.</span></p>\r\n<p><a id=\"id=825\" name=\"id=825\"></a></p>\r\n<p><span class=\"notranslate\"> 2) Style Almen</span></p>\r\n<p><a id=\"id=826\" name=\"id=826\"></a></p>\r\n<p><span class=\"notranslate\"> Alem Eric (Eric Allman) wrote BSD utilities in this style, so this style is often referred to as \"BSD style\":</span></p>\r\n<p><a id=\"id=827\" name=\"id=827\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /></span> <span style=\"color: #006600;\">if(</span> <span style=\"color: #0000cc;\">$flag</span> <span style=\"color: #006600;\">) <br /> { <br /> echo</span> <span style=\"color: #cc0000;\">\"Hello world!\"</span> <span style=\"color: #006600;\">; <br /> } <br /></span> <span style=\"color: #0000cc;\">?&gt;</span></span></code></p>\r\n<p><a id=\"id=828\" name=\"id=828\"></a></p>\r\n<p><span class=\"notranslate\"> The argument in support of this style is the fact that the scope of the block operator clear and visually associated with the control operator.</span></p>\r\n<p><a id=\"id=829\" name=\"id=829\"></a></p>\r\n<p><span class=\"notranslate\"> 3) Style Whitesmith</span></p>\r\n<p><a id=\"id=830\" name=\"id=830\"></a></p>\r\n<p><span class=\"notranslate\"> This style requires the use of the following placement of braces</span></p>\r\n<p><a id=\"id=831\" name=\"id=831\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /></span> <span style=\"color: #006600;\">if(</span> <span style=\"color: #0000cc;\">$flag</span> <span style=\"color: #006600;\">) <br /> { <br /> echo</span> <span style=\"color: #cc0000;\">\"Hello world!\"</span> <span style=\"color: #006600;\">; <br /> } <br /></span> <span style=\"color: #0000cc;\">?&gt;</span></span></code></p>\r\n<p><a id=\"id=832\" name=\"id=832\"></a></p>\r\n<p><span class=\"notranslate\"> This style has the advantage that the braces are more closely associated with the code that they delimit and include, but by visual viewing text find brackets is slightly more complicated.</span></p>\r\n<p><a id=\"id=833\" name=\"id=833\"></a></p>\r\n<p><span class=\"notranslate\"> 4) Style GNU</span></p>\r\n<p><a id=\"id=834\" name=\"id=834\"></a></p>\r\n<p><span class=\"notranslate\"> Fund GNU Free Software Foundation programmers use the following style arrangement of the braces</span></p>\r\n<p><a id=\"id=835\" name=\"id=835\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /></span> <span style=\"color: #006600;\">if(</span> <span style=\"color: #0000cc;\">$flag</span> <span style=\"color: #006600;\">) <br /> { <br /> echo</span> <span style=\"color: #cc0000;\">\"Hello world!\"</span> <span style=\"color: #006600;\">; <br /> } <br /></span> <span style=\"color: #0000cc;\">?&gt;</span></span></code></p>\r\n<p><a id=\"id=836\" name=\"id=836\"></a></p>\r\n<p><span class=\"notranslate\"> Inside any control operators structures should have indented the same number of spaces, eg for operators if-then-else code should look like this:</span></p>\r\n<p><a id=\"id=837\" name=\"id=837\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /> $flag</span> <span style=\"color: #006600;\">=</span> <span style=\"color: #0000cc;\">true</span> <span style=\"color: #006600;\">; <br /> if(</span> <span style=\"color: #0000cc;\">$flag</span> <span style=\"color: #006600;\">) <br /> { <br /> echo</span> <span style=\"color: #cc0000;\">\"Переменная равна true\"</span> <span style=\"color: #006600;\">; <br /> exit(); <br /> } <br /> else <br /> { <br /> echo</span> <span style=\"color: #cc0000;\">\"Переменная равна false\"</span> <span style=\"color: #006600;\">; <br /> exit(); <br /> } <br /></span> <span style=\"color: #0000cc;\">?&gt;</span></span></code></p>\r\n<p><a id=\"id=838\" name=\"id=838\"></a></p>\r\n<p><span class=\"notranslate\"> The number may be any commonly used 2, 4 or 8 spaces.</span> <span class=\"notranslate\"> Try to stick to this rule, some programmers come into a rage when this number is not a multiple of 2 :) The most optimal is to use 2 spaces, because when a larger number of sub-blocks are \"stretched\" and it becomes difficult to perceive.</span></p>\r\n<p><a id=\"id=839\" name=\"id=839\"></a></p>\r\n<h3><span class=\"notranslate\"> Gaps around the characters</span></h3>\r\n<p><a id=\"id=840\" name=\"id=840\"></a></p>\r\n<p><span class=\"notranslate\"> Binary operators should be framing spaces:</span></p>\r\n<p><a id=\"id=841\" name=\"id=841\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /></span> <span style=\"color: #ff9900;\">// Неправильно <br /></span> <span style=\"color: #0000cc;\">$a</span> <span style=\"color: #006600;\">=</span> <span style=\"color: #0000cc;\">$b</span> <span style=\"color: #006600;\">+</span> <span style=\"color: #0000cc;\">$c</span> <span style=\"color: #006600;\">*</span> <span style=\"color: #0000cc;\">$d</span> <span style=\"color: #006600;\">; <br /></span> <span style=\"color: #ff9900;\">// Правильно <br /></span> <span style=\"color: #0000cc;\">$a</span> <span style=\"color: #006600;\">=</span> <span style=\"color: #0000cc;\">$b</span> <span style=\"color: #006600;\">+</span> <span style=\"color: #0000cc;\">$c</span> <span style=\"color: #006600;\">*</span> <span style=\"color: #0000cc;\">$d</span> <span style=\"color: #006600;\">; <br /></span> <span style=\"color: #0000cc;\">?&gt;</span></span></code></p>\r\n<p><a id=\"id=842\" name=\"id=842\"></a></p>\r\n<p><span class=\"notranslate\"> The space character is associated with a new word, so the formula does not read like a strange set of characters, but as something meaningful.</span></p>\r\n<p><a id=\"id=843\" name=\"id=843\"></a></p>\r\n<h3><span class=\"notranslate\"> Comments</span></h3>\r\n<p><a id=\"id=844\" name=\"id=844\"></a></p>\r\n<p><span class=\"notranslate\"> Set your comments on the principle of \"the more, the better\" - will take some time and you will forget what he was doing this or that program block.</span> <span class=\"notranslate\"> Generally accepted code comments in English or not comment at all, as in Russian wild number of encodings, and indeed it happened historically.</span> <span class=\"notranslate\"> Spit on it, you comment the code in the first place for themselves, not for others!</span> <span class=\"notranslate\"> And since you\'re doing it for yourself, do it for you in a convenient coding.</span></p>\r\n<p><a id=\"id=845\" name=\"id=845\"></a></p>\r\n<p><span class=\"notranslate\"> PHP has collected in itself almost all the comments of modern programming languages, along with a single-line comments in the style of shell-scripts (#)</span></p>\r\n<p><a id=\"id=846\" name=\"id=846\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /></span> <span style=\"color: #ff9900;\"># Программный модуль index.php <br /></span> <span style=\"color: #006600;\">echo</span> <span style=\"color: #cc0000;\">\"Hello world!\"</span> <span style=\"color: #006600;\">; <br /></span> <span style=\"color: #0000cc;\">?&gt;</span></span></code></p>\r\n<p><a id=\"id=847\" name=\"id=847\"></a></p>\r\n<p><span class=\"notranslate\"> and C ++ (//)</span></p>\r\n<p><a id=\"id=848\" name=\"id=848\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /></span> <span style=\"color: #ff9900;\">// Программный модуль index.php <br /></span> <span style=\"color: #006600;\">echo</span> <span style=\"color: #cc0000;\">\"Hello world!\"</span> <span style=\"color: #006600;\">; <br /></span> <span style=\"color: #0000cc;\">?&gt;</span></span></code></p>\r\n<p><a id=\"id=849\" name=\"id=849\"></a></p>\r\n<p><span class=\"notranslate\"> You can use the multi-line comment in C style:</span></p>\r\n<p><a id=\"id=850\" name=\"id=850\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /></span> <span style=\"color: #ff9900;\">/* Это многострочный комментарий в стиле С <br /> он охватывает несколько строк &ndash; не допускается <br /> вложенных комментариев <br /> */ <br /></span> <span style=\"color: #006600;\">echo</span> <span style=\"color: #cc0000;\">\"Hello world!\"</span> <span style=\"color: #006600;\">; <br /></span> <span style=\"color: #0000cc;\">?&gt;</span></span></code></p>\r\n<p><a id=\"id=851\" name=\"id=851\"></a></p>\r\n<p><span class=\"notranslate\"> It refers to good manners to use single-line comments for brief comments and multi-line - for comment spanning multiple lines.</span> <span class=\"notranslate\"> It is not forbidden to use single-line comments for a large text, especially in the beginning of an important file or a block of code</span></p>\r\n<p><a id=\"id=852\" name=\"id=852\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /></span> <span style=\"color: #ff9900;\">//////////////////////////////////////////////////////////////////////////////////////// <br /> // Гостевая книга <br /> /////////////////////////////////////////////////////////////////////////////////////// <br /></span> <span style=\"color: #0000cc;\">?&gt;</span></span></code></p>\r\n<p><a id=\"id=853\" name=\"id=853\"></a></p>\r\n<p><span class=\"notranslate\"> As with the indented and braces, the basic requirement is the need to stick to one style in all program units.</span> <br /> <span class=\"notranslate\"> When the alignment of single-line comments in two ways: directly before the statement executed</span></p>\r\n<p><a id=\"id=854\" name=\"id=854\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /></span> <span style=\"color: #ff9900;\">// Вывод текстовой строки в окно браузера <br /></span> <span style=\"color: #006600;\">echo</span> <span style=\"color: #cc0000;\">\"Hello world!\"</span> <span style=\"color: #006600;\">; <br /></span> <span style=\"color: #0000cc;\">?&gt;</span></span></code></p>\r\n<p><a id=\"id=855\" name=\"id=855\"></a></p>\r\n<p><span class=\"notranslate\"> and after the semicolon</span></p>\r\n<p><a id=\"id=856\" name=\"id=856\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /></span> <span style=\"color: #006600;\">echo</span> <span style=\"color: #cc0000;\">\"Hello world!\"</span> <span style=\"color: #006600;\">;</span> <span style=\"color: #ff9900;\">// Вывод текстовой строки в окно браузера <br /></span> <span style=\"color: #0000cc;\">?&gt;</span></span></code></p>\r\n<p><a id=\"id=857\" name=\"id=857\"></a></p>\r\n<p><span class=\"notranslate\"> It is better to stick to the first rule, as the line gets long and poorly perceived reading.</span> <span class=\"notranslate\"> The only justification for the use of such a comment is commenting on the closing brace of the long program block containing a lot of nested blocks.</span></p>\r\n<p><a id=\"id=858\" name=\"id=858\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /></span> <span style=\"color: #006600;\">if(</span> <span style=\"color: #0000cc;\">$tot</span> <span style=\"color: #006600;\">) <br /> { <br /> while(</span> <span style=\"color: #0000cc;\">$position</span> <span style=\"color: #006600;\">=</span> <span style=\"color: #0000cc;\">next</span> <span style=\"color: #006600;\">(</span> <span style=\"color: #0000cc;\">$tot</span> <span style=\"color: #006600;\">)) <br /> { <br /></span> <span style=\"color: #ff9900;\">/* Очень длинный код <br /> содержащий много <br /> вложенных блоков <br /> ... <br /> */ <br /></span> <span style=\"color: #006600;\">if(</span> <span style=\"color: #0000cc;\">$flag</span> <span style=\"color: #006600;\">) <br /> { <br /> echo</span> <span style=\"color: #cc0000;\">\"Ошибка\"</span> <span style=\"color: #006600;\">; <br /> exit(); <br /> } <br /> }</span> <span style=\"color: #ff9900;\">// Конец while($position = next($tot)) <br /></span> <span style=\"color: #006600;\">} <br /></span> <span style=\"color: #0000cc;\">?&gt;</span></span></code></p>\r\n<p><a id=\"id=859\" name=\"id=859\"></a></p>\r\n<h3><span class=\"notranslate\"> The names of variables and functions</span></h3>\r\n<p><a id=\"id=860\" name=\"id=860\"></a></p>\r\n<p><span class=\"notranslate\"> There are several variables name styles</span></p>\r\n<p><a id=\"id=861\" name=\"id=861\"></a></p>\r\n<p><span class=\"notranslate\"> $ Var_bell - Style C: lower case, an underscore.</span></p>\r\n<p><a id=\"id=862\" name=\"id=862\"></a></p>\r\n<p><span class=\"notranslate\"> $ VarBell - Pascal style: each substring begins with a capital letter in the name.</span></p>\r\n<p><a id=\"id=863\" name=\"id=863\"></a></p>\r\n<p><span class=\"notranslate\"> $ VarBell - Java style: the first line starts with a lowercase letter, with all subsequent large.</span></p>\r\n<p><a id=\"id=864\" name=\"id=864\"></a></p>\r\n<p><span class=\"notranslate\"> No matter what style would you choose - the main thing to adhere to the code of one style.</span></p>\r\n<p><a id=\"id=865\" name=\"id=865\"></a></p>\r\n<h3><span class=\"notranslate\"> Comment</span></h3>\r\n<p><a id=\"id=866\" name=\"id=866\"></a></p>\r\n<p class=\"artnote\"><span class=\"notranslate\"> In programming constants are traditionally written in uppercase YANDEX_BOT.</span> <span class=\"notranslate\"> If you want other programmers can easily take your code, stick to this rule.</span> </p>\r\n<p><a id=\"id=867\" name=\"id=867\"></a></p>\r\n<p><span class=\"notranslate\"> When the name of variables and functions, try to give them meaningful names.</span> <span class=\"notranslate\"> Sometimes nothing comes to mind, and there is a variable called anyhow - beware of this.</span> <span class=\"notranslate\"> In his time was spent not a few hours due to poorly named variables, sometimes debug managed code only if the variables have been renamed accordingly.</span></p>\r\n<p><a id=\"id=868\" name=\"id=868\"></a></p>\r\n<p><span class=\"notranslate\"> Consider a few examples.</span> <span class=\"notranslate\"> Often time line for storing SQL called $ query (query) - this is a very good name, is associated with the SQL-query.</span> <span class=\"notranslate\"> Usually at this all ends.</span> <span class=\"notranslate\"> When the second request, the second variable is named $ query1 - this is bad practice.</span> <span class=\"notranslate\"> Usually requests within the same script are distinguished by their action, one SQL-query can perform the update (UPDATE), another sample (SELECT), so better to call the variables indicating the action of the operator: $ query_update and $ query_select, respectively.</span></p>\r\n<p><a id=\"id=869\" name=\"id=869\"></a></p>\r\n<p><span class=\"notranslate\"> You can often see the code</span></p>\r\n<p><a id=\"id=870\" name=\"id=870\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /> $query</span> <span style=\"color: #006600;\">=</span> <span style=\"color: #cc0000;\">\"SELECT * FROM catalog\"</span> <span style=\"color: #006600;\">; <br /></span> <span style=\"color: #0000cc;\">$query1</span> <span style=\"color: #006600;\">=</span> <span style=\"color: #0000cc;\">mysql_query</span> <span style=\"color: #006600;\">(</span> <span style=\"color: #0000cc;\">$query</span> <span style=\"color: #006600;\">); <br /> while(</span> <span style=\"color: #0000cc;\">$result</span> <span style=\"color: #006600;\">=</span> <span style=\"color: #0000cc;\">mysql_fetch_array</span> <span style=\"color: #006600;\">(</span> <span style=\"color: #0000cc;\">$query1</span> <span style=\"color: #006600;\">)) <br /> { <br /></span> <span style=\"color: #ff9900;\">/* Код обработки */ <br /></span> <span style=\"color: #006600;\">} <br /></span> <span style=\"color: #0000cc;\">?&gt;</span></span></code></p>\r\n<p><a id=\"id=871\" name=\"id=871\"></a></p>\r\n<p><span class=\"notranslate\"> Here request descriptor returned by mysql_query () function called $ query1, it\'s great tangles as a developer, and read the text of the program.</span> <span class=\"notranslate\"> Descriptor bears no physical meaning - it is a key to the result, so it is better to call the shorthand name of the table</span></p>\r\n<p><a id=\"id=872\" name=\"id=872\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /> $query</span> <span style=\"color: #006600;\">=</span> <span style=\"color: #cc0000;\">\"SELECT * FROM catalog\"</span> <span style=\"color: #006600;\">; <br /></span> <span style=\"color: #0000cc;\">$cat</span> <span style=\"color: #006600;\">=</span> <span style=\"color: #0000cc;\">mysql_query</span> <span style=\"color: #006600;\">(</span> <span style=\"color: #0000cc;\">$query</span> <span style=\"color: #006600;\">); <br /> while(</span> <span style=\"color: #0000cc;\">$catalog</span> <span style=\"color: #006600;\">=</span> <span style=\"color: #0000cc;\">mysql_fetch_array</span> <span style=\"color: #006600;\">(</span> <span style=\"color: #0000cc;\">$cat</span> <span style=\"color: #006600;\">)) <br /> { <br /></span> <span style=\"color: #ff9900;\">/* Код обработки */ <br /></span> <span style=\"color: #006600;\">} <br /></span> <span style=\"color: #0000cc;\">?&gt;</span></span></code></p>','en',21,'article_b',1,'2016-02-28 20:37:09'),(363,'<p>Всякий кто сталкивается c PHP, в скором времени приходит к выводу, что это не совсем удобный язык для изучения. Дело в том, что он достаточно новый и динамично развивающийся, каждая последующая версия буквально перечёркивает предыдущую. В таких условиях имеющаяся документация быстро устаревает, а специалисты предпочитают не писать книг, так как информация размещённая в книге начинает устаревать до выхода книги в свет.</p>\r\n<p><a id=\"id=815\" name=\"id=815\"></a></p>\r\n<p>Почему же PHP так популярен и каким образом столько человек разом обучилось PHP? Дело в том, что большинство PHP-программистов не изучало язык с нуля, а изучало его либо уже зная С/С++, либо Perl. Perl является C-подобным языком программирования (как и PHP), а является предшественником PHP, можно сказать что PHP это Web-ориентированный Perl. Поскольку, PHP просто логически следует из Perl и широкое распространение получил именно из-за того, что программистам было легко переходить с Perl на PHP (ну и с С на PHP, тоже).</p>\r\n<p><a id=\"id=816\" name=\"id=816\"></a></p>\r\n<h3>Замечание</h3>\r\n<p><a id=\"id=817\" name=\"id=817\"></a></p>\r\n<p class=\"artnote\">Язык Perl появился в 1986 году по воле системного программиста Лари Уолла. Созданный первоначально как средство обработки текстовых файлов, призванное облегчить жизнь системному администратору UNIX, он превратился в настоящий язык программирования. Традиционные области, в которых Perl применяется особенно часто и успешно, &mdash; создание приложений CGI, системное администрирование UNIX, обработка текста.</p>\r\n<p><a id=\"id=818\" name=\"id=818\"></a></p>\r\n<p>Кроме того, свой вклад вносит предметная область &mdash; программирование для сети Интернет. Для серьёзного понимания которого желательно знание очень многих вещей (HTML, SQL, UNIX, прикладных протоколов &mdash; хотя бы HTTP, стилей программирования на С, Perl, Java).<br /> Когда большинство PHP-программистов переходят в мир PHP с багажом другого языка программирования (их стиль уже устоялся), спрос на литературу, в которой бы обсуждались азы программирования не так велик. Новичкам бывает трудно найти информацию об организации кода. Мы надеемся, что эта статья поможет поставить свой собственный стиль, что в конечном итоге может увеличить скорость разработки на 30% и помочь при работе в команде, когда ваш код будет читаться другими программистами, а вам соответственно придётся читать чужой код.</p>\r\n<p><a id=\"id=819\" name=\"id=819\"></a></p>\r\n<h3>Расстановка фигурных скобок и отступы</h3>\r\n<p><a id=\"id=820\" name=\"id=820\"></a></p>\r\n<p>Существует несколько стилей расстановки фигурных скобок, все они диктуются существующими стилями в других C-подобных языках программирования.</p>\r\n<p><a id=\"id=821\" name=\"id=821\"></a></p>\r\n<p>1) Рациональный стиль</p>\r\n<p><a id=\"id=822\" name=\"id=822\"></a></p>\r\n<p>Это один из наиболее распространенных стилей, так как им пользовались Керниген (Kernighan) и Ричи (Ritchie), авторы языка C.</p>\r\n<p><a id=\"id=823\" name=\"id=823\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /> &nbsp;&nbsp;</span><span style=\"color: #006600;\">if(</span><span style=\"color: #0000cc;\">$flag</span><span style=\"color: #006600;\">){ <br /> &nbsp;&nbsp;&nbsp;&nbsp;echo </span><span style=\"color: #cc0000;\">\"Hello world!\"</span><span style=\"color: #006600;\">; <br /> &nbsp;&nbsp;} <br /> </span><span style=\"color: #0000cc;\">?&gt;</span> </span></code></p>\r\n<p><a id=\"id=824\" name=\"id=824\"></a></p>\r\n<p>Преимущество этого подхода заключается в экономии вертикального пространства, жизненно важного при отладке большого блока кода. Оборотной стороной такого подхода является то, что может оказаться трудным найти символ {, спрятанный в конце строки. Этого стиля придерживаются и Java-программисты, как-то приписывает Sun.</p>\r\n<p><a id=\"id=825\" name=\"id=825\"></a></p>\r\n<p>2) Стиль Алмена</p>\r\n<p><a id=\"id=826\" name=\"id=826\"></a></p>\r\n<p>Эрик Алемен (Eric Allman) написал утилиты BSD в этом стиле, поэтому этот стиль часто называют \"стиль BSD\":</p>\r\n<p><a id=\"id=827\" name=\"id=827\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /> &nbsp;&nbsp;</span><span style=\"color: #006600;\">if(</span><span style=\"color: #0000cc;\">$flag</span><span style=\"color: #006600;\">) <br /> &nbsp;&nbsp;{ <br /> &nbsp;&nbsp;&nbsp;&nbsp;echo </span><span style=\"color: #cc0000;\">\"Hello world!\"</span><span style=\"color: #006600;\">; <br /> &nbsp;&nbsp;} <br /> </span><span style=\"color: #0000cc;\">?&gt;</span> </span></code></p>\r\n<p><a id=\"id=828\" name=\"id=828\"></a></p>\r\n<p>Аргументом в поддержку такого стиля является тот факт, что область видимости блочного оператора ясна и визуально ассоциируется с управляющим оператором.</p>\r\n<p><a id=\"id=829\" name=\"id=829\"></a></p>\r\n<p>3) Стиль Whitesmith</p>\r\n<p><a id=\"id=830\" name=\"id=830\"></a></p>\r\n<p>Данный стиль предписывает использование следующей расстановки фигурных скобок</p>\r\n<p><a id=\"id=831\" name=\"id=831\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /> &nbsp;&nbsp;</span><span style=\"color: #006600;\">if(</span><span style=\"color: #0000cc;\">$flag</span><span style=\"color: #006600;\">) <br /> &nbsp;&nbsp;&nbsp;&nbsp;{ <br /> &nbsp;&nbsp;&nbsp;&nbsp;echo </span><span style=\"color: #cc0000;\">\"Hello world!\"</span><span style=\"color: #006600;\">; <br /> &nbsp;&nbsp;&nbsp;&nbsp;} <br /> </span><span style=\"color: #0000cc;\">?&gt;</span> </span></code></p>\r\n<p><a id=\"id=832\" name=\"id=832\"></a></p>\r\n<p>Этот стиль имеет преимущество в том, что скобки более тесно ассоциируются с кодом, который они включают и разграничивают, однако при визуальном просмотре текста отыскать скобки оказывается чуть более сложно.</p>\r\n<p><a id=\"id=833\" name=\"id=833\"></a></p>\r\n<p>4) Стиль GNU</p>\r\n<p><a id=\"id=834\" name=\"id=834\"></a></p>\r\n<p>Программисты GNU фонда Free Software Foundation используют следующий стиль расстановки фигурных скобок</p>\r\n<p><a id=\"id=835\" name=\"id=835\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /> &nbsp;&nbsp;</span><span style=\"color: #006600;\">if(</span><span style=\"color: #0000cc;\">$flag</span><span style=\"color: #006600;\">) <br /> &nbsp;&nbsp;&nbsp;&nbsp;{ <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo </span><span style=\"color: #cc0000;\">\"Hello world!\"</span><span style=\"color: #006600;\">; <br /> &nbsp;&nbsp;&nbsp;&nbsp;} <br /> </span><span style=\"color: #0000cc;\">?&gt;</span> </span></code></p>\r\n<p><a id=\"id=836\" name=\"id=836\"></a></p>\r\n<p>Внутри любых управляющих конструкций операторы следует располагать с отступом на одинаковое число пробелов, например для операторов if-then-else код должен выглядеть следующим образом:</p>\r\n<p><a id=\"id=837\" name=\"id=837\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /> &nbsp;&nbsp;$flag </span><span style=\"color: #006600;\">= </span><span style=\"color: #0000cc;\">true</span><span style=\"color: #006600;\">; <br /> &nbsp;&nbsp;if(</span><span style=\"color: #0000cc;\">$flag</span><span style=\"color: #006600;\">) <br /> &nbsp;&nbsp;{ <br /> &nbsp;&nbsp;&nbsp;&nbsp;echo </span><span style=\"color: #cc0000;\">\"Переменная равна true\"</span><span style=\"color: #006600;\">; <br /> &nbsp;&nbsp;&nbsp;&nbsp;exit(); <br /> &nbsp;&nbsp;} <br /> &nbsp;&nbsp;else <br /> &nbsp;&nbsp;{ <br /> &nbsp;&nbsp;&nbsp;&nbsp;echo </span><span style=\"color: #cc0000;\">\"Переменная равна false\"</span><span style=\"color: #006600;\">; <br /> &nbsp;&nbsp;&nbsp;&nbsp;exit(); <br /> &nbsp;&nbsp;} <br /> </span><span style=\"color: #0000cc;\">?&gt;</span> </span></code></p>\r\n<p><a id=\"id=838\" name=\"id=838\"></a></p>\r\n<p>Число может быть любым, обычно используют 2, 4 или 8 пробелов. Старайтесь придерживаться этого правила, некоторые программисты приходят в бешенство когда это число не кратно 2 :) Наиболее оптимальным является использование 2 пробелов, так как при их большем числе вложенные блоки становятся \"растянутыми\" и их становится сложно воспринимать.</p>\r\n<p><a id=\"id=839\" name=\"id=839\"></a></p>\r\n<h3>Пробелы вокруг символов</h3>\r\n<p><a id=\"id=840\" name=\"id=840\"></a></p>\r\n<p>Бинарные операторы следует обрамлять пробелами:</p>\r\n<p><a id=\"id=841\" name=\"id=841\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /> &nbsp;&nbsp;</span><span style=\"color: #ff9900;\">// Неправильно <br /> &nbsp;&nbsp;</span><span style=\"color: #0000cc;\">$a</span><span style=\"color: #006600;\">=</span><span style=\"color: #0000cc;\">$b</span><span style=\"color: #006600;\">+</span><span style=\"color: #0000cc;\">$c</span><span style=\"color: #006600;\">*</span><span style=\"color: #0000cc;\">$d</span><span style=\"color: #006600;\">; <br /> &nbsp;&nbsp;</span><span style=\"color: #ff9900;\">// Правильно <br /> &nbsp;&nbsp;</span><span style=\"color: #0000cc;\">$a </span><span style=\"color: #006600;\">= </span><span style=\"color: #0000cc;\">$b </span><span style=\"color: #006600;\">+ </span><span style=\"color: #0000cc;\">$c </span><span style=\"color: #006600;\">* </span><span style=\"color: #0000cc;\">$d</span><span style=\"color: #006600;\">; <br /> </span><span style=\"color: #0000cc;\">?&gt;</span> </span></code></p>\r\n<p><a id=\"id=842\" name=\"id=842\"></a></p>\r\n<p>Символ пробела ассоциируется с новым словом, поэтому формула читается не как непонятный набор символов, а как нечто осмысленное.</p>\r\n<p><a id=\"id=843\" name=\"id=843\"></a></p>\r\n<h3>Комментарии</h3>\r\n<p><a id=\"id=844\" name=\"id=844\"></a></p>\r\n<p>Расставляйте комментарии по принципу &ldquo;чем больше, тем лучше&rdquo; &mdash; пройдёт некоторое время и вы забудете, что делал тот или иной программный блок. Вообще принято комментировать код на английском языке или не комментировать вообще, так как в русском дикое количество кодировок, да и вообще так исторически сложилось. Плюйте на это, код вы комментируете в первую очередь для себя, а не для других! А раз уж вы делает это для себя делайте это в удобной для вас кодировке.</p>\r\n<p><a id=\"id=845\" name=\"id=845\"></a></p>\r\n<p>PHP собрал в себе практически все комментарии современных языков программирования, наряду с однострочными комментариями в стиле shell-скриптов (#)</p>\r\n<p><a id=\"id=846\" name=\"id=846\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /> &nbsp;&nbsp;</span><span style=\"color: #ff9900;\"># Программный модуль index.php <br /> &nbsp;&nbsp;</span><span style=\"color: #006600;\">echo </span><span style=\"color: #cc0000;\">\"Hello world!\"</span><span style=\"color: #006600;\">; <br /> </span><span style=\"color: #0000cc;\">?&gt;</span> </span></code></p>\r\n<p><a id=\"id=847\" name=\"id=847\"></a></p>\r\n<p>и С++ (//)</p>\r\n<p><a id=\"id=848\" name=\"id=848\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /> &nbsp;&nbsp;</span><span style=\"color: #ff9900;\">// Программный модуль index.php <br /> &nbsp;&nbsp;</span><span style=\"color: #006600;\">echo </span><span style=\"color: #cc0000;\">\"Hello world!\"</span><span style=\"color: #006600;\">; <br /> </span><span style=\"color: #0000cc;\">?&gt;</span> </span></code></p>\r\n<p><a id=\"id=849\" name=\"id=849\"></a></p>\r\n<p>можно использовать многострочный комментарий в стиле C:</p>\r\n<p><a id=\"id=850\" name=\"id=850\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /> &nbsp;&nbsp;</span><span style=\"color: #ff9900;\">/* Это многострочный комментарий в стиле С <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;он охватывает несколько строк &ndash; не допускается <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;вложенных комментариев <br /> &nbsp;&nbsp;*/ <br /> &nbsp;&nbsp;</span><span style=\"color: #006600;\">echo </span><span style=\"color: #cc0000;\">\"Hello world!\"</span><span style=\"color: #006600;\">; <br /> </span><span style=\"color: #0000cc;\">?&gt;</span> </span></code></p>\r\n<p><a id=\"id=851\" name=\"id=851\"></a></p>\r\n<p>К хорошему тону относится использование однострочных комментариев для короткого комментария, а многострочного &mdash; для комментария, охватывающего несколько строк. Не возбраняется использовать однострочные комментарии для большого текста, особенно в начале файла или важного блока кода</p>\r\n<p><a id=\"id=852\" name=\"id=852\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /> &nbsp;&nbsp;</span><span style=\"color: #ff9900;\">//////////////////////////////////////////////////////////////////////////////////////// <br /> &nbsp;&nbsp;// Гостевая книга <br /> &nbsp;&nbsp;/////////////////////////////////////////////////////////////////////////////////////// <br /> </span><span style=\"color: #0000cc;\">?&gt;</span> </span></code></p>\r\n<p><a id=\"id=853\" name=\"id=853\"></a></p>\r\n<p>Как и при работе с отступами и фигурными скобками, основным требованием является необходимость придерживаться одного стиля во всех программных блоках.<br /> При расстановке однострочных комментариев возможно два варианта: непосредственно перед выполняемым оператором</p>\r\n<p><a id=\"id=854\" name=\"id=854\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /> &nbsp;&nbsp;</span><span style=\"color: #ff9900;\">// Вывод текстовой строки в окно браузера <br /> &nbsp;&nbsp;</span><span style=\"color: #006600;\">echo </span><span style=\"color: #cc0000;\">\"Hello world!\"</span><span style=\"color: #006600;\">; <br /> </span><span style=\"color: #0000cc;\">?&gt;</span> </span></code></p>\r\n<p><a id=\"id=855\" name=\"id=855\"></a></p>\r\n<p>и после точки с запятой</p>\r\n<p><a id=\"id=856\" name=\"id=856\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /> &nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: #006600;\">echo </span><span style=\"color: #cc0000;\">\"Hello world!\"</span><span style=\"color: #006600;\">; </span><span style=\"color: #ff9900;\">// Вывод текстовой строки в окно браузера <br /> </span><span style=\"color: #0000cc;\">?&gt;</span> </span></code></p>\r\n<p><a id=\"id=857\" name=\"id=857\"></a></p>\r\n<p>Лучше придерживаться первого правила, так как строка получается длинной и плохо воспринимается читающим. Единственным оправданием использования такого комментария является комментирование закрывающейся скобки длинного программного блока, содержащего много вложенных блоков.</p>\r\n<p><a id=\"id=858\" name=\"id=858\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /> &nbsp;&nbsp;</span><span style=\"color: #006600;\">if(</span><span style=\"color: #0000cc;\">$tot</span><span style=\"color: #006600;\">) <br /> &nbsp;&nbsp;{ <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(</span><span style=\"color: #0000cc;\">$position </span><span style=\"color: #006600;\">= </span><span style=\"color: #0000cc;\">next</span><span style=\"color: #006600;\">(</span><span style=\"color: #0000cc;\">$tot</span><span style=\"color: #006600;\">)) <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: #ff9900;\">/* Очень длинный код <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;содержащий много <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;вложенных блоков <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;... <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: #006600;\">if(</span><span style=\"color: #0000cc;\">$flag</span><span style=\"color: #006600;\">) <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo </span><span style=\"color: #cc0000;\">\"Ошибка\"</span><span style=\"color: #006600;\">; <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(); <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} </span><span style=\"color: #ff9900;\">// Конец while($position = next($tot)) <br /> &nbsp;&nbsp;</span><span style=\"color: #006600;\">} <br /> </span><span style=\"color: #0000cc;\">?&gt;</span> </span></code></p>\r\n<p><a id=\"id=859\" name=\"id=859\"></a></p>\r\n<h3>Имена переменных и функций</h3>\r\n<p><a id=\"id=860\" name=\"id=860\"></a></p>\r\n<p>Существует несколько стилей названия переменных</p>\r\n<p><a id=\"id=861\" name=\"id=861\"></a></p>\r\n<p>$var_bell &mdash; стиль C: нижний регистр, знак подчёркивания.</p>\r\n<p><a id=\"id=862\" name=\"id=862\"></a></p>\r\n<p>$VarBell &mdash; стиль Pascal: каждая подстрока в названии начинается с большой буквы.</p>\r\n<p><a id=\"id=863\" name=\"id=863\"></a></p>\r\n<p>$varBell &mdash; стиль Java: первая строка начинается с маленькой буквы, все последующие с большой.</p>\r\n<p><a id=\"id=864\" name=\"id=864\"></a></p>\r\n<p>Не имеет значения, какой стиль будет вами выбран &mdash; главное придерживаться в коде одного стиля.</p>\r\n<p><a id=\"id=865\" name=\"id=865\"></a></p>\r\n<h3>Замечание</h3>\r\n<p><a id=\"id=866\" name=\"id=866\"></a></p>\r\n<p class=\"artnote\">В программировании константы традиционно записываются в верхнем регистре YANDEX_BOT. Если вы хотите, чтобы другие программисты могли легко воспринимать ваш код, придерживайтесь этого правила.</p>\r\n<p><a id=\"id=867\" name=\"id=867\"></a></p>\r\n<p>При названии переменных и функций старайтесь давать им осмысленные имена. Иногда ничего не приходит в голову, и появляется назвать переменную как попало &mdash; остерегайтесь этого. В своё время было потрачено не мало часов из-за неудачно названных переменных, иногда отладить код удавалось лишь в том случае, если переменные были переименованы подобающим образом.</p>\r\n<p><a id=\"id=868\" name=\"id=868\"></a></p>\r\n<p>Рассмотрим несколько примеров. Часто временные строки для хранения SQL называют $query (запрос) &mdash; это очень удачное название, ассоциирующееся именно с SQL-запросом. Обычно на этом всё и заканчивается. При появлении второго запроса, вторая переменная получает имя $query1 &mdash; это порочная практика. Обычно запросы в рамках одного скрипта отличаются своим действием: один SQL-запрос может выполнять обновление (UPDATE), другой выборку (SELECT), поэтому переменные лучше называть с указанием действия оператора: $query_update и $query_select, соответственно.</p>\r\n<p><a id=\"id=869\" name=\"id=869\"></a></p>\r\n<p>Часто можно увидеть код</p>\r\n<p><a id=\"id=870\" name=\"id=870\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /> &nbsp;&nbsp;$query </span><span style=\"color: #006600;\">= </span><span style=\"color: #cc0000;\">\"SELECT * FROM catalog\"</span><span style=\"color: #006600;\">; <br /> &nbsp;&nbsp;</span><span style=\"color: #0000cc;\">$query1 </span><span style=\"color: #006600;\">= </span><span style=\"color: #0000cc;\">mysql_query</span><span style=\"color: #006600;\">(</span><span style=\"color: #0000cc;\">$query</span><span style=\"color: #006600;\">); <br /> &nbsp;&nbsp;while(</span><span style=\"color: #0000cc;\">$result </span><span style=\"color: #006600;\">= </span><span style=\"color: #0000cc;\">mysql_fetch_array</span><span style=\"color: #006600;\">(</span><span style=\"color: #0000cc;\">$query1</span><span style=\"color: #006600;\">)) <br /> &nbsp;&nbsp;{ <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: #ff9900;\">/* Код обработки */ <br /> &nbsp;&nbsp;</span><span style=\"color: #006600;\">} <br /> </span><span style=\"color: #0000cc;\">?&gt;</span></span></code></p>\r\n<p><a id=\"id=871\" name=\"id=871\"></a></p>\r\n<p>Здесь дескриптор запроса, возвращаемый функцией mysql_query() назван $query1, это здорово запутывает как разработчика, так и читающего текст программы. Дескриптор не несёт физического смысла &mdash; это лишь ключ к результату, поэтому его лучше называть сокращённым именем таблицы</p>\r\n<p><a id=\"id=872\" name=\"id=872\"></a></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #0000cc;\">&lt;?php <br /> &nbsp;&nbsp;$query </span><span style=\"color: #006600;\">= </span><span style=\"color: #cc0000;\">\"SELECT * FROM catalog\"</span><span style=\"color: #006600;\">; <br /> &nbsp;&nbsp;</span><span style=\"color: #0000cc;\">$cat </span><span style=\"color: #006600;\">= </span><span style=\"color: #0000cc;\">mysql_query</span><span style=\"color: #006600;\">(</span><span style=\"color: #0000cc;\">$query</span><span style=\"color: #006600;\">); <br /> &nbsp;&nbsp;while(</span><span style=\"color: #0000cc;\">$catalog </span><span style=\"color: #006600;\">= </span><span style=\"color: #0000cc;\">mysql_fetch_array</span><span style=\"color: #006600;\">(</span><span style=\"color: #0000cc;\">$cat</span><span style=\"color: #006600;\">)) <br /> &nbsp;&nbsp;{ <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: #ff9900;\">/* Код обработки */ <br /> &nbsp;&nbsp;</span><span style=\"color: #006600;\">} <br /> </span><span style=\"color: #0000cc;\">?&gt;</span> </span></code></p>','ru',21,'article_b',1,'2016-02-28 20:37:09'),(364,'Writing PHP code that is resistant to errors','en',22,'article_t',1,'2016-02-28 20:39:07'),(365,'Пишем PHP код, устойчивый к ошибкам','ru',22,'article_t',1,'2016-02-28 20:39:07'),(366,'<p><span class=\"notranslate\"><strong>foreword</strong></span></p>\r\n<p><span class=\"notranslate\"> Errors - is the bane of any program.</span> <span class=\"notranslate\"> The larger the project, the more difficult to correct and detect errors.</span> <span class=\"notranslate\"> But the most important in the process of working with the program is the qualification of a programmer and his desire to write a correct and accurate code containing the minimum number of errors.</span></p>\r\n<p><span class=\"notranslate\"> In this article I will try to collect the equipment and techniques to minimize the number of errors in a program written in PHP.</span> <span class=\"notranslate\"> But some of the presented methods can be useful if you write in any programming language.</span></p>\r\n<p><span class=\"notranslate\"> <strong>Knowledge - half the battle</strong></span></p>\r\n<p class=\"mtx3\"><span class=\"notranslate\"> We learn, as reported by PHP</span></p>\r\n<p><span class=\"notranslate\"> In any language, there are many potentially dangerous situations that are fraught with errors implicit.</span> <span class=\"notranslate\"> When parsing the source code translator program, he can report to developer about these situations.</span> <span class=\"notranslate\"> To this end, it is only necessary to include an option that is often disabled by default for certain reasons.</span></p>\r\n<p><span class=\"notranslate\"> In PHP compiler output control messages determined by the function <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.php.su/functions/%3Ferror-reporting&amp;usg=ALkJrhghQchalRvFTydmWYUC76MpGo1uTw\" target=\"_blank\">error_reporting</a> and error_reporting directive value in php.ini.</span> <span class=\"notranslate\"> Recommended its value E_ALL - ie</span> <span class=\"notranslate\"> display messages on all potentially dangerous situations.</span> <span class=\"notranslate\"> These in PHP include, for example, the use of an uninitialized variable, the reference to a nonexistent array element, etc.</span></p>\r\n<p><span class=\"notranslate\"> To enable the most verbose compiler messages set at the beginning of the program function call <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.php.su/functions/%3Ferror-reporting&amp;usg=ALkJrhghQchalRvFTydmWYUC76MpGo1uTw\" target=\"_blank\">the error_reporting</a> :</span> </p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"> <span style=\"color: #ff8000;\">// Для PHP4 <br /></span> <span style=\"color: #0000bb;\">error_reporting</span> <span style=\"color: #007700;\">(</span> <span style=\"color: #0000bb;\">E_ALL</span> <span style=\"color: #007700;\">);</span> </span></code></p>\r\n<p><span class=\"notranslate\"> or set the value of error_reporting = E_ALL in <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.php.su/prepare/%3Fphpini&amp;usg=ALkJrhgpuXLrABziYaU_Uq5PMyFmEqx8Qw\" target=\"_blank\">the php.ini</a> .</span></p>\r\n<p><span class=\"notranslate\"> A more detailed description of the possible reporting level can be met in the PHP documentation - <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.php.su/functions/%3Fcat%3Derrorfunc&amp;usg=ALkJrhgyKxmhjIT7oMFwA704F24KSavsQg\" target=\"_blank\">the Error Handling and the Logging the Functions</a> .</span></p>\r\n<p><span class=\"notranslate\"> To put PHP5 E_STRICT level, which includes the output messages using the code obsolete programming techniques (for example, var is used to describe the internal variables of the class).</span> <span class=\"notranslate\"> It is not included in E_ALL, so to PHP5 recommended level of messages E_ALL |</span> <span class=\"notranslate\"> E_STRICT (ie E_ALL and E_STRICT).</span> <span class=\"notranslate\"> Accordingly, to set the output of all messages from the compiler must call error_reporting with this parameter:</span></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"> <span style=\"color: #ff8000;\">// Для PHP5 <br /></span> <span style=\"color: #0000bb;\">error_reporting</span> <span style=\"color: #007700;\">(</span> <span style=\"color: #0000bb;\">E_ALL</span> <span style=\"color: #007700;\">|</span> <span style=\"color: #0000bb;\">E_STRICT</span> <span style=\"color: #007700;\">);</span> </span></code></p>\r\n<p class=\"mtx3\"><span class=\"notranslate\"> If nothing says</span></p>\r\n<p><span class=\"notranslate\"> If you set the output for errors and mistakes are not displayed, it is possible to conclude errors in script output is disabled.</span> <span class=\"notranslate\"> Check the ini file option <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.php.su/prepare/%3Fphpini&amp;usg=ALkJrhgpuXLrABziYaU_Uq5PMyFmEqx8Qw#ini.display-errors\" target=\"_blank\">display_errors is</a> (it includes error output immediately in the script output) and, if it is off, turn it on.</span></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"> <span style=\"color: #007700;\">if (</span> <span style=\"color: #0000bb;\">ini_get</span> <span style=\"color: #007700;\">(</span> <span style=\"color: #dd0000;\">\'display_errors\'</span> <span style=\"color: #007700;\">) !=</span> <span style=\"color: #0000bb;\">1</span> <span style=\"color: #007700;\">) {</span> <span style=\"color: #ff8000;\">// проверяет значение опции display_errors <br /></span> <span style=\"color: #0000bb;\">ini_set</span> <span style=\"color: #007700;\">(</span> <span style=\"color: #dd0000;\">\'display_errors\'</span> <span style=\"color: #007700;\">,</span> <span style=\"color: #0000bb;\">1</span> <span style=\"color: #007700;\">);</span> <span style=\"color: #ff8000;\">// включает вывод ошибок вместе с результатом работы скрипта <br /></span> <span style=\"color: #007700;\">}</span> </span></code></p>\r\n<p class=\"mtx3\"><span class=\"notranslate\"> If you suddenly tell</span></p>\r\n<p><span class=\"notranslate\"> It is rarely possible to test the program in its entirety prior to release and at the same time it is better not to show the user error messages for his reaction to them is unpredictable.</span> <span class=\"notranslate\"> It is better to redirect compiler error that occurred at run-time program error in the log file.</span> <span class=\"notranslate\"> Enable this option you can redirect to a file log_errors <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.php.su/prepare/%3Fphpini&amp;usg=ALkJrhgpuXLrABziYaU_Uq5PMyFmEqx8Qw\" target=\"_blank\">the php.ini</a> .</span></p>\r\n<p><span class=\"notranslate\"> It is also useful to put your error handler, if you want to not only log errors in the Log file but add some additional logic processing.</span> <span class=\"notranslate\"> For example, send an email message with a translator or bring a special message for the user.</span> <span class=\"notranslate\"> Read more about this in the article <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.php.su/articles/%3Fcat%3Dcommon%26page%3D001&amp;usg=ALkJrhi8mdQMAzdcLkkLfPaW14kUwcSSFQ\" target=\"_blank\">Catching errors in the PHP</a> , which was written by Anton Dougal.</span></p>\r\n<p><span class=\"notranslate\"> <strong>We compare the constant variable, and not vice versa</strong></span></p>\r\n<p><span class=\"notranslate\"> How many times have you had to find out that an error in the program is connected with the operator \"=\" instead of \"==\"?</span> <span class=\"notranslate\"> What would be necessary less often, use the type of comparison</span></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"> <span style=\"color: #007700;\">if (</span> <span style=\"color: #0000bb;\">10</span> <span style=\"color: #007700;\">==</span> <span style=\"color: #0000bb;\">$i</span> <span style=\"color: #007700;\">) { <br /></span> <span style=\"color: #ff8000;\">// что-то делаем <br /></span> <span style=\"color: #007700;\">}</span> </span></code></p>\r\n<p><span class=\"notranslate\"> If you use \"=\" instead of \"==\" the compiler will generate an error \"Parse error: parse error in ... on line ...\".</span> <span class=\"notranslate\"> Thus the error is detected much faster.</span></p>\r\n<p><span class=\"notranslate\"> <strong>We do not use the value of twice</strong></span></p>\r\n<p><span class=\"notranslate\"> Of course, this is an exaggeration.</span> <span class=\"notranslate\"> But if the program is necessary to use the value of a few times, we can recommend to declare a constant and use it instead of the value.</span></p>\r\n<p><span class=\"notranslate\"> For PHP4 there is only one way to declare a constant - use the <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.php.su/functions/%3Fdefine&amp;usg=ALkJrhiQt_6RGdu699-61pd2PeYRgxRp_w\" target=\"_blank\">the define</a> .</span></p>\r\n<p><span class=\"notranslate\"> For example:</span> <br /> <span class=\"notranslate\"> define ( \'BEFORE_RENDER\', \'beforeRender\');</span> <br /> <span class=\"notranslate\"> Constant in the classroom can not be declared.</span></p>\r\n<p><span class=\"notranslate\"> Extending PHP 5 for the determination of the constants is similar to that which was implemented during the expansion of the C and C ++ - using the keyword const.</span> <span class=\"notranslate\"> But constant thus can only be created within a class.</span></p>\r\n<p><span class=\"notranslate\"> For example:</span></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"> <span style=\"color: #007700;\">class</span> <span style=\"color: #0000bb;\">ControlEvents</span> <span style=\"color: #007700;\">{ <br /> const</span> <span style=\"color: #0000bb;\">BEFORE_RENDER</span> <span style=\"color: #007700;\">=</span> <span style=\"color: #dd0000;\">\'beforeRender\'</span> <span style=\"color: #007700;\">; <br /> } <br /> print</span> <span style=\"color: #0000bb;\">ControlEvents</span> <span style=\"color: #007700;\">::</span> <span style=\"color: #0000bb;\">BEFORE_RENDER</span> <span style=\"color: #007700;\">;</span> </span></code></p>\r\n<p><span class=\"notranslate\"> But to refer to this constant need to know the name of the class.</span></p>\r\n<p><span class=\"notranslate\"> Constants can also be added directly to the class.</span> <span class=\"notranslate\"> But PHP does not support this method.</span> <span class=\"notranslate\"> So we have to declare them as ordinary variables:</span></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"> <span style=\"color: #007700;\">class</span> <span style=\"color: #0000bb;\">Control</span> <span style=\"color: #007700;\">{ <br /> <br /> var</span> <span style=\"color: #0000bb;\">$BEFORE_RENDER</span> <span style=\"color: #007700;\">=</span> <span style=\"color: #dd0000;\">\'beforeRender\'</span> <span style=\"color: #007700;\">; <br /> function</span> <span style=\"color: #0000bb;\">render</span> <span style=\"color: #007700;\">() { <br /></span> <span style=\"color: #0000bb;\">$eventFunction</span> <span style=\"color: #007700;\">=</span> <span style=\"color: #0000bb;\">$this</span> <span style=\"color: #007700;\">-&gt;</span> <span style=\"color: #0000bb;\">BEFORE_RENDER</span> <span style=\"color: #007700;\">; <br /></span> <span style=\"color: #0000bb;\">$this</span> <span style=\"color: #007700;\">-&gt;</span> <span style=\"color: #0000bb;\">$eventFunction</span> <span style=\"color: #007700;\">(); <br /> } <br /> }</span> </span></code></p>\r\n<p><span class=\"notranslate\"> <strong>Checking the function settings</strong></span></p>\r\n<p><span class=\"notranslate\"> In PHP parameter to a function, you can pass any variable.</span> <span class=\"notranslate\"> But the algorithm functions may not be all the same, that of a variable passed to it.</span> <span class=\"notranslate\"> Therefore, in the beginning of the function is useful to check its input parameters to the required type and range of values.</span></p>\r\n<p><span class=\"notranslate\"> To verify the type, the following functions:</span></p>\r\n<ul>\r\n<li><span class=\"notranslate\"> <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.php.su/functions/%3Fgettype&amp;usg=ALkJrhgnurFZCprJLFgrJ7d8V751IYNdVg\" target=\"_blank\">gettype</a> (Mixed the var $) - returns the type of a variable.</span> <span class=\"notranslate\"> The most commonly used types are: \"boolean\", \"integer\", \"double\", \"string\", \"array\", \"object\", \"resource\", \"NULL\".</span></li>\r\n<li><span class=\"notranslate\"> Functions of the type of test: <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.php.su/functions/%3Fis-bool&amp;usg=ALkJrhig32knVD-pK-3pKnZZaK5EZpC1ow\" target=\"_blank\">is_bool</a> (Mixed $ the var), <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.php.su/functions/%3Fis-integer&amp;usg=ALkJrhizDDjcoFRXIR7TxBhYGevqa8E-2Q\" target=\"_blank\">is_integer</a> (Mixed $ the var), <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.php.su/functions/%3Fis-double&amp;usg=ALkJrhhPfVmlik1ghMnst4S-DXP39LP5Tg\" target=\"_blank\">is_double</a> (Mixed $ the var), <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.php.su/functions/%3Fis-string&amp;usg=ALkJrhgeeJJ4JQwcaaQINt7WwXABnwQT2Q\" target=\"_blank\">is_string</a> (Mixed $ the var), <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.php.su/functions/%3Fis-array&amp;usg=ALkJrhhro6l_gmzDhinjBcfCQQQ7UyIfpQ\" target=\"_blank\">is_array</a> (Mixed $ the var), <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.php.su/functions/%3Fis-object&amp;usg=ALkJrhjfQ0DU1lFE1mKP99gV_59-4T2wDQ\" target=\"_blank\">is_object</a> (Mixed $ the var), <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.php.su/functions/%3Fis-resource&amp;usg=ALkJrhjG3cCdLswpoFsqZNvXarLXo4MCdA\" target=\"_blank\">is_resource</a> (Mixed $ var) - returns true or false.</span></li>\r\n<li><span class=\"notranslate\"> To determine the class of the object used functions:</span>\r\n<ul>\r\n<li><span class=\"notranslate\"> <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.php.su/functions/%3Fget-class&amp;usg=ALkJrhhYmd2rKz-inAqIpOuCzTls9vldpQ\" target=\"_blank\">get_class</a> (the obj the Object $) - returns the name of the class, an instance of which is the obj.</span></li>\r\n<li><span class=\"notranslate\"> <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.php.su/functions/%3Fis-a&amp;usg=ALkJrhgKRlbHalvUXFTy-Q5AYHHa_5-c-Q\" target=\"_blank\">is_a</a> ($ obj the Object, the String class $) - checks whether obj instance Slassi class or a class that inherits from the class.</span></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p><span class=\"notranslate\"> For PHP4 there is no automatic way to check the function parameters.</span> <span class=\"notranslate\"> All the necessary checks should be done on their own.</span></p>\r\n<p><span class=\"notranslate\"> function code, which verifies the arguments could be like this:</span></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"> <span style=\"color: #ff8000;\">/** <br /> * Функция showControl принимает один параметр $control, <br /> * этот параметр должен являться классом и являться <br /> * экземпляром класса HTMLControl либо классом, <br /> * унаследованным от HTMLControl. <br /> */ <br /></span> <span style=\"color: #007700;\">function</span> <span style=\"color: #0000bb;\">showControl</span> <span style=\"color: #007700;\">(&amp;</span> <span style=\"color: #0000bb;\">$control</span> <span style=\"color: #007700;\">) { <br /></span> <span style=\"color: #0000bb;\">is_a</span> <span style=\"color: #007700;\">(</span> <span style=\"color: #0000bb;\">$control</span> <span style=\"color: #007700;\">,</span> <span style=\"color: #dd0000;\">\'HTMLControl\'</span> <span style=\"color: #007700;\">) or</span> <span style=\"color: #0000bb;\">$control</span> <span style=\"color: #007700;\">==</span> <span style=\"color: #0000bb;\">null</span> <span style=\"color: #007700;\">or exit(</span> <span style=\"color: #dd0000;\">\'Type missmatch.\'</span> <span style=\"color: #007700;\">); <br /> ... <br /> }</span> </span></code></p>\r\n<p><span class=\"notranslate\"> The advantage of this method is that the error messages can be controlled and to use your own error handler.</span> <span class=\"notranslate\"> For example, you can use the following functions to check the settings:</span></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"> <span style=\"color: #007700;\">function</span> <span style=\"color: #0000bb;\">checkParameter</span> <span style=\"color: #007700;\">(&amp;</span> <span style=\"color: #0000bb;\">$var</span> <span style=\"color: #007700;\">,</span> <span style=\"color: #0000bb;\">$class</span> <span style=\"color: #007700;\">) { <br /> if (!</span> <span style=\"color: #0000bb;\">is_a</span> <span style=\"color: #007700;\">(</span> <span style=\"color: #0000bb;\">$var</span> <span style=\"color: #007700;\">,</span> <span style=\"color: #0000bb;\">$class</span> <span style=\"color: #007700;\">) &amp;&amp;</span> <span style=\"color: #0000bb;\">$var</span> <span style=\"color: #007700;\">!=</span> <span style=\"color: #0000bb;\">null</span> <span style=\"color: #007700;\">) <br /></span> <span style=\"color: #0000bb;\">SFExit</span> <span style=\"color: #007700;\">(</span> <span style=\"color: #dd0000;\">\'Type missmatch.\'</span> <span style=\"color: #007700;\">); <br /> } <br /> <br /> function</span> <span style=\"color: #0000bb;\">SFExit</span> <span style=\"color: #007700;\">(&amp;</span> <span style=\"color: #0000bb;\">$message</span> <span style=\"color: #007700;\">) { <br /> print</span> <span style=\"color: #0000bb;\">$message</span> <span style=\"color: #007700;\">.</span> <span style=\"color: #dd0000;\">\'&lt;br&gt;\'</span> <span style=\"color: #007700;\">; <br /></span> <span style=\"color: #0000bb;\">$backtrace</span> <span style=\"color: #007700;\">=</span> <span style=\"color: #0000bb;\">debug_backtrace</span> <span style=\"color: #007700;\">(); <br /> for(</span> <span style=\"color: #0000bb;\">$i</span> <span style=\"color: #007700;\">=</span> <span style=\"color: #0000bb;\">0</span> <span style=\"color: #007700;\">;</span> <span style=\"color: #0000bb;\">$i</span> <span style=\"color: #007700;\">&lt;</span> <span style=\"color: #0000bb;\">count</span> <span style=\"color: #007700;\">(</span> <span style=\"color: #0000bb;\">$backtrace</span> <span style=\"color: #007700;\">);</span> <span style=\"color: #0000bb;\">$i</span> <span style=\"color: #007700;\">++) { <br /> print</span> <span style=\"color: #0000bb;\">$i</span> <span style=\"color: #007700;\">.</span> <span style=\"color: #dd0000;\">\': \'</span> <span style=\"color: #007700;\">.</span> <span style=\"color: #0000bb;\">$backtrace</span> <span style=\"color: #007700;\">[</span> <span style=\"color: #0000bb;\">$i</span> <span style=\"color: #007700;\">][</span> <span style=\"color: #dd0000;\">\'file\'</span> <span style=\"color: #007700;\">] .</span> <span style=\"color: #dd0000;\">\'(\'</span> <span style=\"color: #007700;\">.</span> <span style=\"color: #0000bb;\">$backtrace</span> <span style=\"color: #007700;\">[</span> <span style=\"color: #0000bb;\">$i</span> <span style=\"color: #007700;\">][</span> <span style=\"color: #dd0000;\">\'line\'</span> <span style=\"color: #007700;\">] .</span> <span style=\"color: #dd0000;\">\')&lt;br&gt;\'</span> <span style=\"color: #007700;\">; <br /> } <br /> exit(); <br /> }</span> </span></code></p>\r\n<p><span class=\"notranslate\"> <strong>Note:</strong> The <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.php.su/functions/%3Fdebug-backtrace&amp;usg=ALkJrhilVxcLD7nDT2cPJIvNY56P7JN2NA\" target=\"_blank\">debug_backtrace</a> only introduced in PHP 4.3.0.</span></p>\r\n<p><span class=\"notranslate\"> An example of their use:</span></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"> <span style=\"color: #007700;\">function</span> <span style=\"color: #0000bb;\">showControl</span> <span style=\"color: #007700;\">(&amp;</span> <span style=\"color: #0000bb;\">$control</span> <span style=\"color: #007700;\">) { <br /></span> <span style=\"color: #0000bb;\">checkParameter</span> <span style=\"color: #007700;\">(</span> <span style=\"color: #0000bb;\">$control</span> <span style=\"color: #007700;\">,</span> <span style=\"color: #dd0000;\">\'HTMLControl\'</span> <span style=\"color: #007700;\">); <br /> ... <br /> }</span> </span></code></p>\r\n<p><span class=\"notranslate\"> PHP5 For some types of test parameters can be set directly in the function.</span> <span class=\"notranslate\"> The previous example on PHP5 will be as follows:</span></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"> <span style=\"color: #007700;\">function</span> <span style=\"color: #0000bb;\">showControl</span> <span style=\"color: #007700;\">(</span> <span style=\"color: #0000bb;\">HTMLControl $control</span> <span style=\"color: #007700;\">) { <br /> ... <br /> }</span> </span></code></p>\r\n<p><span class=\"notranslate\"> <strong>Asserts</strong></span></p>\r\n<p><span class=\"notranslate\"> During the creation and debugging of the program, you can use a built-in mechanism for adding checks in code.</span> <span class=\"notranslate\"> It is called the <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.php.su/functions/%3Fassert&amp;usg=ALkJrhgxGDFbAIheXrfk19E6GPihNfReDA\" target=\"_blank\">hit asserts</a> (or assert-test).</span> <span class=\"notranslate\"> The idea of it is that the program code is added to a special screening designs that can be turned off for the production site, but at any time to include in the design.</span></p>\r\n<p><span class=\"notranslate\"> The following code snippets are roughly analogous:</span></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"> <span style=\"color: #ff8000;\">/* Использование Asserts */ <br /></span> <span style=\"color: #0000bb;\">assert_options</span> <span style=\"color: #007700;\">(</span> <span style=\"color: #0000bb;\">ASSERT_ACTIVE</span> <span style=\"color: #007700;\">,</span> <span style=\"color: #0000bb;\">1</span> <span style=\"color: #007700;\">); <br /> <br /> function</span> <span style=\"color: #0000bb;\">showControl</span> <span style=\"color: #007700;\">(&amp;</span> <span style=\"color: #0000bb;\">$control</span> <span style=\"color: #007700;\">) { <br /></span> <span style=\"color: #0000bb;\">assert</span> <span style=\"color: #007700;\">(</span> <span style=\"color: #dd0000;\">\'is_a($var, \\\'HTMLControl\\\') || $var == null\'</span> <span style=\"color: #007700;\">); <br /> ... <br /> } <br /> <br /></span> <span style=\"color: #ff8000;\">/* Использование if конструкций */ <br /></span> <span style=\"color: #0000bb;\">define</span> <span style=\"color: #007700;\">(</span> <span style=\"color: #dd0000;\">\'ASSERT_ACTIVE\'</span> <span style=\"color: #007700;\">,</span> <span style=\"color: #0000bb;\">1</span> <span style=\"color: #007700;\">); <br /> function</span> <span style=\"color: #0000bb;\">showControl</span> <span style=\"color: #007700;\">(&amp;</span> <span style=\"color: #0000bb;\">$control</span> <span style=\"color: #007700;\">) { <br /> if (</span> <span style=\"color: #0000bb;\">ASSERT_ACTIVE</span> <span style=\"color: #007700;\">&amp;&amp; !(</span> <span style=\"color: #0000bb;\">is_a</span> <span style=\"color: #007700;\">(</span> <span style=\"color: #0000bb;\">$var</span> <span style=\"color: #007700;\">,</span> <span style=\"color: #dd0000;\">\'HTMLControl\'</span> <span style=\"color: #007700;\">) ||</span> <span style=\"color: #0000bb;\">$var</span> <span style=\"color: #007700;\">==</span> <span style=\"color: #0000bb;\">null</span> <span style=\"color: #dd0000;\">\')) <br /> trigger_error(\'</span> <span style=\"color: #0000bb;\">Assertion failed</span> <span style=\"color: #007700;\">\'</span> <span style=\"color: #0000bb;\">, E_USER_ERROR); <br /> ... <br /> }</span></span></code></p>\r\n<p><span class=\"notranslate\"> With the help of such tests can also check the function parameters, return values, etc. functions</span> <span class=\"notranslate\"> We need only consider that assert-checks should not be included in the actual live site - if the program works properly and passes all the checks, they can be disabled.</span></p>\r\n<p><span class=\"notranslate\"> <strong>Check the value of $ _REQUEST script parameters, $ _GET, $ _POST, $</strong> _COOKIES.</span></p>\r\n<p><span class=\"notranslate\"> PHP script can be seen as a large function that is called with a vague list of string parameters.</span> <span class=\"notranslate\"> If it is assumed that some of the parameters to be used in some calculations, or go to the database, they necessarily have to convert to the desired type and use only after an explicit cast!</span></p>\r\n<p><span class=\"notranslate\"> All arrays REQUEST is a conventional array, so values in them can be overwritten directly.</span></p>\r\n<p><span class=\"notranslate\"> For example:</span></p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"> <span style=\"color: #007700;\">if (isset(</span> <span style=\"color: #0000bb;\">$_GET</span> <span style=\"color: #007700;\">[</span> <span style=\"color: #dd0000;\">\'id\'</span> <span style=\"color: #007700;\">])) <br /></span> <span style=\"color: #0000bb;\">$_GET</span> <span style=\"color: #007700;\">[</span> <span style=\"color: #dd0000;\">\'id\'</span> <span style=\"color: #007700;\">] = (int)</span> <span style=\"color: #0000bb;\">$_GET</span> <span style=\"color: #007700;\">[</span> <span style=\"color: #dd0000;\">\'id\'</span> <span style=\"color: #007700;\">]; <br /> else <br /></span> <span style=\"color: #0000bb;\">$_GET</span> <span style=\"color: #007700;\">[</span> <span style=\"color: #dd0000;\">\'id\'</span> <span style=\"color: #007700;\">] =</span> <span style=\"color: #0000bb;\">null</span> <span style=\"color: #007700;\">;</span> </span></code></p>\r\n<p><span class=\"notranslate\"> <strong>Divide and rule</strong></span></p>\r\n<p><span class=\"notranslate\"> Known since the time of ancient Rome the principle of \"divide and rule\" may well be useful in the development of programs in any programming language.</span> <span class=\"notranslate\"> Including in PHP.</span> <span class=\"notranslate\"> To implement this principle of separate program into logical blocks.</span> <span class=\"notranslate\"> You can use the following methods:</span></p>\r\n<ul>\r\n<li><span class=\"notranslate\"> <strong>Using features.</strong> Delivers the structural part of the algorithm in the function.</span> <span class=\"notranslate\"> Check each part separately and then all the work of the algorithm as a whole.</span></li>\r\n<li><span class=\"notranslate\"> <strong>Using classes.</strong> Organize program code in the form of objects, interacting with each other.</span> <span class=\"notranslate\"> Highlight the spirit and style them as objects.</span> <span class=\"notranslate\"> Carefully consider how they interact with each other.</span> <span class=\"notranslate\"> Use, where it is reasonable, best design patterns (design patterns).</span></li>\r\n<li><span class=\"notranslate\"> <strong>Separate logic and HTML</strong> To do this, there are many <strong>ways:.</strong> Templeytnye library, XML, XML / XSL.</span> <span class=\"notranslate\"> Choose the best for yourself and use.</span></li>\r\n<li><span class=\"notranslate\"> <strong>Separate logic of applications using enterprise design patterns.</strong> Use split applications at the levels (layering), and other technologies to structurally divide the project into large blocks.</span></li>\r\n</ul>\r\n<p><span class=\"notranslate\"> <strong>conclusion</strong></span></p>\r\n<p><span class=\"notranslate\"> Maybe someone will seem collecting material article truths.</span> <span class=\"notranslate\"> But I think most of it is still useful, but for beginners the last section of \"divide and rule\" can be particularly useful, because determines the direction of the study program.</span></p>\r\n<p><span class=\"notranslate\"> If you have comments or their own working methods, which are not mentioned in this article, I\'ll be glad to hear and discuss them with you.</span></p>\r\n<p><span class=\"notranslate\"> I also want to express my appreciation to the club <a href=\"https://translate.googleusercontent.com/translate_c?depth=1&amp;hl=ru&amp;rurl=translate.google.com.ua&amp;sl=ru&amp;tl=en&amp;u=http://www.phpclub.ru/&amp;usg=ALkJrhhsQYMNWDQb_dKzBN6Bkmav2NpHAg\" target=\"_blank\">phpclub.ru</a> for their help in writing this article.</span></p>','en',22,'article_b',1,'2016-02-28 20:39:07'),(367,'<p><strong>Предисловие</strong></p>\r\n<p>Ошибки - это бич любой программы. Чем больше проект, тем труднее исправлять и находить ошибки. Но наиболее важным в процессе работы с программой является квалификация программиста и его желание написать правильный и аккуратный код, содержащий минимальное количество ошибок.</p>\r\n<p>В этой статье я постараюсь собрать техники и приемы, позволяющие минимизировать количество ошибок в программе, написанной на PHP. Но некоторые из представленных методов могут пригодится если вы пишите на любом языке программирования.</p>\r\n<p><strong>Знание - половина успеха</strong></p>\r\n<p class=\"mtx3\">Узнаем, о чем сообщает PHP</p>\r\n<p>В любом языке существует множество потенциально опасных ситуаций, которые чреваты неявными ошибками. При разборе транслятором исходного кода программы он может сообщать разработчику об этих ситуациях. Для этого надо лишь включить соответствующую опцию, которая очень часто по умолчанию выключена по некоторым соображениям.</p>\r\n<p>В PHP контроль вывода сообщений транслятора определяется функцией <a href=\"http://www.php.su/functions/?error-reporting\" target=\"_blank\">error_reporting</a> и значением директивы error_reporting в php.ini. Рекомендуемое её значение E_ALL - т.е. выводить сообщения о всех потенциально опасных ситуациях. К ним в PHP относятся, например, использование неинициализированной переменной, обращение к несуществующему элементу массива и т.д.</p>\r\n<p>Для включения максимально подробного вывода сообщений транслятора поставьте в начале программы вызов функции <a href=\"http://www.php.su/functions/?error-reporting\" target=\"_blank\">error_reporting</a>:</p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #ff8000;\">// Для PHP4 <br /> </span><span style=\"color: #0000bb;\">error_reporting</span><span style=\"color: #007700;\">(</span><span style=\"color: #0000bb;\">E_ALL</span><span style=\"color: #007700;\">); </span></span></code></p>\r\n<p>или поставьте значение error_reporting = E_ALL в <a href=\"http://www.php.su/prepare/?phpini\" target=\"_blank\">php.ini</a>.</p>\r\n<p>С более подробном описании возможных уровней reporting можно знакомится в PHP документации - <a href=\"http://www.php.su/functions/?cat=errorfunc\" target=\"_blank\">Error Handling and Logging Functions</a>.</p>\r\n<p>Для PHP5 введен уровень E_STRICT, который включает вывод сообщений о использовании в коде устаревших методов программирования (например, используется var для описания внутренних переменных класса). Он не входит в E_ALL, поэтому для PHP5 рекомендуемый уровень сообщений E_ALL | E_STRICT (т.е. E_ALL и E_STRICT). Соответственно, для задания вывода всех сообщений от транслятора надо вызвать error_reporting с таким параметром:</p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #ff8000;\">// Для PHP5 <br /> </span><span style=\"color: #0000bb;\">error_reporting</span><span style=\"color: #007700;\">(</span><span style=\"color: #0000bb;\">E_ALL </span><span style=\"color: #007700;\">| </span><span style=\"color: #0000bb;\">E_STRICT</span><span style=\"color: #007700;\">); </span></span></code></p>\r\n<p class=\"mtx3\">Если ни о чем не сообщает</p>\r\n<p>Если Вы установили вывод ошибок и ошибки по не выводятся, то возможно вывод ошибок в script output отключен. Проверьте значение опции ini файла <a href=\"http://www.php.su/prepare/?phpini#ini.display-errors\" target=\"_blank\">display_errors</a> (она включает вывод ошибок непосрественно в script output) и, если она выключена, включите её.</p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #007700;\">if (</span><span style=\"color: #0000bb;\">ini_get</span><span style=\"color: #007700;\">(</span><span style=\"color: #dd0000;\">\'display_errors\'</span><span style=\"color: #007700;\">) != </span><span style=\"color: #0000bb;\">1</span><span style=\"color: #007700;\">) { </span><span style=\"color: #ff8000;\">// проверяет значение опции display_errors <br /> &nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: #0000bb;\">ini_set</span><span style=\"color: #007700;\">(</span><span style=\"color: #dd0000;\">\'display_errors\'</span><span style=\"color: #007700;\">, </span><span style=\"color: #0000bb;\">1</span><span style=\"color: #007700;\">); </span><span style=\"color: #ff8000;\">// включает вывод ошибок вместе с результатом работы скрипта <br /> </span><span style=\"color: #007700;\">} </span></span></code></p>\r\n<p class=\"mtx3\">Если вдруг сообщит</p>\r\n<p>Крайне редко удается протестировать программу полностью до выпуска и в то-же время лучше не показывать пользователю сообщения об ошибках ибо его реакция на них непредсказуема. Лучше перенаправлять ошибки транслятора, которые произошли непосредственно во время работы программы, в log файл ошибок. Включить это перенаправление можно опцией log_errors в файле <a href=\"http://www.php.su/prepare/?phpini\" target=\"_blank\">php.ini</a>.</p>\r\n<p>Полезно также поставить свой обработчик ошибок, если Вы хотите не только заносить ошибки в Log файл но и добавить некоторую дополнительную логику их обработки. Например, отправить письмо при сообщении транслятора или вывести некоторое специальное сообщение для пользователя. Подробнее об этом написано в статье <a href=\"http://www.php.su/articles/?cat=common&amp;page=001\" target=\"_blank\">Ловля ошибок в PHP</a>, которую написал Антон Довгаль.</p>\r\n<p><strong>Сравниваем константу с переменной, а не наоборот</strong></p>\r\n<p>Сколько раз Вам приходилось выяснять, что ошибка в программе связанна с использованием оператора \"=\" вместо \"==\"? Что бы приходилось реже, используйте сравнения вида</p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #007700;\">if (</span><span style=\"color: #0000bb;\">10 </span><span style=\"color: #007700;\">== </span><span style=\"color: #0000bb;\">$i</span><span style=\"color: #007700;\">) { <br /> &nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: #ff8000;\">// что-то делаем <br /> </span><span style=\"color: #007700;\">} </span></span></code></p>\r\n<p>В случае использования \"=\" вместо \"==\" транслятор выдаст ошибку \"Parse error: parse error in ... on line ...\". Таким образом ошибка обнаруживается значительно быстрее.</p>\r\n<p><strong>Не используем значение дважды</strong></p>\r\n<p>Конечно, это преувеличение. Но если в программе возникает необходимость использовать значение несколько раз, можно порекомендовать объявить константу и использовать её вместо значения.</p>\r\n<p>Для PHP4 существует единственный способ объявить константу - использовать функцию <a href=\"http://www.php.su/functions/?define\" target=\"_blank\">define</a>.</p>\r\n<p>Например:<br /> define (\'BEFORE_RENDER\', \'beforeRender\');<br /> Констант в классах объявлять нельзя.</p>\r\n<p>Расширение PHP 5 для определения констант сходно с тем, которое было осуществлено при расширении от C до C++ - используется ключевое слово const. Но константы таким образом можно создавать только внутри классов.</p>\r\n<p>Например:</p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #007700;\">class </span><span style=\"color: #0000bb;\">ControlEvents </span><span style=\"color: #007700;\">{ <br /> &nbsp;&nbsp;&nbsp;&nbsp;const </span><span style=\"color: #0000bb;\">BEFORE_RENDER </span><span style=\"color: #007700;\">= </span><span style=\"color: #dd0000;\">\'beforeRender\'</span><span style=\"color: #007700;\">; <br /> } <br /> print </span><span style=\"color: #0000bb;\">ControlEvents</span><span style=\"color: #007700;\">::</span><span style=\"color: #0000bb;\">BEFORE_RENDER</span><span style=\"color: #007700;\">; </span></span></code></p>\r\n<p>Но для обращения к такой константе необходимо знать имя класса.</p>\r\n<p>Константы могут быть также добавлены непосредственно в класс. Но PHP не поддерживает такой метод. Поэтому придется объявить их как обычные переменные:</p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #007700;\">class </span><span style=\"color: #0000bb;\">Control </span><span style=\"color: #007700;\">{ <br /> <br /> &nbsp;&nbsp;&nbsp;&nbsp;var </span><span style=\"color: #0000bb;\">$BEFORE_RENDER </span><span style=\"color: #007700;\">= </span><span style=\"color: #dd0000;\">\'beforeRender\'</span><span style=\"color: #007700;\">; <br /> &nbsp;&nbsp;&nbsp;&nbsp;function </span><span style=\"color: #0000bb;\">render</span><span style=\"color: #007700;\">() { <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: #0000bb;\">$eventFunction </span><span style=\"color: #007700;\">= </span><span style=\"color: #0000bb;\">$this</span><span style=\"color: #007700;\">-&gt;</span><span style=\"color: #0000bb;\">BEFORE_RENDER</span><span style=\"color: #007700;\">; <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: #0000bb;\">$this</span><span style=\"color: #007700;\">-&gt;</span><span style=\"color: #0000bb;\">$eventFunction</span><span style=\"color: #007700;\">(); <br /> &nbsp;&nbsp;&nbsp;&nbsp;} <br /> } </span></span></code></p>\r\n<p><strong>Проверка параметров функции</strong></p>\r\n<p>В PHP параметром в функцию можно передать любую переменную. Но вот алгоритму функции может быть вовсе не все равно, что за переменную ему передали. Поэтому в начале функции полезно проверять её входные параметры на необходимый тип и диапазон значений.</p>\r\n<p>Для проверки типа используются следующие функции:</p>\r\n<ul>\r\n<li><a href=\"http://www.php.su/functions/?gettype\" target=\"_blank\">gettype</a>(Mixed $var) - возвращает тип переменной. Наиболее часто используемые типы: \"boolean\", \"integer\", \"double\", \"string\", \"array\", \"object\", \"resource\", \"NULL\".</li>\r\n<li>Функции проверки на тип: <a href=\"http://www.php.su/functions/?is-bool\" target=\"_blank\">is_bool</a>(Mixed $var), <a href=\"http://www.php.su/functions/?is-integer\" target=\"_blank\">is_integer</a>(Mixed $var), <a href=\"http://www.php.su/functions/?is-double\" target=\"_blank\">is_double</a>(Mixed $var), <a href=\"http://www.php.su/functions/?is-string\" target=\"_blank\">is_string</a>(Mixed $var), <a href=\"http://www.php.su/functions/?is-array\" target=\"_blank\">is_array</a>(Mixed $var), <a href=\"http://www.php.su/functions/?is-object\" target=\"_blank\">is_object</a>(Mixed $var), <a href=\"http://www.php.su/functions/?is-resource\" target=\"_blank\">is_resource</a>(Mixed $var) - возвращают true или false.</li>\r\n<li>Для определения класса объекта используются функции:\r\n<ul>\r\n<li><a href=\"http://www.php.su/functions/?get-class\" target=\"_blank\">get_class</a>(Object $obj) - возвращает имя класса, экземпляром которого является obj.</li>\r\n<li><a href=\"http://www.php.su/functions/?is-a\" target=\"_blank\">is_a</a>(Object $obj, String $class) - проверяет, является ли obj экземпляром сласса class или класса, унаследованного от class.</li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<p>Для PHP4 не существует автоматического способа проверки параметров функции. Все необходимые проверки необходимо делать самостоятельно.</p>\r\n<p>Код функции, осуществляющей проверку аргументов, может быть примерно такой:</p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #ff8000;\">/** <br /> * Функция showControl принимает один параметр $control, <br /> * этот параметр должен являться классом и являться <br /> * экземпляром класса HTMLControl либо классом, <br /> * унаследованным от HTMLControl. <br /> */ <br /> </span><span style=\"color: #007700;\">function </span><span style=\"color: #0000bb;\">showControl</span><span style=\"color: #007700;\">(&amp;</span><span style=\"color: #0000bb;\">$control</span><span style=\"color: #007700;\">) { <br /> &nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: #0000bb;\">is_a</span><span style=\"color: #007700;\">(</span><span style=\"color: #0000bb;\">$control</span><span style=\"color: #007700;\">, </span><span style=\"color: #dd0000;\">\'HTMLControl\'</span><span style=\"color: #007700;\">) or </span><span style=\"color: #0000bb;\">$control </span><span style=\"color: #007700;\">== </span><span style=\"color: #0000bb;\">null </span><span style=\"color: #007700;\">or exit(</span><span style=\"color: #dd0000;\">\'Type missmatch.\'</span><span style=\"color: #007700;\">); <br /> &nbsp;&nbsp;&nbsp;&nbsp;... <br /> } </span></span></code></p>\r\n<p>Достоинство этого метода состоит в том, что можно управлять сообщениями об ошибках и использовать собственный обработчик ошибок. Например, Вы можете использовать следующие функции для проверки параметров:</p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #007700;\">function </span><span style=\"color: #0000bb;\">checkParameter</span><span style=\"color: #007700;\">(&amp;</span><span style=\"color: #0000bb;\">$var</span><span style=\"color: #007700;\">, </span><span style=\"color: #0000bb;\">$class</span><span style=\"color: #007700;\">) { <br /> &nbsp;&nbsp;&nbsp;&nbsp;if (!</span><span style=\"color: #0000bb;\">is_a</span><span style=\"color: #007700;\">(</span><span style=\"color: #0000bb;\">$var</span><span style=\"color: #007700;\">, </span><span style=\"color: #0000bb;\">$class</span><span style=\"color: #007700;\">) &amp;&amp; </span><span style=\"color: #0000bb;\">$var </span><span style=\"color: #007700;\">!= </span><span style=\"color: #0000bb;\">null</span><span style=\"color: #007700;\">) <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: #0000bb;\">SFExit</span><span style=\"color: #007700;\">(</span><span style=\"color: #dd0000;\">\'Type missmatch.\'</span><span style=\"color: #007700;\">); <br /> } <br /> <br /> function </span><span style=\"color: #0000bb;\">SFExit</span><span style=\"color: #007700;\">(&amp;</span><span style=\"color: #0000bb;\">$message</span><span style=\"color: #007700;\">) { <br /> &nbsp;&nbsp;&nbsp;&nbsp;print </span><span style=\"color: #0000bb;\">$message </span><span style=\"color: #007700;\">. </span><span style=\"color: #dd0000;\">\'&lt;br&gt;\'</span><span style=\"color: #007700;\">; <br /> &nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: #0000bb;\">$backtrace </span><span style=\"color: #007700;\">= </span><span style=\"color: #0000bb;\">debug_backtrace</span><span style=\"color: #007700;\">(); <br /> &nbsp;&nbsp;&nbsp;&nbsp;for(</span><span style=\"color: #0000bb;\">$i </span><span style=\"color: #007700;\">= </span><span style=\"color: #0000bb;\">0</span><span style=\"color: #007700;\">; </span><span style=\"color: #0000bb;\">$i </span><span style=\"color: #007700;\">&lt; </span><span style=\"color: #0000bb;\">count</span><span style=\"color: #007700;\">(</span><span style=\"color: #0000bb;\">$backtrace</span><span style=\"color: #007700;\">); </span><span style=\"color: #0000bb;\">$i</span><span style=\"color: #007700;\">++) { <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print </span><span style=\"color: #0000bb;\">$i </span><span style=\"color: #007700;\">. </span><span style=\"color: #dd0000;\">\': \' </span><span style=\"color: #007700;\">. </span><span style=\"color: #0000bb;\">$backtrace</span><span style=\"color: #007700;\">[</span><span style=\"color: #0000bb;\">$i</span><span style=\"color: #007700;\">][</span><span style=\"color: #dd0000;\">\'file\'</span><span style=\"color: #007700;\">] . </span><span style=\"color: #dd0000;\">\'(\' </span><span style=\"color: #007700;\">. </span><span style=\"color: #0000bb;\">$backtrace</span><span style=\"color: #007700;\">[</span><span style=\"color: #0000bb;\">$i</span><span style=\"color: #007700;\">][</span><span style=\"color: #dd0000;\">\'line\'</span><span style=\"color: #007700;\">] . </span><span style=\"color: #dd0000;\">\')&lt;br&gt;\'</span><span style=\"color: #007700;\">; <br /> &nbsp;&nbsp;&nbsp;&nbsp;} <br /> &nbsp;&nbsp;&nbsp;&nbsp;exit(); <br /> } </span></span></code></p>\r\n<p><strong>Примечание:</strong> Функция <a href=\"http://www.php.su/functions/?debug-backtrace\" target=\"_blank\">debug_backtrace</a> введена только в PHP 4.3.0.</p>\r\n<p>Пример их применения:</p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #007700;\">function </span><span style=\"color: #0000bb;\">showControl</span><span style=\"color: #007700;\">(&amp;</span><span style=\"color: #0000bb;\">$control</span><span style=\"color: #007700;\">) { <br /> &nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: #0000bb;\">checkParameter</span><span style=\"color: #007700;\">(</span><span style=\"color: #0000bb;\">$control</span><span style=\"color: #007700;\">, </span><span style=\"color: #dd0000;\">\'HTMLControl\'</span><span style=\"color: #007700;\">); <br /> &nbsp;&nbsp;&nbsp;&nbsp;... <br /> } </span></span></code></p>\r\n<p>Для PHP5 некоторые проверки типов параметров можно задать непосредственно в описании функции. Предыдущий пример на PHP5 будет выглядеть следующим образом:</p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #007700;\">function </span><span style=\"color: #0000bb;\">showControl</span><span style=\"color: #007700;\">(</span><span style=\"color: #0000bb;\">HTMLControl $control</span><span style=\"color: #007700;\">) { <br /> &nbsp;&nbsp;&nbsp;&nbsp;... <br /> } </span></span></code></p>\r\n<p><strong>Asserts</strong></p>\r\n<p>Во время создания и отладки программы можно использовать встроенный механизм добавления проверок в код программы. Он называется <a href=\"http://www.php.su/functions/?assert\" target=\"_blank\">asserts</a> (или assert-проверки). Идея его состоит в том, что в код программы добавляются специальные проверочные конструкции, которые можно отключить для production сайта, но в любой момент включить при разработке.</p>\r\n<p>Следующие фрагменты кода примерно аналогичны:</p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #ff8000;\">/* Использование Asserts */ <br /> </span><span style=\"color: #0000bb;\">assert_options </span><span style=\"color: #007700;\">(</span><span style=\"color: #0000bb;\">ASSERT_ACTIVE</span><span style=\"color: #007700;\">, </span><span style=\"color: #0000bb;\">1</span><span style=\"color: #007700;\">); <br /> <br /> function </span><span style=\"color: #0000bb;\">showControl</span><span style=\"color: #007700;\">(&amp;</span><span style=\"color: #0000bb;\">$control</span><span style=\"color: #007700;\">) { <br /> &nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: #0000bb;\">assert</span><span style=\"color: #007700;\">(</span><span style=\"color: #dd0000;\">\'is_a($var, \\\'HTMLControl\\\') || $var == null\'</span><span style=\"color: #007700;\">); <br /> &nbsp;&nbsp;&nbsp;&nbsp;... <br /> } <br /> <br /> </span><span style=\"color: #ff8000;\">/* Использование if конструкций */ <br /> </span><span style=\"color: #0000bb;\">define</span><span style=\"color: #007700;\">(</span><span style=\"color: #dd0000;\">\'ASSERT_ACTIVE\'</span><span style=\"color: #007700;\">, </span><span style=\"color: #0000bb;\">1</span><span style=\"color: #007700;\">); <br /> function </span><span style=\"color: #0000bb;\">showControl</span><span style=\"color: #007700;\">(&amp;</span><span style=\"color: #0000bb;\">$control</span><span style=\"color: #007700;\">) { <br /> &nbsp;&nbsp;&nbsp;&nbsp;if (</span><span style=\"color: #0000bb;\">ASSERT_ACTIVE </span><span style=\"color: #007700;\">&amp;&amp; !(</span><span style=\"color: #0000bb;\">is_a</span><span style=\"color: #007700;\">(</span><span style=\"color: #0000bb;\">$var</span><span style=\"color: #007700;\">, </span><span style=\"color: #dd0000;\">\'HTMLControl\'</span><span style=\"color: #007700;\">) || </span><span style=\"color: #0000bb;\">$var </span><span style=\"color: #007700;\">== </span><span style=\"color: #0000bb;\">null</span><span style=\"color: #dd0000;\">\')) <br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trigger_error(\'</span><span style=\"color: #0000bb;\">Assertion failed</span><span style=\"color: #007700;\">\'</span><span style=\"color: #0000bb;\">, E_USER_ERROR); <br /> &nbsp;&nbsp;&nbsp;&nbsp;... <br /> } </span></span></code></p>\r\n<p>С помощью таких проверок также можно проверять параметры функций, возвращаемые функциями значения и т.д. Нужно лишь учесть, что assert-проверки не должны быть включены в реально действующем сайте - если программа нормально работает и проходит все проверки, то их можно отключить.</p>\r\n<p><strong>Проверять значения параметров скрипта $_REQUEST, $_GET, $_POST, $_COOKIES.</strong></p>\r\n<p>PHP скрипт можно рассматривать как большую функцию, которая вызывается с неопределенным списком string параметров. Если предполагается, что некоторые параметры будут использоваться в некоторых вычислениях, или отправляться в базу данных, то их обязательно надо преобразовывать к требуемому типу и использовать только после явного приведения!</p>\r\n<p>Все массивы REQUEST являются является обычными массивами, поэтому значения в них могут быть переопределены непосредственно.</p>\r\n<p>Например:</p>\r\n<p class=\"highlight\"><code><span style=\"color: #000000;\"><span style=\"color: #007700;\">if (isset(</span><span style=\"color: #0000bb;\">$_GET</span><span style=\"color: #007700;\">[</span><span style=\"color: #dd0000;\">\'id\'</span><span style=\"color: #007700;\">])) <br /> &nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: #0000bb;\">$_GET</span><span style=\"color: #007700;\">[</span><span style=\"color: #dd0000;\">\'id\'</span><span style=\"color: #007700;\">] = (int)</span><span style=\"color: #0000bb;\">$_GET</span><span style=\"color: #007700;\">[</span><span style=\"color: #dd0000;\">\'id\'</span><span style=\"color: #007700;\">]; <br /> else <br /> &nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"color: #0000bb;\">$_GET</span><span style=\"color: #007700;\">[</span><span style=\"color: #dd0000;\">\'id\'</span><span style=\"color: #007700;\">] = </span><span style=\"color: #0000bb;\">null</span><span style=\"color: #007700;\">; </span></span></code></p>\r\n<p><strong>Разделяй и властвуй</strong></p>\r\n<p>Известный со времен древнего Рима принцип \"Разделяй и властвуй\" вполне может пригодится при разработке программ на любом языке программирования. В том числе и на PHP. Для реализации этого принципа разделяйте программу на логические блоки. Для этого можно воспользоваться следующими методами:</p>\r\n<ul>\r\n<li><strong>Использование функций.</strong> Выносите структурные части алгоритма в функции. Проверяйте каждую часть отдельно и затем работу всего алгоритма в целом.</li>\r\n<li><strong>Использование классов.</strong> Организуйте программный код в виде объектов, взаимодействующих друг с другом. Выделяйте сущности и оформляйте их в виде объектов. Внимательно рассматривайте, как они взаимодействуют друг с другом. Используйте, где это разумно, лучшие шаблоны проектирования (design patterns).</li>\r\n<li><strong>Разделяйте логику и HTML.</strong> Для этого существует множество способов: темплейтные библиотеки, XML, XML/XSL. Подберите для себя наилучший и используйте.</li>\r\n<li><strong>Разделяйте логику самого приложения при помощи enterprise design patterns.</strong> Используйте разделение приложения на уровни (layering) и другие технологии, позволяющие структурно разделить проект на крупные блоки.</li>\r\n</ul>\r\n<p><strong>Заключение</strong></p>\r\n<p>Возможно, кому-то материал статьи покажется сбором прописных истин. Но я думаю, что большинству он все-таки пригодится, а для начинающих программистов последний раздел \"Разделяй и властвуй\" может оказаться особенно полезным, поскольку задает направление изучения программирования.</p>\r\n<p>Если у Вас есть комментарии или собственные приемы работы, которые не упомянуты в этой статье, я буду рад услышать и обсудить их с Вами.</p>\r\n<p>Также хочу выразить признательность участникам клуба <a href=\"http://www.phpclub.ru/\" target=\"_blank\">phpclub.ru</a> за помощь в написании статьи.</p>','ru',22,'article_b',1,'2016-02-28 20:39:07'),(368,'The first application','en',23,'article_t',1,'2016-02-28 20:45:05'),(369,'Первое приложение','ru',23,'article_t',1,'2016-02-28 20:45:05'),(370,'<p><span id=\"result_box\" class=\"\" lang=\"en\"><span class=\"hps\">A simple</span> <span class=\"hps\">platform</span> <span class=\"hps\">for conducting</span> <span class=\"hps\">small</span> <span class=\"hps\">blogs.</span><br /> <span class=\"hps\">Supports</span> <span class=\"hps\">categories</span>, <span class=\"hps\">tags</span>, articles, <span class=\"hps\">comments</span>, <span class=\"hps\">search</span>.<br /> <span class=\"hps\">Use</span> <span class=\"hps\">Java</span> <span class=\"hps\">servlet,</span> <span class=\"hps\">custom</span> <span class=\"hps\">framework</span><span class=\"\">, use</span> <span class=\"hps\">a</span> <span class=\"hps\">pattern</span> <span class=\"hps\">MVC</span><span class=\"\">.</span></span></p>\r\n<p><span class=\"\" lang=\"en\"><span class=\"\">https://github.com/petroff4ik/java-simple-blog.git</span></span></p>','en',23,'article_b',1,'2016-02-28 20:45:05'),(371,'<p>Простая платформа, для ведения небольших блогов.<br />Поддержка категорий, тегов, статей, комментариев, поиска.<br />Используется ява, сервлет, самописный каркас, заточка под паттерн мвц.</p>\r\n<p>https://github.com/petroff4ik/java-simple-blog.git</p>','ru',23,'article_b',1,'2016-02-28 20:45:05');
/*!40000 ALTER TABLE `content` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `groups`
--

DROP TABLE IF EXISTS `groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `groups` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `group_name` varchar(255) DEFAULT NULL,
  `descriptor` text,
  `user_name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_group_user_id` (`user_name`),
  CONSTRAINT `fk_group_user_id` FOREIGN KEY (`user_name`) REFERENCES `users` (`user_name`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `groups`
--

LOCK TABLES `groups` WRITE;
/*!40000 ALTER TABLE `groups` DISABLE KEYS */;
INSERT INTO `groups` VALUES (1,'ADMINS','Admin site','petroff');
/*!40000 ALTER TABLE `groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tag`
--

DROP TABLE IF EXISTS `tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tag` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `name` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`),
  KEY `fk_tag_id` (`user_id`),
  CONSTRAINT `fk_tag_user_id` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=48 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tag`
--

LOCK TABLES `tag` WRITE;
/*!40000 ALTER TABLE `tag` DISABLE KEYS */;
INSERT INTO `tag` VALUES (33,1,'java'),(34,1,'memory'),(35,1,'garbage'),(36,1,'annotation'),(37,1,'exceptions'),(38,1,'access'),(39,1,'modifiers'),(40,1,'android'),(41,1,'application'),(42,1,'Orientation'),(43,1,'php'),(44,1,'style'),(45,1,'error'),(46,1,'servlet'),(47,1,'mvc');
/*!40000 ALTER TABLE `tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_name` varchar(255) NOT NULL,
  `email` varchar(255) DEFAULT NULL,
  `password` text,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_name_groups` (`user_name`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'petroff','petroff1@gmail.com','827ccb0eea8a706c4c34a16891f84e7b');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2016-02-28 22:49:43
